From 5bbdb1c5a6241e9a351cdf3596947e9d68ae27b8 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Mon, 4 Dec 2023 17:50:39 +0100
Subject: [PATCH 1031/1141] media: dcmipp: pixelcap: update buffer handling &
 use continuous mode

Update buffer handling to be done same as for bytecap.

Change-Id: Iaec901374529cb8debb2661596d9e5be0decdef0
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/344625
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-pixelcap.c   | 133 ++++++++++--------
 1 file changed, 71 insertions(+), 62 deletions(-)

diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
index 242e1284415b..a2f5fa0fe8c3 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
@@ -179,7 +179,13 @@ struct dcmipp_pixelcap_device {
 
 	enum state state;
 
-	struct dcmipp_buf *active;
+	/*
+	 * DCMIPP driver is handling 2 buffers
+	 * active: buffer into which DCMIPP is currently writing into
+	 * next: buffer given to the DCMIPP and which will become
+	 *       automatically active on next VSYNC
+	 */
+	struct dcmipp_buf *active, *next;
 
 	void __iomem *regs;
 
@@ -194,6 +200,8 @@ struct dcmipp_pixelcap_device {
 	int vsync_count;
 	int frame_count;
 	int it_count;
+	int underrun_count;
+	int nactive_count;
 };
 
 static const struct v4l2_pix_format fmt_default = {
@@ -607,6 +615,8 @@ static int dcmipp_pixelcap_start_streaming(struct vb2_queue *vq,
 	vcap->vsync_count = 0;
 	vcap->frame_count = 0;
 	vcap->it_count = 0;
+	vcap->underrun_count = 0;
+	vcap->nactive_count = 0;
 
 	ret = pm_runtime_get_sync(vcap->dev);
 	if (ret < 0) {
@@ -648,9 +658,6 @@ static int dcmipp_pixelcap_start_streaming(struct vb2_queue *vq,
 	vcap->cmier |= DCMIPP_CMIER_PxALL(vcap->pipe_id);
 	reg_set(vcap, DCMIPP_CMIER, vcap->cmier);
 
-	/* Snapshot mode */
-	reg_set(vcap, DCMIPP_PxFCTCR(vcap->pipe_id), DCMIPP_PxFCTCR_CPTMODE);
-
 	/* Enable pipe at the end of programming */
 	reg_set(vcap, DCMIPP_PxFSCR(vcap->pipe_id), DCMIPP_PxFSCR_PIPEN);
 
@@ -661,12 +668,12 @@ static int dcmipp_pixelcap_start_streaming(struct vb2_queue *vq,
 	buf = list_first_entry_or_null(&vcap->buffers, typeof(*buf), list);
 	if (!buf) {
 		dev_dbg(vcap->dev, "Start streaming is deferred to next buffer queueing\n");
-		vcap->active = NULL;
+		vcap->next = NULL;
 		vcap->state = WAIT_FOR_BUFFER;
 		return 0;
 	}
-	vcap->active = buf;
-	dev_dbg(vcap->dev, "Start active [%d] %p phy=%pad\n",
+	vcap->next = buf;
+	dev_dbg(vcap->dev, "Start with next [%d] %p phy=%pad\n",
 		buf->vb.vb2_buf.index, buf, &buf->paddr);
 
 	vcap->state = RUNNING;
@@ -763,12 +770,12 @@ static void dcmipp_pixelcap_stop_streaming(struct vb2_queue *vq)
 	pm_runtime_put(vcap->dev);
 
 	if (vcap->errors_count)
-		dev_warn(vcap->dev, "Some errors found while streaming: errors=%d (overrun=%d), buffers=%d\n",
-			 vcap->errors_count, vcap->overrun_count,
-			 vcap->buffers_count);
-	dev_dbg(vcap->dev, "Stop streaming, errors=%d (overrun=%d), vsync=%d, frame=%d, buffers=%d, it=%d\n",
-		vcap->errors_count, vcap->overrun_count,
-		vcap->vsync_count,
+		dev_warn(vcap->dev, "Some errors found while streaming: errors=%d (overrun=%d, nactive=%d), underrun=%d, buffers=%d\n",
+			 vcap->errors_count, vcap->overrun_count, vcap->nactive_count,
+			 vcap->underrun_count, vcap->buffers_count);
+	dev_dbg(vcap->dev, "Stop streaming, errors=%d (overrun=%d, nactive=%d), underrun=%d, vsync=%d, frame=%d, buffers=%d, it=%d\n",
+		vcap->errors_count, vcap->overrun_count, vcap->nactive_count,
+		vcap->underrun_count, vcap->vsync_count,
 		vcap->frame_count, vcap->buffers_count,
 		vcap->it_count);
 }
@@ -835,20 +842,19 @@ static void dcmipp_pixelcap_buf_queue(struct vb2_buffer *vb2_buf)
 	spin_lock_irq(&vcap->irqlock);
 	list_add_tail(&buf->list, &vcap->buffers);
 
+	dev_dbg(vcap->dev, "Queue [%d] %p phy=%pad\n", buf->vb.vb2_buf.index, buf, &buf->paddr);
+
 	if (vcap->state == WAIT_FOR_BUFFER) {
-		vcap->active = buf;
-		dev_dbg(vcap->dev, "Start active [%d] %p phy=%pad\n",
+		vcap->next = buf;
+		dev_dbg(vcap->dev, "Restart with next [%d] %p phy=%pad\n",
 			buf->vb.vb2_buf.index, buf, &buf->paddr);
 
-		vcap->state = RUNNING;
+		dcmipp_start_capture(vcap, buf);
 
-		dev_dbg(vcap->dev, "Starting capture on buffer[%d] queued\n",
-			buf->vb.vb2_buf.index);
+		vcap->state = RUNNING;
 
 		spin_unlock_irq(&vcap->irqlock);
-		if (dcmipp_start_capture(vcap, buf))
-			dev_err(vcap->dev, "%s: Cannot restart capture on new buffer\n",
-				__func__);
+
 		return;
 	}
 
@@ -934,9 +940,6 @@ static void dcmipp_buffer_done(struct dcmipp_pixelcap_device *vcap,
 {
 	struct vb2_v4l2_buffer *vbuf;
 
-	if (!buf)
-		return;
-
 	list_del_init(&buf->list);
 
 	vbuf = &buf->vb;
@@ -949,41 +952,41 @@ static void dcmipp_buffer_done(struct dcmipp_pixelcap_device *vcap,
 			err ? VB2_BUF_STATE_ERROR : VB2_BUF_STATE_DONE);
 
 	vcap->buffers_count++;
-	vcap->active = NULL;
 }
 
 /* irqlock must be held */
-static void
-dcmipp_pixelcap_prepare_next_frame(struct dcmipp_pixelcap_device *vcap)
+static void dcmipp_pixelcap_set_next_frame_or_stop(struct dcmipp_pixelcap_device *vcap)
 {
-	struct dcmipp_buf *buf;
+	if (!vcap->next && list_is_singular(&vcap->buffers)) {
+		/*
+		 * If there is no available buffer (none or a single one in the list while two
+		 * are expected), stop the capture (effective for next frame). On-going frame
+		 * capture will continue till FRAME END but no further capture will be done.
+		 */
+		reg_clear(vcap, DCMIPP_PxFCTCR(vcap->pipe_id), DCMIPP_PxFCTCR_CPTREQ);
 
-	/* Configure address register with next buffer */
-	buf = list_first_entry_or_null(&vcap->buffers, typeof(*buf), list);
-	if (!buf) {
 		dev_dbg(vcap->dev, "Capture restart is deferred to next buffer queueing\n");
-		vcap->active = NULL;
+		vcap->next = NULL;
 		vcap->state = WAIT_FOR_BUFFER;
 		return;
 	}
-	vcap->active = buf;
+
+	/* If we don't have buffer yet, pick the one after active */
+	if (!vcap->next)
+		vcap->next = list_next_entry(vcap->active, list);
 
 	/*
-	 * Set frame addresses
-	 * Those registers are shadowed and will be taken into
+	 * Set buffer address
+	 * This register is shadowed and will be taken into
 	 * account on next VSYNC (start of next frame)
 	 */
-	if (buf->paddrs[0])
-		reg_write(vcap, DCMIPP_PxPPM0AR1(vcap->pipe_id), buf->paddrs[0]);
-
-	if (buf->paddrs[1])
-		reg_write(vcap, DCMIPP_P1PPM1AR1, buf->paddrs[1]);
-
-	if (buf->paddrs[2])
-		reg_write(vcap, DCMIPP_P1PPM2AR1, buf->paddrs[2]);
-
-	/* Capture request */
-	reg_set(vcap, DCMIPP_PxFCTCR(vcap->pipe_id), DCMIPP_PxFCTCR_CPTREQ);
+	reg_write(vcap, DCMIPP_PxPPM0AR1(vcap->pipe_id), vcap->next->paddrs[0]);
+	if (vcap->next->paddrs[1])
+		reg_write(vcap, DCMIPP_P1PPM1AR1, vcap->next->paddrs[1]);
+	if (vcap->next->paddrs[2])
+		reg_write(vcap, DCMIPP_P1PPM2AR1, vcap->next->paddrs[2]);
+	dev_dbg(vcap->dev, "Write [%d] %p phy=%pad\n",
+		vcap->next->vb.vb2_buf.index, vcap->next, &vcap->next->paddr);
 }
 
 /* irqlock must be held */
@@ -993,13 +996,13 @@ static void dcmipp_pixelcap_process_frame(struct dcmipp_pixelcap_device *vcap)
 	struct dcmipp_buf *buf = vcap->active;
 
 	if (!buf) {
-		dev_dbg(vcap->dev, "skip NULL active frame\n");
+		vcap->nactive_count++;
+		vcap->errors_count++;
 		return;
 	}
 
 	dcmipp_buffer_done(vcap, buf, vcap->format.sizeimage, err);
-
-	dcmipp_pixelcap_prepare_next_frame(vcap);
+	vcap->active = NULL;
 }
 
 static irqreturn_t dcmipp_pixelcap_irq_thread(int irq, void *arg)
@@ -1017,19 +1020,8 @@ static irqreturn_t dcmipp_pixelcap_irq_thread(int irq, void *arg)
 	cmsr2_pxframef = DCMIPP_CMSR2_PxFRAMEF(vcap->pipe_id);
 
 	if (vcap->cmsr2 & cmsr2_pxovrf) {
-		vcap->overrun_count++;
-		spin_unlock_irq(&vcap->irqlock);
-		return IRQ_HANDLED;
-	}
-
-	if (vcap->cmsr2 & cmsr2_pxframef &&
-	    vcap->cmsr2 & cmsr2_pxvsyncf) {
-		/* If both IT FRAME and VSYNC are received together
-		 * buffers will be corrupted, skip this frame
-		 */
 		vcap->errors_count++;
-		spin_unlock_irq(&vcap->irqlock);
-		return IRQ_HANDLED;
+		vcap->overrun_count++;
 	}
 
 	if (vcap->cmsr2 & cmsr2_pxframef) {
@@ -1038,9 +1030,26 @@ static irqreturn_t dcmipp_pixelcap_irq_thread(int irq, void *arg)
 		dcmipp_pixelcap_process_frame(vcap);
 	}
 
-	if (vcap->cmsr2 & cmsr2_pxvsyncf)
+	if (vcap->cmsr2 & cmsr2_pxvsyncf) {
 		vcap->vsync_count++;
+		if (vcap->state == WAIT_FOR_BUFFER) {
+			vcap->underrun_count++;
+			goto out;
+		}
 
+		/*
+		 * On VSYNC, the previously set next buffer is going to become active thanks to
+		 * the shadowing mechanism of the DCMIPP. In most of the cases, since a FRAMEEND
+		 * has already come, pointer next is NULL since active is reset during the
+		 * FRAMEEND handling. However, in case of framerate adjustment, there are more
+		 * VSYNC than FRAMEEND. Thus we recycle the active (but not used) buffer and put it
+		 * back into next.
+		 */
+		swap(vcap->active, vcap->next);
+		dcmipp_pixelcap_set_next_frame_or_stop(vcap);
+	}
+
+out:
 	spin_unlock_irq(&vcap->irqlock);
 	return IRQ_HANDLED;
 }
-- 
2.39.2

