From e58e9d03b9d5459ed5f1359693736991979ef815 Mon Sep 17 00:00:00 2001
From: Loic PALLARDY <loic.pallardy@st.com>
Date: Tue, 11 Oct 2022 07:49:17 -0400
Subject: [PATCH 0319/1141] media: hantro: add capability to define max burst
 length

Hantro video encoder and decoder own the capability to
set the max burst length authorized by the platform.
This patch add the possibility to define max burst
length value via device tree as this IP integration
dependent.

Signed-off-by: Loic PALLARDY <loic.pallardy@st.com>
Change-Id: I6592f4602e8426965c18ca6616e3a9115279a3b9
---
 drivers/media/platform/verisilicon/hantro.h          |  1 +
 drivers/media/platform/verisilicon/hantro_drv.c      | 12 +++++++++++-
 .../media/platform/verisilicon/hantro_g1_h264_dec.c  |  2 +-
 .../media/platform/verisilicon/hantro_g1_mpeg2_dec.c |  2 +-
 .../media/platform/verisilicon/hantro_g1_vp8_dec.c   |  2 +-
 .../media/platform/verisilicon/hantro_h1_jpeg_enc.c  |  2 +-
 6 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/media/platform/verisilicon/hantro.h b/drivers/media/platform/verisilicon/hantro.h
index 2989ebc631cc..eee6e8d0db7b 100644
--- a/drivers/media/platform/verisilicon/hantro.h
+++ b/drivers/media/platform/verisilicon/hantro.h
@@ -203,6 +203,7 @@ struct hantro_dev {
 	void __iomem *enc_base;
 	void __iomem *dec_base;
 	void __iomem *ctrl_base;
+	u32 max_burst_length;
 
 	struct mutex vpu_mutex;	/* video_device lock */
 	spinlock_t irqlock;
diff --git a/drivers/media/platform/verisilicon/hantro_drv.c b/drivers/media/platform/verisilicon/hantro_drv.c
index dfbe1dff6399..0ca9f9705afb 100644
--- a/drivers/media/platform/verisilicon/hantro_drv.c
+++ b/drivers/media/platform/verisilicon/hantro_drv.c
@@ -905,13 +905,15 @@ static int hantro_probe(struct platform_device *pdev)
 	const struct of_device_id *match;
 	struct hantro_dev *vpu;
 	struct resource *res;
+	struct device_node *np;
 	int num_bases;
-	int i, ret;
+	int i, ret, mbl;
 
 	vpu = devm_kzalloc(&pdev->dev, sizeof(*vpu), GFP_KERNEL);
 	if (!vpu)
 		return -ENOMEM;
 
+	np = pdev->dev.of_node;
 	vpu->dev = &pdev->dev;
 	vpu->pdev = pdev;
 	mutex_init(&vpu->vpu_mutex);
@@ -988,6 +990,14 @@ static int hantro_probe(struct platform_device *pdev)
 	}
 	vb2_dma_contig_set_max_seg_size(&pdev->dev, DMA_BIT_MASK(32));
 
+	/* get max burst length */
+	ret = of_property_read_u32(np, "maxburstlen", &mbl);
+	if (ret)
+		/* Set to max value if not DT properties */
+		mbl = 64;
+
+	vpu->max_burst_length = mbl / 8;
+
 	for (i = 0; i < vpu->variant->num_irqs; i++) {
 		const char *irq_name;
 		int irq;
diff --git a/drivers/media/platform/verisilicon/hantro_g1_h264_dec.c b/drivers/media/platform/verisilicon/hantro_g1_h264_dec.c
index 9de7f05eff2a..d20ed9af5b47 100644
--- a/drivers/media/platform/verisilicon/hantro_g1_h264_dec.c
+++ b/drivers/media/platform/verisilicon/hantro_g1_h264_dec.c
@@ -272,7 +272,7 @@ int hantro_g1_h264_dec_run(struct hantro_ctx *ctx)
 			   G1_REG_CONFIG_DEC_TIMEOUT_E |
 			   G1_REG_CONFIG_DEC_OUT_ENDIAN |
 			   G1_REG_CONFIG_DEC_STRENDIAN_E |
-			   G1_REG_CONFIG_DEC_MAX_BURST(16) |
+			   G1_REG_CONFIG_DEC_MAX_BURST(vpu->max_burst_length) |
 			   G1_REG_CONFIG_DEC_OUTSWAP32_E |
 			   G1_REG_CONFIG_DEC_INSWAP32_E |
 			   G1_REG_CONFIG_DEC_STRSWAP32_E |
diff --git a/drivers/media/platform/verisilicon/hantro_g1_mpeg2_dec.c b/drivers/media/platform/verisilicon/hantro_g1_mpeg2_dec.c
index 9aea331e1a3c..5ab20327283c 100644
--- a/drivers/media/platform/verisilicon/hantro_g1_mpeg2_dec.c
+++ b/drivers/media/platform/verisilicon/hantro_g1_mpeg2_dec.c
@@ -177,7 +177,7 @@ int hantro_g1_mpeg2_dec_run(struct hantro_ctx *ctx)
 	      G1_REG_DEC_OUT_ENDIAN(1) |
 	      G1_REG_DEC_ADV_PRE_DIS(0) |
 	      G1_REG_DEC_SCMD_DIS(0) |
-	      G1_REG_DEC_MAX_BURST(16);
+	      G1_REG_DEC_MAX_BURST(vpu->max_burst_length);
 	vdpu_write_relaxed(vpu, reg, G1_SWREG(2));
 
 	reg = G1_REG_DEC_MODE(5) |
diff --git a/drivers/media/platform/verisilicon/hantro_g1_vp8_dec.c b/drivers/media/platform/verisilicon/hantro_g1_vp8_dec.c
index 851eb67f19f5..3673cf111e49 100644
--- a/drivers/media/platform/verisilicon/hantro_g1_vp8_dec.c
+++ b/drivers/media/platform/verisilicon/hantro_g1_vp8_dec.c
@@ -460,7 +460,7 @@ int hantro_g1_vp8_dec_run(struct hantro_ctx *ctx)
 	      G1_REG_CONFIG_DEC_CLK_GATE_E |
 	      G1_REG_CONFIG_DEC_IN_ENDIAN |
 	      G1_REG_CONFIG_DEC_OUT_ENDIAN |
-	      G1_REG_CONFIG_DEC_MAX_BURST(16);
+	      G1_REG_CONFIG_DEC_MAX_BURST(vpu->max_burst_length);
 	vdpu_write_relaxed(vpu, reg, G1_REG_CONFIG);
 
 	reg = G1_REG_DEC_CTRL0_DEC_MODE(10) |
diff --git a/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c b/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c
index 12d69503d6ba..90654f1b0cf7 100644
--- a/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c
+++ b/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c
@@ -134,7 +134,7 @@ int hantro_h1_jpeg_enc_run(struct hantro_ctx *ctx)
 
 	reg = H1_REG_AXI_CTRL_OUTPUT_SWAP16
 		| H1_REG_AXI_CTRL_INPUT_SWAP16
-		| H1_REG_AXI_CTRL_BURST_LEN(16)
+		| H1_REG_AXI_CTRL_BURST_LEN(vpu->max_burst_length)
 		| H1_REG_AXI_CTRL_OUTPUT_SWAP32
 		| H1_REG_AXI_CTRL_INPUT_SWAP32
 		| H1_REG_AXI_CTRL_OUTPUT_SWAP8
-- 
2.39.2

