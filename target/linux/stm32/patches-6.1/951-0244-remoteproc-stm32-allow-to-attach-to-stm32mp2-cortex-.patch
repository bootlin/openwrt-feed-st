From 6dbecf395e0e10f2f7dfe8bb312848954b6fbe16 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Thu, 23 Jun 2022 14:08:20 +0200
Subject: [PATCH 0244/1141] remoteproc: stm32: allow to attach to stm32mp2
 cortex-M33 coprocessor

The driver is updated to support the attachment to the M33 non secure
firmware already powered up by the boot stage (e.g U-boot).
- new compatible in defined and associated data structure is defined.
- the Cortex-M state is relying on PWR_CPU2D2SR register (RO) instead
  of a backup register.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Change-Id: I31f24dc3d81504927a74f9da731e12b3f41b7cc5
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/257531
Reviewed-by: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Fabien DESSENNE <fabien.dessenne@foss.st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/remoteproc/stm32_rproc.c | 143 +++++++++++++++++++++++--------
 1 file changed, 107 insertions(+), 36 deletions(-)

--- a/drivers/remoteproc/stm32_rproc.c
+++ b/drivers/remoteproc/stm32_rproc.c
@@ -42,12 +42,21 @@
 
 #define RSC_TBL_SIZE		1024
 
-#define M4_STATE_OFF		0
-#define M4_STATE_INI		1
-#define M4_STATE_CRUN		2
-#define M4_STATE_CSTOP		3
-#define M4_STATE_STANDBY	4
-#define M4_STATE_CRASH		5
+#define CM_STATE_OFF		0
+#define CM_STATE_INI		1
+#define CM_STATE_CRUN		2
+#define CM_STATE_CSTOP		3
+#define CM_STATE_STANDBY	4
+#define CM_STATE_CRASH		5
+
+/* PWR_CPU2D2SR register definitions */
+#define M33_STATE_FIELD_SHIFT   2
+#define M33_STATE_FIELD_MASK    0x3
+
+#define M33_STATE_OFF		0
+#define M33_STATE_CRUN		1
+#define M33_STATE_CSLEEP	2
+#define M33_STATE_CSTOP		3
 
 /*
  * Define a default index in future may come a global list of
@@ -55,6 +64,9 @@
  */
 
 #define STM32_MP1_FW_ID    0
+#define STM32_MP2_FW_ID    1
+
+struct stm32_rproc;
 
 struct stm32_syscon {
 	struct regmap *map;
@@ -70,6 +82,11 @@ struct stm32_rproc_mem {
 	size_t size;
 };
 
+struct stm32_rproc_data {
+	int fw_id;
+	int (*get_status)(struct stm32_rproc *ddata, unsigned int *state);
+};
+
 struct stm32_rproc_mem_ranges {
 	u32 dev_addr;
 	u32 bus_addr;
@@ -89,7 +106,7 @@ struct stm32_rproc {
 	struct reset_control *hold_boot_rst;
 	struct stm32_syscon hold_boot;
 	struct stm32_syscon pdds;
-	struct stm32_syscon m4_state;
+	struct stm32_syscon cm_state;
 	struct stm32_syscon rsctbl;
 	int wdg_irq;
 	u32 nb_rmems;
@@ -98,6 +115,7 @@ struct stm32_rproc {
 	struct workqueue_struct *workqueue;
 	bool fw_loaded;
 	struct tee_rproc *trproc;
+	const struct stm32_rproc_data *desc;
 	void __iomem *rsc_va;
 };
 
@@ -264,11 +282,11 @@ static int stm32_rproc_release(struct rp
 	}
 
 	/* Update coprocessor state to OFF if available. */
-	if (ddata->m4_state.map) {
-		err = regmap_update_bits(ddata->m4_state.map,
-					 ddata->m4_state.reg,
-					 ddata->m4_state.mask,
-					 M4_STATE_OFF);
+	if (ddata->desc->fw_id == STM32_MP1_FW_ID && ddata->cm_state.map) {
+		err = regmap_update_bits(ddata->cm_state.map,
+					 ddata->cm_state.reg,
+					 ddata->cm_state.mask,
+					 CM_STATE_OFF);
 		if (err) {
 			dev_err(&rproc->dev, "failed to set copro state\n");
 			return err;
@@ -811,9 +829,74 @@ static const struct rproc_ops st_rproc_t
 	.load		= stm32_rproc_tee_elf_load,
 };
 
+static int stm32_rproc_get_m4_status(struct stm32_rproc *ddata,
+				     unsigned int *state)
+{
+	/* See stm32_rproc_parse_dt() */
+	if (!ddata->cm_state.map) {
+		/*
+		 * We couldn't get the coprocessor's state, assume
+		 * it is not running.
+		 */
+		*state = CM_STATE_OFF;
+		return 0;
+	}
+
+	return regmap_read(ddata->cm_state.map, ddata->cm_state.reg, state);
+}
+
+static int stm32_rproc_get_m33_status(struct stm32_rproc *ddata,
+				      unsigned int *state)
+{
+	int ret;
+	unsigned int cm_state;
+
+	if (!ddata->cm_state.map) {
+		/*
+		 * We couldn't get the coprocessor's state, assume
+		 * it is not running.
+		 */
+		*state = CM_STATE_OFF;
+		return 0;
+	}
+
+	ret = regmap_read(ddata->cm_state.map, ddata->cm_state.reg, &cm_state);
+	if (ret)
+		return ret;
+
+	switch ((cm_state >> M33_STATE_FIELD_SHIFT) & M33_STATE_FIELD_MASK) {
+	case M33_STATE_OFF:
+		*state = CM_STATE_OFF;
+		break;
+	case M33_STATE_CRUN:
+		*state = CM_STATE_CRUN;
+		break;
+	case M33_STATE_CSLEEP:
+		*state = CM_STATE_STANDBY;
+		break;
+	case M33_STATE_CSTOP:
+		*state = CM_STATE_CSTOP;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct stm32_rproc_data stm32_rproc_stm32pm15 = {
+	.fw_id = STM32_MP1_FW_ID,
+	.get_status = stm32_rproc_get_m4_status,
+};
+
+static const struct stm32_rproc_data stm32_rproc_stm32pm25 = {
+	.fw_id = STM32_MP2_FW_ID,
+	.get_status = stm32_rproc_get_m33_status,
+};
+
 static const struct of_device_id stm32_rproc_match[] = {
-	{.compatible = "st,stm32mp1-m4"},
-	{.compatible = "st,stm32mp2-m33"},
+	{.compatible = "st,stm32mp1-m4", .data = &stm32_rproc_stm32pm15},
+	{.compatible = "st,stm32mp2-m33", .data = &stm32_rproc_stm32pm25},
 	{},
 };
 MODULE_DEVICE_TABLE(of, stm32_rproc_match);
@@ -900,11 +983,11 @@ static int stm32_rproc_parse_dt(struct p
 	 * See if we can check the M4 status, i.e if it was started
 	 * from the boot loader or not.
 	 */
-	err = stm32_rproc_get_syscon(np, "st,syscfg-m4-state",
-				     &ddata->m4_state);
+	err = stm32_rproc_get_syscon(np, "st,syscfg-cm-state",
+				     &ddata->cm_state);
 	if (err) {
 		/* remember this */
-		ddata->m4_state.map = NULL;
+		ddata->cm_state.map = NULL;
 		/* no coprocessor state syscon (optional) */
 		dev_warn(dev, "m4 state not supported\n");
 
@@ -923,37 +1006,24 @@ static int stm32_rproc_parse_dt(struct p
 	return 0;
 }
 
-static int stm32_rproc_get_m4_status(struct stm32_rproc *ddata,
-				     unsigned int *state)
-{
-	/* See stm32_rproc_parse_dt() */
-	if (!ddata->m4_state.map) {
-		/*
-		 * We couldn't get the coprocessor's state, assume
-		 * it is not running.
-		 */
-		*state = M4_STATE_OFF;
-		return 0;
-	}
-
-	return regmap_read(ddata->m4_state.map, ddata->m4_state.reg, state);
-}
-
 static int stm32_rproc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct stm32_rproc *ddata;
 	struct device_node *np = dev->of_node;
+	const struct stm32_rproc_data *desc;
 	struct tee_rproc *trproc;
 	struct rproc *rproc;
 	unsigned int state;
 	int ret;
 
+	desc = device_get_match_data(&pdev->dev);
+
 	ret = dma_coerce_mask_and_coherent(dev, DMA_BIT_MASK(32));
 	if (ret)
 		return ret;
 
-	trproc = tee_rproc_register(dev, STM32_MP1_FW_ID);
+	trproc = tee_rproc_register(dev, desc->fw_id);
 	if (!IS_ERR_OR_NULL(trproc)) {
 		/*
 		 * Delegate the firmware management to the secure context. The
@@ -976,6 +1046,7 @@ static int stm32_rproc_probe(struct plat
 	}
 
 	ddata = rproc->priv;
+	ddata->desc = desc;
 	ddata->trproc = trproc;
 	if (trproc)
 		ddata->trproc->rproc = rproc;
@@ -990,11 +1061,11 @@ static int stm32_rproc_probe(struct plat
 	if (ret)
 		goto free_rproc;
 
-	ret = stm32_rproc_get_m4_status(ddata, &state);
+	ret = ddata->desc->get_status(ddata, &state);
 	if (ret)
 		goto free_rproc;
 
-	if (state == M4_STATE_CRUN)
+	if (state != CM_STATE_OFF)
 		rproc->state = RPROC_DETACHED;
 
 	rproc->has_iommu = false;
