From d49541da53a74aab4bc3ab1eb815ff697f80a132 Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Tue, 13 Jun 2023 17:18:24 +0200
Subject: [PATCH 0544/1141] pinctrl: stm32: access syscfg's registers only when
 it's present

The syscfg is used by pinctrl to program the interrupt mux.

If the property 'st,syscfg' is not present, skip any direct access
to syscfg.
Return error if the property is not present while flag need_syscon
requires it.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: Ib61112cd8cbcf0c95a5aeeeb924fd70cb9bbed92
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/329524
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
---
 drivers/pinctrl/stm32/pinctrl-stm32.c | 55 ++++++++++++++++++---------
 1 file changed, 36 insertions(+), 19 deletions(-)

diff --git a/drivers/pinctrl/stm32/pinctrl-stm32.c b/drivers/pinctrl/stm32/pinctrl-stm32.c
index a8895379644b..78726492a800 100644
--- a/drivers/pinctrl/stm32/pinctrl-stm32.c
+++ b/drivers/pinctrl/stm32/pinctrl-stm32.c
@@ -165,6 +165,11 @@ struct stm32_pinctrl {
 	spinlock_t irqmux_lock;
 };
 
+static inline bool stm32_pctl_uses_syscfg(struct stm32_pinctrl *pctl)
+{
+	return pctl->regmap;
+}
+
 static inline int stm32_gpio_pin(int gpio)
 {
 	return gpio % STM32_GPIO_PINS_PER_BANK;
@@ -601,6 +606,9 @@ static int stm32_gpio_domain_activate(struct irq_domain *d,
 	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
 	int ret;
 
+	if (!stm32_pctl_uses_syscfg(pctl))
+		return 0;
+
 	if (pctl->hwlock) {
 		ret = hwspin_lock_timeout_in_atomic(pctl->hwlock,
 						    HWSPNLCK_TIMEOUT);
@@ -630,23 +638,25 @@ static int stm32_gpio_domain_alloc(struct irq_domain *d,
 	unsigned long flags;
 	int ret = 0;
 
-	/*
-	 * Check first that the IRQ MUX of that line is free.
-	 * gpio irq mux is shared between several banks, protect with a lock
-	 */
-	spin_lock_irqsave(&pctl->irqmux_lock, flags);
+	if (stm32_pctl_uses_syscfg(pctl)) {
+		/*
+		 * Check first that the IRQ MUX of that line is free.
+		 * gpio irq mux is shared between several banks, protect with a lock
+		 */
+		spin_lock_irqsave(&pctl->irqmux_lock, flags);
+
+		if (pctl->irqmux_map & BIT(hwirq)) {
+			dev_err(pctl->dev, "irq line %ld already requested.\n", hwirq);
+			ret = -EBUSY;
+		} else {
+			pctl->irqmux_map |= BIT(hwirq);
+		}
 
-	if (pctl->irqmux_map & BIT(hwirq)) {
-		dev_err(pctl->dev, "irq line %ld already requested.\n", hwirq);
-		ret = -EBUSY;
-	} else {
-		pctl->irqmux_map |= BIT(hwirq);
+		spin_unlock_irqrestore(&pctl->irqmux_lock, flags);
+		if (ret)
+			return ret;
 	}
 
-	spin_unlock_irqrestore(&pctl->irqmux_lock, flags);
-	if (ret)
-		return ret;
-
 	parent_fwspec.fwnode = d->parent->fwnode;
 	parent_fwspec.param_count = 2;
 	parent_fwspec.param[0] = fwspec->param[0];
@@ -669,9 +679,11 @@ static void stm32_gpio_domain_free(struct irq_domain *d, unsigned int virq,
 
 	irq_domain_free_irqs_common(d, virq, nr_irqs);
 
-	spin_lock_irqsave(&pctl->irqmux_lock, flags);
-	pctl->irqmux_map &= ~BIT(hwirq);
-	spin_unlock_irqrestore(&pctl->irqmux_lock, flags);
+	if (stm32_pctl_uses_syscfg(pctl)) {
+		spin_lock_irqsave(&pctl->irqmux_lock, flags);
+		pctl->irqmux_map &= ~BIT(hwirq);
+		spin_unlock_irqrestore(&pctl->irqmux_lock, flags);
+	}
 }
 
 static const struct irq_domain_ops stm32_gpio_domain_ops = {
@@ -1905,8 +1917,13 @@ int stm32_pctl_probe(struct platform_device *pdev)
 
 	if (pctl->domain) {
 		ret = stm32_pctrl_dt_setup_irq(pdev, pctl);
-		if (ret)
+		if (ret == -EPROBE_DEFER)
 			return ret;
+		if (ret && match_data->need_syscon)
+			return ret;
+		/* work without syscon, no legacy mode */
+		if (ret)
+			pctl->regmap = NULL;
 	}
 
 	pins = devm_kcalloc(&pdev->dev, pctl->npins, sizeof(*pins),
@@ -2082,7 +2099,7 @@ static int __maybe_unused stm32_pinctrl_restore_gpio_regs(
 			return ret;
 	}
 
-	if (pin_is_irq)
+	if (stm32_pctl_uses_syscfg(pctl) && pin_is_irq)
 		regmap_field_write(pctl->irqmux[offset], bank->bank_ioport_nr);
 
 	return 0;
-- 
2.39.2

