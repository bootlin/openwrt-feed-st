From 1ba0475d3888901a7810e257515605aff8eeb5f2 Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Fri, 2 Feb 2024 13:47:28 +0100
Subject: [PATCH 0982/1141] dt-bindings: dma: New directory for STM32 DMA
 controllers bindings

Gather the STM32 DMA controllers bindings under ./dma/stm32/

Change-Id: I3a68541de0f2c765fa4df1c0ad36062a358b3857
Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/358975
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
---
 .../devicetree/bindings/dma/{ => stm32}/st,stm32-dma.yaml   | 6 +++---
 .../bindings/dma/{ => stm32}/st,stm32-dmamux.yaml           | 6 +++---
 .../devicetree/bindings/dma/{ => stm32}/st,stm32-mdma.yaml  | 6 +++---
 3 files changed, 9 insertions(+), 9 deletions(-)
 rename Documentation/devicetree/bindings/dma/{ => stm32}/st,stm32-dma.yaml (95%)
 rename Documentation/devicetree/bindings/dma/{ => stm32}/st,stm32-dmamux.yaml (83%)
 rename Documentation/devicetree/bindings/dma/{ => stm32}/st,stm32-mdma.yaml (95%)

--- a/Documentation/devicetree/bindings/dma/st,stm32-dma.yaml
+++ /dev/null
@@ -1,116 +0,0 @@
-# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
-%YAML 1.2
----
-$id: http://devicetree.org/schemas/dma/st,stm32-dma.yaml#
-$schema: http://devicetree.org/meta-schemas/core.yaml#
-
-title: STMicroelectronics STM32 DMA Controller bindings
-
-description: |
-  The STM32 DMA is a general-purpose direct memory access controller capable of
-  supporting 8 independent DMA channels. Each channel can have up to 8 requests.
-  DMA clients connected to the STM32 DMA controller must use the format
-  described in the dma.txt file, using a four-cell specifier for each
-  channel: a phandle to the DMA controller plus the following four integer cells:
-    1. The channel id
-    2. The request line number
-    3. A 32bit mask specifying the DMA channel configuration which are device
-      dependent:
-        -bit 9: Peripheral Increment Address
-          0x0: no address increment between transfers
-          0x1: increment address between transfers
-        -bit 10: Memory Increment Address
-          0x0: no address increment between transfers
-          0x1: increment address between transfers
-        -bit 15: Peripheral Increment Offset Size
-          0x0: offset size is linked to the peripheral bus width
-          0x1: offset size is fixed to 4 (32-bit alignment)
-        -bit 16-17: Priority level
-          0x0: low
-          0x1: medium
-          0x2: high
-          0x3: very high
-    4. A 32bit bitfield value specifying DMA features which are device dependent:
-       -bit 0-1: DMA FIFO threshold selection
-         0x0: 1/4 full FIFO
-         0x1: 1/2 full FIFO
-         0x2: 3/4 full FIFO
-         0x3: full FIFO
-       -bit 2: DMA direct mode
-         0x0: FIFO mode with threshold selectable with bit 0-1
-         0x1: Direct mode: each DMA request immediately initiates a transfer
-              from/to the memory, FIFO is bypassed.
-       -bit 4: alternative DMA request/acknowledge protocol
-         0x0: Use standard DMA ACK management, where ACK signal is maintained
-              up to the removal of request and transfer completion
-         0x1: Use alternative DMA ACK management, where ACK de-assertion does
-              not wait for the de-assertion of the REQuest, ACK is only managed
-              by transfer completion. This must only be used on channels
-              managing transfers for STM32 USART/UART.
-
-
-maintainers:
-  - Amelie Delaunay <amelie.delaunay@foss.st.com>
-
-allOf:
-  - $ref: "dma-controller.yaml#"
-
-properties:
-  "#dma-cells":
-    const: 4
-
-  compatible:
-    const: st,stm32-dma
-
-  reg:
-    maxItems: 1
-
-  clocks:
-    maxItems: 1
-
-  interrupts:
-    maxItems: 8
-    description: Should contain all of the per-channel DMA
-      interrupts in ascending order with respect to the
-      DMA channel index.
-
-  resets:
-    maxItems: 1
-
-  st,mem2mem:
-    $ref: /schemas/types.yaml#/definitions/flag
-    description: if defined, it indicates that the controller
-      supports memory-to-memory transfer
-
-required:
-  - compatible
-  - reg
-  - clocks
-  - interrupts
-
-unevaluatedProperties: false
-
-examples:
-  - |
-    #include <dt-bindings/interrupt-controller/arm-gic.h>
-    #include <dt-bindings/clock/stm32mp1-clks.h>
-    #include <dt-bindings/reset/stm32mp1-resets.h>
-    dma-controller@40026400 {
-      compatible = "st,stm32-dma";
-      reg = <0x40026400 0x400>;
-      interrupts = <56>,
-                   <57>,
-                   <58>,
-                   <59>,
-                   <60>,
-                   <68>,
-                   <69>,
-                   <70>;
-      clocks = <&clk_hclk>;
-      #dma-cells = <4>;
-      st,mem2mem;
-      resets = <&rcc 150>;
-      dma-requests = <8>;
-    };
-
-...
--- /dev/null
+++ b/Documentation/devicetree/bindings/dma/stm32/st,stm32-dma.yaml
@@ -0,0 +1,116 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/dma/stm32/st,stm32-dma.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: STMicroelectronics STM32 DMA Controller
+
+description: |
+  The STM32 DMA is a general-purpose direct memory access controller capable of
+  supporting 8 independent DMA channels. Each channel can have up to 8 requests.
+  DMA clients connected to the STM32 DMA controller must use the format
+  described in the dma.txt file, using a four-cell specifier for each
+  channel: a phandle to the DMA controller plus the following four integer cells:
+    1. The channel id
+    2. The request line number
+    3. A 32bit mask specifying the DMA channel configuration which are device
+      dependent:
+        -bit 9: Peripheral Increment Address
+          0x0: no address increment between transfers
+          0x1: increment address between transfers
+        -bit 10: Memory Increment Address
+          0x0: no address increment between transfers
+          0x1: increment address between transfers
+        -bit 15: Peripheral Increment Offset Size
+          0x0: offset size is linked to the peripheral bus width
+          0x1: offset size is fixed to 4 (32-bit alignment)
+        -bit 16-17: Priority level
+          0x0: low
+          0x1: medium
+          0x2: high
+          0x3: very high
+    4. A 32bit bitfield value specifying DMA features which are device dependent:
+       -bit 0-1: DMA FIFO threshold selection
+         0x0: 1/4 full FIFO
+         0x1: 1/2 full FIFO
+         0x2: 3/4 full FIFO
+         0x3: full FIFO
+       -bit 2: DMA direct mode
+         0x0: FIFO mode with threshold selectable with bit 0-1
+         0x1: Direct mode: each DMA request immediately initiates a transfer
+              from/to the memory, FIFO is bypassed.
+       -bit 4: alternative DMA request/acknowledge protocol
+         0x0: Use standard DMA ACK management, where ACK signal is maintained
+              up to the removal of request and transfer completion
+         0x1: Use alternative DMA ACK management, where ACK de-assertion does
+              not wait for the de-assertion of the REQuest, ACK is only managed
+              by transfer completion. This must only be used on channels
+              managing transfers for STM32 USART/UART.
+
+
+maintainers:
+  - Amelie Delaunay <amelie.delaunay@foss.st.com>
+
+allOf:
+  - $ref: /schemas/dma/dma-controller.yaml#
+
+properties:
+  "#dma-cells":
+    const: 4
+
+  compatible:
+    const: st,stm32-dma
+
+  reg:
+    maxItems: 1
+
+  clocks:
+    maxItems: 1
+
+  interrupts:
+    maxItems: 8
+    description: Should contain all of the per-channel DMA
+      interrupts in ascending order with respect to the
+      DMA channel index.
+
+  resets:
+    maxItems: 1
+
+  st,mem2mem:
+    $ref: /schemas/types.yaml#/definitions/flag
+    description: if defined, it indicates that the controller
+      supports memory-to-memory transfer
+
+required:
+  - compatible
+  - reg
+  - clocks
+  - interrupts
+
+unevaluatedProperties: false
+
+examples:
+  - |
+    #include <dt-bindings/interrupt-controller/arm-gic.h>
+    #include <dt-bindings/clock/stm32mp1-clks.h>
+    #include <dt-bindings/reset/stm32mp1-resets.h>
+    dma-controller@40026400 {
+      compatible = "st,stm32-dma";
+      reg = <0x40026400 0x400>;
+      interrupts = <56>,
+                   <57>,
+                   <58>,
+                   <59>,
+                   <60>,
+                   <68>,
+                   <69>,
+                   <70>;
+      clocks = <&clk_hclk>;
+      #dma-cells = <4>;
+      st,mem2mem;
+      resets = <&rcc 150>;
+      dma-requests = <8>;
+    };
+
+...
--- a/Documentation/devicetree/bindings/dma/st,stm32-dmamux.yaml
+++ /dev/null
@@ -1,53 +0,0 @@
-# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
-%YAML 1.2
----
-$id: http://devicetree.org/schemas/dma/st,stm32-dmamux.yaml#
-$schema: http://devicetree.org/meta-schemas/core.yaml#
-
-title: STMicroelectronics STM32 DMA MUX (DMA request router) bindings
-
-maintainers:
-  - Amelie Delaunay <amelie.delaunay@foss.st.com>
-
-allOf:
-  - $ref: "dma-router.yaml#"
-
-properties:
-  "#dma-cells":
-    const: 3
-
-  compatible:
-    const: st,stm32h7-dmamux
-
-  reg:
-    maxItems: 1
-
-  clocks:
-    maxItems: 1
-
-  resets:
-    maxItems: 1
-
-required:
-  - compatible
-  - reg
-  - dma-masters
-
-unevaluatedProperties: false
-
-examples:
-  - |
-    #include <dt-bindings/interrupt-controller/arm-gic.h>
-    #include <dt-bindings/clock/stm32mp1-clks.h>
-    #include <dt-bindings/reset/stm32mp1-resets.h>
-    dma-router@40020800 {
-      compatible = "st,stm32h7-dmamux";
-      reg = <0x40020800 0x3c>;
-      #dma-cells = <3>;
-      dma-requests = <128>;
-      dma-channels = <16>;
-      dma-masters = <&dma1>, <&dma2>;
-      clocks = <&timer_clk>;
-    };
-
-...
--- /dev/null
+++ b/Documentation/devicetree/bindings/dma/stm32/st,stm32-dmamux.yaml
@@ -0,0 +1,53 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/dma/stm32/st,stm32-dmamux.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: STMicroelectronics STM32 DMA MUX (DMA request router)
+
+maintainers:
+  - Amelie Delaunay <amelie.delaunay@foss.st.com>
+
+allOf:
+  - $ref: /schemas/dma/dma-router.yaml#
+
+properties:
+  "#dma-cells":
+    const: 3
+
+  compatible:
+    const: st,stm32h7-dmamux
+
+  reg:
+    maxItems: 1
+
+  clocks:
+    maxItems: 1
+
+  resets:
+    maxItems: 1
+
+required:
+  - compatible
+  - reg
+  - dma-masters
+
+unevaluatedProperties: false
+
+examples:
+  - |
+    #include <dt-bindings/interrupt-controller/arm-gic.h>
+    #include <dt-bindings/clock/stm32mp1-clks.h>
+    #include <dt-bindings/reset/stm32mp1-resets.h>
+    dma-router@40020800 {
+      compatible = "st,stm32h7-dmamux";
+      reg = <0x40020800 0x3c>;
+      #dma-cells = <3>;
+      dma-requests = <128>;
+      dma-channels = <16>;
+      dma-masters = <&dma1>, <&dma2>;
+      clocks = <&timer_clk>;
+    };
+
+...
--- a/Documentation/devicetree/bindings/dma/st,stm32-mdma.yaml
+++ /dev/null
@@ -1,106 +0,0 @@
-# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
-%YAML 1.2
----
-$id: http://devicetree.org/schemas/dma/st,stm32-mdma.yaml#
-$schema: http://devicetree.org/meta-schemas/core.yaml#
-
-title: STMicroelectronics STM32 MDMA Controller bindings
-
-description: |
-  The STM32 MDMA is a general-purpose direct memory access controller capable of
-  supporting 64 independent DMA channels with 256 HW requests.
-  DMA clients connected to the STM32 MDMA controller must use the format
-  described in the dma.txt file, using a five-cell specifier for each channel:
-  a phandle to the MDMA controller plus the following five integer cells:
-    1. The request line number
-    2. The priority level
-      0x0: Low
-      0x1: Medium
-      0x2: High
-      0x3: Very high
-    3. A 32bit mask specifying the DMA channel configuration
-      -bit 0-1: Source increment mode
-        0x0: Source address pointer is fixed
-        0x2: Source address pointer is incremented after each data transfer
-        0x3: Source address pointer is decremented after each data transfer
-      -bit 2-3: Destination increment mode
-        0x0: Destination address pointer is fixed
-        0x2: Destination address pointer is incremented after each data transfer
-        0x3: Destination address pointer is decremented after each data transfer
-      -bit 8-9: Source increment offset size
-        0x0: byte (8bit)
-        0x1: half-word (16bit)
-        0x2: word (32bit)
-        0x3: double-word (64bit)
-      -bit 10-11: Destination increment offset size
-        0x0: byte (8bit)
-        0x1: half-word (16bit)
-        0x2: word (32bit)
-        0x3: double-word (64bit)
-      -bit 25-18: The number of bytes to be transferred in a single transfer
-                  (min = 1 byte, max = 128 bytes)
-      -bit 29:28: Trigger Mode
-        0x00: Each MDMA request triggers a buffer transfer (max 128 bytes)
-        0x1: Each MDMA request triggers a block transfer (max 64K bytes)
-        0x2: Each MDMA request triggers a repeated block transfer
-        0x3: Each MDMA request triggers a linked list transfer
-    4. A 32bit value specifying the register to be used to acknowledge the request
-       if no HW ack signal is used by the MDMA client
-    5. A 32bit mask specifying the value to be written to acknowledge the request
-       if no HW ack signal is used by the MDMA client
-
-maintainers:
-  - Amelie Delaunay <amelie.delaunay@foss.st.com>
-
-allOf:
-  - $ref: "dma-controller.yaml#"
-
-properties:
-  "#dma-cells":
-    const: 5
-
-  compatible:
-    const: st,stm32h7-mdma
-
-  reg:
-    maxItems: 1
-
-  clocks:
-    maxItems: 1
-
-  interrupts:
-    maxItems: 1
-
-  resets:
-    maxItems: 1
-
-  st,ahb-addr-masks:
-    $ref: /schemas/types.yaml#/definitions/uint32-array
-    description: Array of u32 mask to list memory devices addressed via AHB bus.
-
-required:
-  - compatible
-  - reg
-  - clocks
-  - interrupts
-
-unevaluatedProperties: false
-
-examples:
-  - |
-    #include <dt-bindings/interrupt-controller/arm-gic.h>
-    #include <dt-bindings/clock/stm32mp1-clks.h>
-    #include <dt-bindings/reset/stm32mp1-resets.h>
-    dma-controller@52000000 {
-      compatible = "st,stm32h7-mdma";
-      reg = <0x52000000 0x1000>;
-      interrupts = <122>;
-      clocks = <&timer_clk>;
-      resets = <&rcc 992>;
-      #dma-cells = <5>;
-      dma-channels = <16>;
-      dma-requests = <32>;
-      st,ahb-addr-masks = <0x20000000>, <0x00000000>;
-    };
-
-...
--- /dev/null
+++ b/Documentation/devicetree/bindings/dma/stm32/st,stm32-mdma.yaml
@@ -0,0 +1,106 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/dma/stm32/st,stm32-mdma.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: STMicroelectronics STM32 MDMA Controller
+
+description: |
+  The STM32 MDMA is a general-purpose direct memory access controller capable of
+  supporting 64 independent DMA channels with 256 HW requests.
+  DMA clients connected to the STM32 MDMA controller must use the format
+  described in the dma.txt file, using a five-cell specifier for each channel:
+  a phandle to the MDMA controller plus the following five integer cells:
+    1. The request line number
+    2. The priority level
+      0x0: Low
+      0x1: Medium
+      0x2: High
+      0x3: Very high
+    3. A 32bit mask specifying the DMA channel configuration
+      -bit 0-1: Source increment mode
+        0x0: Source address pointer is fixed
+        0x2: Source address pointer is incremented after each data transfer
+        0x3: Source address pointer is decremented after each data transfer
+      -bit 2-3: Destination increment mode
+        0x0: Destination address pointer is fixed
+        0x2: Destination address pointer is incremented after each data transfer
+        0x3: Destination address pointer is decremented after each data transfer
+      -bit 8-9: Source increment offset size
+        0x0: byte (8bit)
+        0x1: half-word (16bit)
+        0x2: word (32bit)
+        0x3: double-word (64bit)
+      -bit 10-11: Destination increment offset size
+        0x0: byte (8bit)
+        0x1: half-word (16bit)
+        0x2: word (32bit)
+        0x3: double-word (64bit)
+      -bit 25-18: The number of bytes to be transferred in a single transfer
+                  (min = 1 byte, max = 128 bytes)
+      -bit 29:28: Trigger Mode
+        0x00: Each MDMA request triggers a buffer transfer (max 128 bytes)
+        0x1: Each MDMA request triggers a block transfer (max 64K bytes)
+        0x2: Each MDMA request triggers a repeated block transfer
+        0x3: Each MDMA request triggers a linked list transfer
+    4. A 32bit value specifying the register to be used to acknowledge the request
+       if no HW ack signal is used by the MDMA client
+    5. A 32bit mask specifying the value to be written to acknowledge the request
+       if no HW ack signal is used by the MDMA client
+
+maintainers:
+  - Amelie Delaunay <amelie.delaunay@foss.st.com>
+
+allOf:
+  - $ref: /schemas/dma/dma-controller.yaml#
+
+properties:
+  "#dma-cells":
+    const: 5
+
+  compatible:
+    const: st,stm32h7-mdma
+
+  reg:
+    maxItems: 1
+
+  clocks:
+    maxItems: 1
+
+  interrupts:
+    maxItems: 1
+
+  resets:
+    maxItems: 1
+
+  st,ahb-addr-masks:
+    $ref: /schemas/types.yaml#/definitions/uint32-array
+    description: Array of u32 mask to list memory devices addressed via AHB bus.
+
+required:
+  - compatible
+  - reg
+  - clocks
+  - interrupts
+
+unevaluatedProperties: false
+
+examples:
+  - |
+    #include <dt-bindings/interrupt-controller/arm-gic.h>
+    #include <dt-bindings/clock/stm32mp1-clks.h>
+    #include <dt-bindings/reset/stm32mp1-resets.h>
+    dma-controller@52000000 {
+      compatible = "st,stm32h7-mdma";
+      reg = <0x52000000 0x1000>;
+      interrupts = <122>;
+      clocks = <&timer_clk>;
+      resets = <&rcc 992>;
+      #dma-cells = <5>;
+      dma-channels = <16>;
+      dma-requests = <32>;
+      st,ahb-addr-masks = <0x20000000>, <0x00000000>;
+    };
+
+...
