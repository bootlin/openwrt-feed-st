From b3a7479b3b6b5ee5e3605cd5e7b3cb181fe7aa3d Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Tue, 3 Oct 2023 18:58:02 +0200
Subject: [PATCH 0558/1141] irqchip/rpmsg: fix IRQ domain remove

Freeing an IRQ while the IRQ domain has been removed can cause a crash.
In the current implementation, the rpmsg device can remove the IRQ domain
before the IRQ consumers free IRQs. The reason for this is that there is
a devlink between the platform device and the IRQ consumer devices, but
no devlink between the rpmsg device and the IRQ consumer devices.

To fix this, we need to create/remove the IRQ domain devlink at the
platform level.

However, a drawback of this implementation is that we have to allocate
the domain before knowing the number of IRQs to map.
To ensure that the size of the domain matches the number of IRQ banks
to support, a test is added.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Change-Id: Ib019670981ba13f08d77ff37e201f739da524557
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/331500
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Michel JAOUEN <michel.jaouen@st.com>
---
 drivers/irqchip/irq-rpmsg.c | 44 ++++++++++++++++++++++---------------
 1 file changed, 26 insertions(+), 18 deletions(-)

--- a/drivers/irqchip/irq-rpmsg.c
+++ b/drivers/irqchip/irq-rpmsg.c
@@ -75,7 +75,7 @@ static int irq_rpmsg_map(struct irq_doma
 	struct rpmsg_irq_dev *rirq_dev = d->host_data;
 
 	if (!atomic_read(&rirq_dev->initialized))
-		return -EINVAL;
+		return -EPROBE_DEFER;
 
 	irq_set_status_flags(virq, IRQ_LEVEL);
 	irq_set_chip_and_handler(virq, &irq_rpmsg_chip, handle_level_irq);
@@ -169,25 +169,19 @@ static void irq_rpmsg_setup_work(struct
 		goto err;
 	}
 
-	rirq_dev->banks = devm_kcalloc(&rpdev->dev, rirq_dev->nb_bank,
-				       sizeof(struct rpmsg_intc_bank),
-				       GFP_KERNEL);
-	if (!rirq_dev->banks) {
-		dev_err(&rpdev->dev, "no-mem\n");
-		goto err;
-	}
-
-	rirq_dev->irqd = irq_domain_create_linear(rpdev->dev.fwnode,
-						  rirq_dev->nb_bank * IRQS_PER_BANK,
-						  &irq_rpmsg_domain_ops,
-						  rirq_dev);
-
-	if (!rirq_dev->irqd) {
-		dev_err(&rpdev->dev, "Failed to create IRQ domain\n");
+	/*
+	 * Workaround
+	 * we can't manage IRQ domain creation here, this would leads to crash on remove.
+	 * There is no devlink between the IRQ domain client and the rpmsg device, so the IRQ domain
+	 * can be removed before the IRQs are freed.
+	 */
+	if (rirq_dev->nb_bank > 1) {
+		dev_err(&rpdev->dev, "only one IRQ bank supported\n");
 		goto err;
 	}
 
 	atomic_set(&rirq_dev->initialized, 1);
+
 	return;
 
 err:
@@ -229,8 +223,6 @@ static void irq_rpmsg_remove(struct rpms
 	struct rpmsg_irq_dev *rirq_dev = dev_get_drvdata(&rpdev->dev);
 
 	cancel_work_sync(&rirq_dev->irqrpmsg_work);
-	if (rirq_dev->irqd)
-		irq_domain_remove(rirq_dev->irqd);
 
 	atomic_set(&rirq_dev->initialized, 0);
 }
@@ -262,9 +254,23 @@ static int irq_rpmsg_plat_probe(struct p
 	platform_set_drvdata(pdev, rirq_dev);
 
 	rirq_dev->rpdrv = rpmsg_irq_drv;
+
+	rirq_dev->banks = devm_kmalloc(dev, sizeof(struct rpmsg_intc_bank), GFP_KERNEL);
+	if (!rirq_dev->banks)
+		return -ENOMEM;
+
+	rirq_dev->irqd = irq_domain_create_linear(dev->fwnode, IRQS_PER_BANK, &irq_rpmsg_domain_ops,
+						  rirq_dev);
+	if (!rirq_dev->irqd) {
+		dev_err(dev, "Failed to create IRQ domain\n");
+		return -EINVAL;
+	}
+
 	ret = register_rpmsg_driver(&rirq_dev->rpdrv);
 	if (ret) {
 		dev_err_probe(dev, ret, "failed to register rpmsg drv\n");
+		irq_domain_remove(rirq_dev->irqd);
+
 		return ret;
 	}
 
@@ -277,6 +283,8 @@ static int irq_rpmsg_plat_remove(struct
 
 	unregister_rpmsg_driver(&rirq_dev->rpdrv);
 
+	irq_domain_remove(rirq_dev->irqd);
+
 	return 0;
 }
 
