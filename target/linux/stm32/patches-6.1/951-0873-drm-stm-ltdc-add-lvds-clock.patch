From 7eca1d1a3783717005baf6228f5aa7bbc5568381 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 26 Jan 2024 10:55:07 +0100
Subject: [PATCH 0873/1141] drm/stm: ltdc: add lvds clock

Add support of lvds pixel clock as input of pixel engine clock.

Change-Id: I710103f6e5e4f9a30b426c20c5f3b33291af9182
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/354670
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 60 ++++++++++++++++++++++++++------------
 drivers/gpu/drm/stm/ltdc.h |  3 +-
 2 files changed, 44 insertions(+), 19 deletions(-)

--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -985,6 +985,15 @@ static void ltdc_crtc_atomic_disable(str
 
 	pm_runtime_put_sync_suspend(ddev->dev);
 
+	/* restore to kernel ltdc clock as parent of pixel clock */
+	if (ldev->ltdc_clk) {
+		ret = clk_set_parent(ldev->pixel_clk, ldev->ltdc_clk);
+		if (ret) {
+			DRM_ERROR("Could not set parent clock: %d\n", ret);
+			return;
+		}
+	}
+
 	/*  clear interrupt error counters */
 	mutex_lock(&ldev->err_lock);
 	ldev->transfer_err = 0;
@@ -1097,12 +1106,20 @@ static void ltdc_crtc_mode_set_nofb(stru
 	if (connector)
 		orientation = connector->display_info.panel_orientation;
 
-	if (encoder->encoder_type != DRM_MODE_ENCODER_LVDS) {
-		if (ldev->lb_clk) {
-			ret = clk_set_parent(ldev->pixel_clk, ldev->lb_clk);
+	if (encoder->encoder_type == DRM_MODE_ENCODER_LVDS) {
+		if (ldev->lvds_clk) {
+			ret = clk_set_parent(ldev->pixel_clk, ldev->lvds_clk);
 			if (ret) {
 				DRM_ERROR("Could not set parent clock: %d\n", ret);
-				return MODE_BAD;
+				return;
+			}
+		}
+	} else {
+		if (ldev->ltdc_clk) {
+			ret = clk_set_parent(ldev->pixel_clk, ldev->ltdc_clk);
+			if (ret) {
+				DRM_ERROR("Could not set parent clock: %d\n", ret);
+				return;
 			}
 		}
 	}
@@ -2474,7 +2491,7 @@ int ltdc_parse_device_tree(struct device
 
 int ltdc_get_clk(struct device *dev, struct ltdc_device *ldev)
 {
-	int ret = 0;
+	struct device_node *node;
 
 	DRM_DEBUG_DRIVER("\n");
 
@@ -2492,21 +2509,28 @@ int ltdc_get_clk(struct device *dev, str
 		ldev->bus_clk = NULL;
 	}
 
-	ldev->lb_clk = devm_clk_get(dev, "ref");
-	if (IS_ERR(ldev->lb_clk)) {
-		if (PTR_ERR(ldev->pixel_clk) != -EPROBE_DEFER)
-			DRM_DEBUG_DRIVER("Unable to get loopback clock\n");
-		ldev->lb_clk = NULL;
+	ldev->ltdc_clk = devm_clk_get(dev, "ref");
+	if (IS_ERR(ldev->ltdc_clk)) {
+		if (PTR_ERR(ldev->ltdc_clk) != -EPROBE_DEFER)
+			DRM_DEBUG_DRIVER("Unable to get ltdc clock\n");
+		ldev->ltdc_clk = NULL;
 	}
 
-	/* Set CK_KER_LTDC by default, for now */
-	if (ldev->lb_clk) {
-		if (IS_ERR(ldev->lb_clk))
-			return PTR_ERR(ldev->lb_clk);
-
-		ret = clk_set_parent(ldev->pixel_clk, ldev->lb_clk);
-		if (ret)
-			DRM_ERROR("Could not set parent clock: %d\n", ret);
+	/*
+	 * The lvds output clock is not available if the lvds is not probed.
+	 * This is a usual case, it is necessary to check the node to avoid
+	 * looking for a clock that will never be available.
+	 */
+	node = of_find_compatible_node(NULL, NULL, "st,stm32mp25-lvds");
+	if (!IS_ERR(node)) {
+		if (of_device_is_available(node)) {
+			ldev->lvds_clk = devm_clk_get(dev, "lvds");
+			if (IS_ERR(ldev->lvds_clk)) {
+				return dev_err_probe(dev, PTR_ERR(ldev->lvds_clk),
+						     "Unable to get lvds clock\n");
+			}
+		}
+		of_node_put(node);
 	}
 
 	return 0;
--- a/drivers/gpu/drm/stm/ltdc.h
+++ b/drivers/gpu/drm/stm/ltdc.h
@@ -47,7 +47,8 @@ struct ltdc_device {
 	struct regmap *regmap;
 	struct clk *pixel_clk;	/* lcd pixel clock */
 	struct clk *bus_clk;	/* bus clock */
-	struct clk *lb_clk;	/* loopback clock */
+	struct clk *ltdc_clk;	/* kernel clock */
+	struct clk *lvds_clk;	/* lvds clock */
 	struct mutex err_lock;	/* protecting error_status */
 	struct ltdc_caps caps;
 	u32 irq_status;
