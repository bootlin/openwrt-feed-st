From 1ebfe8f5632986978783d1154610e62414bd367a Mon Sep 17 00:00:00 2001
From: Cheick TRAORE <cheick.traore-ext@st.com>
Date: Tue, 12 Mar 2024 17:00:19 +0100
Subject: [PATCH 1083/1141] serial: stm32: Add support for LPUART in STM32 UART
 driver

The main difference between UART and LPUART is the generation of the
baud rate. The driver checks the baud rate register to set the type of
the device used and sets the correct value in the baud rate register. As
the receive timeout feature is not available for LPUART, LPUART uses a
timer to regularly retrieve characters stored in DMA buffer.

Change-Id: Ib67c43feddc3511653b533a969b7c94ceb28f337
Signed-off-by: Cheick TRAORE <cheick.traore-ext@st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/363098
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/tty/serial/stm32-usart.c | 161 ++++++++++++++++++++++---------
 drivers/tty/serial/stm32-usart.h |  17 ++++
 2 files changed, 131 insertions(+), 47 deletions(-)

--- a/drivers/tty/serial/stm32-usart.c
+++ b/drivers/tty/serial/stm32-usart.c
@@ -30,6 +30,7 @@
 #include <linux/serial.h>
 #include <linux/spinlock.h>
 #include <linux/sysrq.h>
+#include <linux/timer.h>
 #include <linux/tty_flip.h>
 #include <linux/tty.h>
 
@@ -476,6 +477,8 @@ static void stm32_usart_rx_dma_terminate
 {
 	dmaengine_terminate_async(stm32_port->rx_ch);
 	stm32_port->rx_dma_busy = false;
+	if (!stm32_port->has_rtor)
+		del_timer(&stm32_port->rx_dma_timer);
 }
 
 static int stm32_usart_dma_pause_resume(struct stm32_port *stm32_port,
@@ -506,6 +509,8 @@ static int stm32_usart_dma_pause_resume(
 
 static int stm32_usart_rx_dma_pause(struct stm32_port *stm32_port)
 {
+	if (!stm32_port->has_rtor)
+		del_timer(&stm32_port->rx_dma_timer);
 	return stm32_usart_dma_pause_resume(stm32_port, stm32_port->rx_ch,
 					    DMA_IN_PROGRESS, dmaengine_pause,
 					    stm32_usart_rx_dma_started,
@@ -712,6 +717,7 @@ static unsigned int stm32_usart_receive_
 static void stm32_usart_rx_dma_complete(void *arg)
 {
 	struct uart_port *port = arg;
+	struct stm32_port *stm32port = to_stm32_port(port);
 	struct tty_port *tport = &port->state->port;
 	unsigned int size;
 	unsigned long flags;
@@ -721,6 +727,16 @@ static void stm32_usart_rx_dma_complete(
 	uart_unlock_and_check_sysrq_irqrestore(port, flags);
 	if (size)
 		tty_flip_buffer_push(tport);
+	if (!stm32port->has_rtor)
+		mod_timer(&stm32port->rx_dma_timer,
+			  jiffies + msecs_to_jiffies(LPUART_RECEIVE_TIMEOUT_MS));
+}
+
+static void stm32_usart_rx_dma_timer_callback(struct timer_list *timer)
+{
+	struct stm32_port *stm32port = from_timer(stm32port, timer, rx_dma_timer);
+
+	stm32_usart_rx_dma_complete(&stm32port->port);
 }
 
 static int stm32_usart_rx_dma_start_or_resume(struct uart_port *port)
@@ -773,6 +789,10 @@ static int stm32_usart_rx_dma_start_or_r
 		return ret;
 	}
 
+	if (!stm32_port->has_rtor)
+		mod_timer(&stm32_port->rx_dma_timer,
+			  jiffies + msecs_to_jiffies(LPUART_RECEIVE_TIMEOUT_MS));
+
 	/* Issue pending DMA requests */
 	dma_async_issue_pending(stm32_port->rx_ch);
 
@@ -1361,20 +1381,18 @@ static void stm32_usart_set_termios(stru
 	const struct stm32_usart_offsets *ofs = &stm32_port->info->ofs;
 	const struct stm32_usart_config *cfg = &stm32_port->info->cfg;
 	struct serial_rs485 *rs485conf = &port->rs485;
-	unsigned int baud, bits, uart_clk, uart_clk_pres;
+	unsigned int bits, uart_clk, uart_clk_pres, baud = 0;
 	u32 usartdiv, mantissa, fraction, oversampling;
 	tcflag_t cflag = termios->c_cflag;
-	u32 cr1, cr2, cr3, isr, brr, presc;
+	u32 cr1, cr2, cr3, isr, presc, brr = 0;
 	unsigned long flags;
-	int ret;
+	int brr_fit = 0, ret;
 
 	if (!stm32_port->hw_flow_control)
 		cflag &= ~CRTSCTS;
 
 	uart_clk = clk_get_rate(stm32_port->clk);
 
-	baud = uart_get_baud_rate(port, termios, old, 0, uart_clk / 8);
-
 	spin_lock_irqsave(&port->lock, flags);
 
 	ret = readl_relaxed_poll_timeout_atomic(port->membase + ofs->isr,
@@ -1443,24 +1461,25 @@ static void stm32_usart_set_termios(stru
 			cr1 |= USART_CR1_M0;
 		}
 	}
-
-	if (ofs->rtor != UNDEF_REG && (stm32_port->rx_ch ||
-				       (stm32_port->fifoen &&
-					stm32_port->rxftcfg >= 0))) {
-		if (cflag & CSTOPB)
-			bits = bits + 3; /* 1 start bit + 2 stop bits */
-		else
-			bits = bits + 2; /* 1 start bit + 1 stop bit */
-
-		/* RX timeout irq to occur after last stop bit + bits */
-		stm32_port->cr1_irq = USART_CR1_RTOIE;
-		writel_relaxed(bits, port->membase + ofs->rtor);
-		cr2 |= USART_CR2_RTOEN;
-		/*
-		 * Enable fifo threshold irq in two cases, either when there is no DMA, or when
-		 * wake up over usart, from low power until the DMA gets re-enabled by resume.
-		 */
-		stm32_port->cr3_irq =  USART_CR3_RXFTIE;
+	if ((stm32_port->rx_ch || (stm32_port->fifoen && stm32_port->rxftcfg >= 0))) {
+		if (stm32_port->has_rtor) {
+			if (cflag & CSTOPB)
+				bits = bits + 3; /* 1 start bit + 2 stop bits */
+			else
+				bits = bits + 2; /* 1 start bit + 1 stop bit */
+			/* RX timeout irq to occur after last stop bit + bits */
+			stm32_port->cr1_irq = USART_CR1_RTOIE;
+			writel_relaxed(bits, port->membase + ofs->rtor);
+			cr2 |= USART_CR2_RTOEN;
+			/*
+			 * Enable fifo threshold irq in two cases, either when
+			 * there is no DMA, or when wake up over usart, from low
+			 * power until the DMA gets re-enabled by resume.
+			 */
+			stm32_port->cr3_irq = USART_CR3_RXFTIE;
+		} else if (!stm32_port->rx_ch) {
+			stm32_port->cr1_irq = USART_CR1_RXNEIE;
+		}
 	}
 
 	cr1 |= stm32_port->cr1_irq;
@@ -1477,41 +1496,54 @@ static void stm32_usart_set_termios(stru
 
 	for (presc = 0; presc <= USART_PRESC_MAX; presc++) {
 		uart_clk_pres = DIV_ROUND_CLOSEST(uart_clk, STM32_USART_PRESC_VAL[presc]);
-		usartdiv = DIV_ROUND_CLOSEST(uart_clk_pres, baud);
+		if (stm32_port->baudgen == UART_BAUDGEN) {
+			baud = uart_get_baud_rate(port, termios, old, 0, uart_clk / 8);
+			usartdiv = DIV_ROUND_CLOSEST(uart_clk_pres, baud);
+			/*
+			 * The USART supports 16 or 8 times oversampling.
+			 * By default we prefer 16 times oversampling, so that the receiver
+			 * has a better tolerance to clock deviations.
+			 * 8 times oversampling is only used to achieve higher speeds.
+			 */
+			if (usartdiv < 16) {
+				oversampling = 8;
+				cr1 |= USART_CR1_OVER8;
+				stm32_usart_set_bits(port, ofs->cr1, USART_CR1_OVER8);
+			} else {
+				oversampling = 16;
+				cr1 &= ~USART_CR1_OVER8;
+				stm32_usart_clr_bits(port, ofs->cr1, USART_CR1_OVER8);
+			}
 
-		/*
-		 * The USART supports 16 or 8 times oversampling.
-		 * By default we prefer 16 times oversampling, so that the receiver
-		 * has a better tolerance to clock deviations.
-		 * 8 times oversampling is only used to achieve higher speeds.
-		 */
-		if (usartdiv < 16) {
-			oversampling = 8;
-			cr1 |= USART_CR1_OVER8;
-			stm32_usart_set_bits(port, ofs->cr1, USART_CR1_OVER8);
-		} else {
-			oversampling = 16;
-			cr1 &= ~USART_CR1_OVER8;
-			stm32_usart_clr_bits(port, ofs->cr1, USART_CR1_OVER8);
+			mantissa = (usartdiv / oversampling) << USART_BRR_DIV_M_SHIFT;
+			fraction = usartdiv % oversampling;
+			brr = mantissa | fraction;
+			brr_fit = FIELD_FIT(USART_BRR_MASK, brr);
+		} else if (stm32_port->baudgen == LPUART_BAUDGEN) {
+			baud = uart_get_baud_rate(port, termios, old, 0,
+						  DIV_ROUND_CLOSEST(uart_clk, 3));
+			brr = DIV_ROUND_CLOSEST_ULL((u64)256 * uart_clk_pres, baud);
+			if (brr < LPUART_BRR_MIN_VALUE) {
+				brr = LPUART_BRR_MIN_VALUE;
+				dev_err(port->dev,
+					"unable to set baudrate, input clock is too low\n");
+				break;
+			}
+			brr_fit = FIELD_FIT(LPUART_BRR_MASK, brr);
 		}
-
-		mantissa = (usartdiv / oversampling) << USART_BRR_DIV_M_SHIFT;
-		fraction = usartdiv % oversampling;
-		brr = mantissa | fraction;
-
-		if (FIELD_FIT(USART_BRR_MASK, brr)) {
+		if (brr_fit) {
 			if (ofs->presc != UNDEF_REG) {
 				port->uartclk = uart_clk_pres;
 				writel_relaxed(presc, port->membase + ofs->presc);
 			} else if (presc) {
 				/* We need a prescaler but we don't have it (STM32F4, STM32F7) */
 				dev_err(port->dev,
-					"unable to set baudrate, input clock is too high");
+					"unable to set baudrate, input clock is too high\n");
 			}
 			break;
 		} else if (presc == USART_PRESC_MAX) {
 			/* Even with prescaler and brr at max value we can't set baudrate */
-			dev_err(port->dev, "unable to set baudrate, input clock is too high");
+			dev_err(port->dev, "unable to set baudrate, input clock is too high\n");
 			break;
 		}
 	}
@@ -1781,7 +1813,8 @@ static int stm32_usart_init_port(struct
 	port->irq = irq;
 	port->rs485_config = stm32_usart_config_rs485;
 	port->rs485_supported = stm32_rs485_supported;
-	port->iso7816_config = stm32_usart_config_iso7816;
+	if (stm32port->has_smartcard)
+		port->iso7816_config = stm32_usart_config_iso7816;
 
 	ret = stm32_usart_init_rs485(port, pdev);
 	if (ret)
@@ -1895,6 +1928,8 @@ static void stm32_usart_of_dma_rx_remove
 	if (stm32port->rx_buf)
 		dma_free_coherent(&pdev->dev, RX_BUF_L, stm32port->rx_buf,
 				  stm32port->rx_dma_buf);
+	if (!stm32port->has_rtor)
+		del_timer(&stm32port->rx_dma_timer);
 }
 
 static int stm32_usart_of_dma_rx_probe(struct stm32_port *stm32port,
@@ -1923,6 +1958,8 @@ static int stm32_usart_of_dma_rx_probe(s
 		stm32_usart_of_dma_rx_remove(stm32port, pdev);
 		return ret;
 	}
+	if (!stm32port->has_rtor)
+		timer_setup(&stm32port->rx_dma_timer, stm32_usart_rx_dma_timer_callback, 0);
 
 	return 0;
 }
@@ -2023,6 +2060,35 @@ static int stm32_usart_serial_probe(stru
 	if (!stm32port->tx_ch)
 		dev_info(&pdev->dev, "interrupt mode for tx (no dma)\n");
 
+	stm32port->baudgen = UART_BAUDGEN;
+	stm32port->has_rtor = true;
+	stm32port->has_smartcard = true;
+
+	if (stm32port->info->ofs.hwcfgr1 != UNDEF_REG) {
+		u32 hwcfgr1 = readl_relaxed(stm32port->port.membase + stm32port->info->ofs.hwcfgr1);
+
+		if (FIELD_GET(USART_HWCFCR1_CFG7, hwcfgr1))
+			stm32port->baudgen = LPUART_BAUDGEN;
+
+		if (!FIELD_GET(USART_HWCFCR1_CFG4, hwcfgr1))
+			stm32port->has_smartcard = false;
+
+		/*
+		 * As STM32H7 and STM32MPx share the same compatible but HWCFGR1 is not
+		 * defined on STM32H7, HWCFGR1_CFG5 will return a wrong value for has_rtor on
+		 * STM32H7. If the baudgen is LPUART type, we consider that this usart hasn't
+		 * got a RTOR.
+		 */
+		if (stm32port->baudgen == LPUART_BAUDGEN)
+			stm32port->has_rtor = false;
+	}
+
+	if (stm32port->has_rtor && stm32port->info->ofs.rtor == UNDEF_REG) {
+		dev_err(&pdev->dev, "The device has no RTOR register\n");
+		ret = -EINVAL;
+		goto err_rtor;
+	}
+
 	platform_set_drvdata(pdev, &stm32port->port);
 
 	pm_runtime_get_noresume(&pdev->dev);
@@ -2042,6 +2108,7 @@ err_port:
 	pm_runtime_set_suspended(&pdev->dev);
 	pm_runtime_put_noidle(&pdev->dev);
 
+err_rtor:
 	if (stm32port->tx_ch)
 		stm32_usart_of_dma_tx_remove(stm32port, pdev);
 	if (stm32port->rx_ch)
--- a/drivers/tty/serial/stm32-usart.h
+++ b/drivers/tty/serial/stm32-usart.h
@@ -8,6 +8,11 @@
 
 #define DRIVER_NAME "stm32-usart"
 
+enum stm32_baudgen_type {
+	UART_BAUDGEN = 0,
+	LPUART_BAUDGEN = 1
+};
+
 struct stm32_usart_offsets {
 	u16 cr1;
 	u16 cr2;
@@ -83,6 +88,10 @@ struct stm32_usart_info {
 #define USART_BRR_04_R_SHIFT	1
 #define USART_BRR_MASK		(USART_BRR_DIV_M_MASK | USART_BRR_DIV_F_MASK)
 
+/* LPUART_BRR */
+#define LPUART_BRR_MASK		GENMASK(19, 0)
+#define LPUART_BRR_MIN_VALUE	0x300
+
 /* USART_CR1 */
 #define USART_CR1_SBK		BIT(0)
 #define USART_CR1_RWU		BIT(1)		/* F4 */
@@ -195,6 +204,8 @@ struct stm32_usart_info {
 static const unsigned int STM32_USART_PRESC_VAL[] = {1, 2, 4, 6, 8, 10, 12, 16, 32, 64, 128, 256};
 
 /* USART_HWCFCR1 */
+#define USART_HWCFCR1_CFG4	GENMASK(15, 12)	/* MP1 */
+#define USART_HWCFCR1_CFG7	GENMASK(27, 24)	/* MP1 */
 #define USART_HWCFCR1_CFG8	GENMASK(31, 28)	/* MP1 */
 
 #define STM32_SERIAL_NAME "ttySTM"
@@ -207,6 +218,8 @@ static const unsigned int STM32_USART_PR
 
 #define STM32_USART_TIMEOUT_USEC USEC_PER_SEC /* 1s timeout in µs */
 
+#define LPUART_RECEIVE_TIMEOUT_MS 1000
+
 struct stm32_port {
 	struct uart_port port;
 	struct clk *clk;
@@ -227,6 +240,8 @@ struct stm32_port {
 	bool swap;		 /* swap RX & TX pins */
 	bool fifoen;
 	bool txdone;
+	bool has_rtor;
+	bool has_smartcard;
 	int rxftcfg;		/* RX FIFO threshold CFG      */
 	int txftcfg;		/* TX FIFO threshold CFG      */
 	bool wakeup_src;
@@ -234,6 +249,8 @@ struct stm32_port {
 	struct mctrl_gpios *gpios; /* modem control gpios */
 	struct dma_tx_state rx_dma_state;
 	struct stm32_backup_regs bkp_regs;
+	enum stm32_baudgen_type baudgen;
+	struct timer_list rx_dma_timer; /* Only used for LPUART */
 };
 
 static struct stm32_port stm32_ports[STM32_MAX_PORTS];
