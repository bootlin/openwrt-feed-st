From bc3eeceff874165407b71d3333cd164ab13e9f23 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Tue, 26 Mar 2024 13:41:35 +0100
Subject: [PATCH 1047/1141] media: dcmipp: isp_params: add validation of
 parameters prior apply

Validate that parameters given via the v4l2_buffer are acceptable prior
to applying them within the hardware.

Change-Id: I9e8e7174221749fb21619fbd7240ce97f766453b
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/369281
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-isp-params.c | 123 ++++++++++++++++--
 1 file changed, 115 insertions(+), 8 deletions(-)

diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp-params.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp-params.c
index ceb5ab6eb324..623403c6cc80 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp-params.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp-params.c
@@ -125,13 +125,19 @@ static void dcmipp_isp_params_stop_streaming(struct vb2_queue *vq)
 	spin_unlock_irq(&vout->irqlock);
 }
 
+static int dcmipp_isp_params_validate(struct stm32_dcmipp_params_cfg *params);
 static int dcmipp_isp_params_buf_prepare(struct vb2_buffer *vb)
 {
 	unsigned long size = sizeof(struct stm32_dcmipp_params_cfg);
+	struct stm32_dcmipp_params_cfg *params;
 
 	if (vb2_plane_size(vb, 0) < size)
 		return -EINVAL;
 
+	params = (struct stm32_dcmipp_params_cfg *)vb2_plane_vaddr(vb, 0);
+	if (dcmipp_isp_params_validate(params) < 0)
+		return -EINVAL;
+
 	vb2_set_plane_payload(vb, 0, size);
 
 	return 0;
@@ -144,8 +150,6 @@ static void dcmipp_isp_params_buf_queue(struct vb2_buffer *vb2_buf)
 	struct vb2_v4l2_buffer *vbuf = to_vb2_v4l2_buffer(vb2_buf);
 	struct dcmipp_buf *buf = container_of(vbuf, struct dcmipp_buf, vb);
 
-	/* TODO - Sanitize the data */
-
 	spin_lock_irq(&vout->irqlock);
 	list_add_tail(&buf->list, &vout->buffers);
 	spin_unlock_irq(&vout->irqlock);
@@ -221,6 +225,16 @@ void dcmipp_isp_params_ent_release(struct dcmipp_ent_device *ved)
 #define DCMIPP_P1BPRCR (0x824)
 #define DCMIPP_P1BPRCR_ENABLE BIT(0)
 #define DCMIPP_P1BPRCR_STRENGTH_SHIFT 1
+#define DCMIPP_P1BPRCR_STRENGTH_MASK 0x07
+static inline int
+dcmipp_isp_params_valid_bpr(struct stm32_dcmipp_isp_bpr_cfg *cfg)
+{
+	if (cfg->strength & ~DCMIPP_P1BPRCR_STRENGTH_MASK)
+		return -EINVAL;
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply_bpr(struct dcmipp_isp_params_device *vout,
 			    struct stm32_dcmipp_isp_bpr_cfg *cfg)
@@ -250,12 +264,24 @@ dcmipp_isp_params_apply_blc(struct dcmipp_isp_params_device *vout,
 #define DCMIPP_P1EXCR1_ENABLE BIT(0)
 #define DCMIPP_P1EXCR1_MULTR_SHIFT 20
 #define DCMIPP_P1EXCR1_SHFR_SHIFT 28
+#define DCMIPP_P1EXCR1_SHFR_MASK 0x07
 
 #define DCMIPP_P1EXCR2 (0x848)
 #define DCMIPP_P1EXCR2_MULTB_SHIFT 4
 #define DCMIPP_P1EXCR2_SHFB_SHIFT 12
 #define DCMIPP_P1EXCR2_MULTG_SHIFT 20
 #define DCMIPP_P1EXCR2_SHFG_SHIFT 28
+static inline int
+dcmipp_isp_params_valid_ex(struct stm32_dcmipp_isp_ex_cfg *cfg)
+{
+	if (cfg->shift_r & ~DCMIPP_P1EXCR1_SHFR_MASK ||
+	    cfg->shift_g & ~DCMIPP_P1EXCR1_SHFR_MASK ||
+	    cfg->shift_b & ~DCMIPP_P1EXCR1_SHFR_MASK)
+		return -EINVAL;
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply_ex(struct dcmipp_isp_params_device *vout,
 			   struct stm32_dcmipp_isp_ex_cfg *cfg)
@@ -274,21 +300,35 @@ dcmipp_isp_params_apply_ex(struct dcmipp_isp_params_device *vout,
 
 #define DCMIPP_P1DMCR (0x870)
 #define DCMIPP_P1DMCR_PEAK_SHIFT 16
-#define DCMIPP_P1DMCR_PEAK_MASK GENMASK(19, 16)
+#define DCMIPP_P1DMCR_PEAK_MASK 0x07
 #define DCMIPP_P1DMCR_LINEV_SHIFT 20
-#define DCMIPP_P1DMCR_LINEV_MASK GENMASK(23, 20)
+#define DCMIPP_P1DMCR_LINEV_MASK 0x07
 #define DCMIPP_P1DMCR_LINEH_SHIFT 24
-#define DCMIPP_P1DMCR_LINEH_MASK GENMASK(27, 24)
+#define DCMIPP_P1DMCR_LINEH_MASK 0x07
 #define DCMIPP_P1DMCR_EDGE_SHIFT 28
-#define DCMIPP_P1DMCR_EDGE_MASK GENMASK(31, 28)
+#define DCMIPP_P1DMCR_EDGE_MASK 0x07
+static inline int
+dcmipp_isp_params_valid_dm(struct stm32_dcmipp_isp_dm_cfg *cfg)
+{
+	if (cfg->edge & ~DCMIPP_P1DMCR_EDGE_MASK ||
+	    cfg->lineh & ~DCMIPP_P1DMCR_LINEH_MASK ||
+	    cfg->linev & ~DCMIPP_P1DMCR_LINEV_MASK ||
+	    cfg->peak & ~DCMIPP_P1DMCR_PEAK_MASK)
+		return -EINVAL;
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply_dm(struct dcmipp_isp_params_device *vout,
 			   struct stm32_dcmipp_isp_dm_cfg *cfg)
 {
 	u32 dmcr, mask;
 
-	mask = DCMIPP_P1DMCR_PEAK_MASK | DCMIPP_P1DMCR_LINEV_MASK |
-	       DCMIPP_P1DMCR_LINEH_MASK | DCMIPP_P1DMCR_EDGE_MASK;
+	mask = DCMIPP_P1DMCR_PEAK_MASK << DCMIPP_P1DMCR_PEAK_SHIFT |
+	       DCMIPP_P1DMCR_LINEV_MASK << DCMIPP_P1DMCR_LINEV_SHIFT |
+	       DCMIPP_P1DMCR_LINEH_MASK << DCMIPP_P1DMCR_LINEH_SHIFT |
+	       DCMIPP_P1DMCR_EDGE_MASK << DCMIPP_P1DMCR_EDGE_SHIFT;
 
 	dmcr = reg_read(vout, DCMIPP_P1DMCR) & ~mask;
 	reg_write(vout, DCMIPP_P1DMCR, dmcr |
@@ -303,6 +343,8 @@ dcmipp_isp_params_apply_dm(struct dcmipp_isp_params_device *vout,
 #define DCMIPP_P1CCCR_TYPE_YUV 0
 #define DCMIPP_P1CCCR_TYPE_RGB BIT(1)
 #define DCMIPP_P1CCCR_CLAMP BIT(2)
+#define DCMIPP_P1CCRR_RGB_MASK	0x7ff
+#define DCMIPP_P1CCRR_A_MASK	0x3ff
 #define DCMIPP_P1CCRR1 (0x884)
 #define DCMIPP_P1CCRR1_RG_SHIFT	16
 #define DCMIPP_P1CCRR1_RR_SHIFT	0
@@ -321,6 +363,20 @@ dcmipp_isp_params_apply_dm(struct dcmipp_isp_params_device *vout,
 #define DCMIPP_P1CCBR2 (0x898)
 #define DCMIPP_P1CCBR2_BA_SHIFT	16
 #define DCMIPP_P1CCBR2_BB_SHIFT	0
+static inline int
+dcmipp_isp_params_valid_cc(struct stm32_dcmipp_isp_cc_cfg *cfg)
+{
+	if (cfg->rr & ~DCMIPP_P1CCRR_RGB_MASK || cfg->rg & ~DCMIPP_P1CCRR_RGB_MASK ||
+	    cfg->rb & ~DCMIPP_P1CCRR_RGB_MASK || cfg->gr & ~DCMIPP_P1CCRR_RGB_MASK ||
+	    cfg->gg & ~DCMIPP_P1CCRR_RGB_MASK || cfg->gb & ~DCMIPP_P1CCRR_RGB_MASK ||
+	    cfg->br & ~DCMIPP_P1CCRR_RGB_MASK || cfg->bg & ~DCMIPP_P1CCRR_RGB_MASK ||
+	    cfg->bb & ~DCMIPP_P1CCRR_RGB_MASK || cfg->ra & ~DCMIPP_P1CCRR_A_MASK ||
+	    cfg->ga & ~DCMIPP_P1CCRR_A_MASK || cfg->ba & ~DCMIPP_P1CCRR_A_MASK)
+		return -EINVAL;
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply_cc(struct dcmipp_isp_params_device *vout,
 			   struct stm32_dcmipp_isp_cc_cfg *cfg)
@@ -356,6 +412,7 @@ dcmipp_isp_params_apply_cc(struct dcmipp_isp_params_device *vout,
 
 #define DCMIPP_P1CTCR1 (0x8a0)
 #define DCMIPP_P1CTCR1_ENABLE BIT(0)
+#define DCMIPP_P1CTCR_LUM_MASK 0x3f
 #define DCMIPP_P1CTCR1_LUM0_SHIFT 9
 
 #define DCMIPP_P1CTCR2 (0x8a4)
@@ -369,6 +426,18 @@ dcmipp_isp_params_apply_cc(struct dcmipp_isp_params_device *vout,
 #define DCMIPP_P1CTCR3_LUM7_SHIFT 9
 #define DCMIPP_P1CTCR3_LUM6_SHIFT 17
 #define DCMIPP_P1CTCR3_LUM5_SHIFT 25
+static inline int
+dcmipp_isp_params_valid_ce(struct stm32_dcmipp_isp_ce_cfg *cfg)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(cfg->lum); i++)
+		if (cfg->lum[i] & ~DCMIPP_P1CTCR_LUM_MASK)
+			return -EINVAL;
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply_ce(struct dcmipp_isp_params_device *vout,
 			   struct stm32_dcmipp_isp_ce_cfg *cfg)
@@ -388,6 +457,44 @@ dcmipp_isp_params_apply_ce(struct dcmipp_isp_params_device *vout,
 		  cfg->lum[8] << DCMIPP_P1CTCR3_LUM8_SHIFT);
 }
 
+#define DCMIPP_MODULE_CFG_MASK	(STM32_DCMIPP_ISP_BPR | STM32_DCMIPP_ISP_BLC | \
+				 STM32_DCMIPP_ISP_EX | STM32_DCMIPP_ISP_DM | \
+				 STM32_DCMIPP_ISP_CC | STM32_DCMIPP_ISP_CE)
+static int dcmipp_isp_params_validate(struct stm32_dcmipp_params_cfg *params)
+{
+	int ret;
+
+	if (params->module_cfg_update & ~DCMIPP_MODULE_CFG_MASK)
+		return -EINVAL;
+	if (params->module_cfg_update & STM32_DCMIPP_ISP_BPR) {
+		ret = dcmipp_isp_params_valid_bpr(&params->ctrls.bpr_cfg);
+		if (ret)
+			return ret;
+	}
+	if (params->module_cfg_update & STM32_DCMIPP_ISP_EX) {
+		ret = dcmipp_isp_params_valid_ex(&params->ctrls.ex_cfg);
+		if (ret)
+			return ret;
+	}
+	if (params->module_cfg_update & STM32_DCMIPP_ISP_DM) {
+		ret = dcmipp_isp_params_valid_dm(&params->ctrls.dm_cfg);
+		if (ret)
+			return ret;
+	}
+	if (params->module_cfg_update & STM32_DCMIPP_ISP_CC) {
+		ret = dcmipp_isp_params_valid_cc(&params->ctrls.cc_cfg);
+		if (ret)
+			return ret;
+	}
+	if (params->module_cfg_update & STM32_DCMIPP_ISP_CE) {
+		ret = dcmipp_isp_params_valid_ce(&params->ctrls.ce_cfg);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
 static inline void
 dcmipp_isp_params_apply(struct dcmipp_isp_params_device *vout,
 			struct stm32_dcmipp_params_cfg *buf)
-- 
2.39.2

