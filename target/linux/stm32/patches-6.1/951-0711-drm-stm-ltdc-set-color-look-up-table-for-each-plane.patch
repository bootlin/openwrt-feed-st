From fa309ffedb6e1d697d3193e6c7c25163177272a9 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Thu, 16 Nov 2023 17:14:44 +0100
Subject: [PATCH 0711/1141] drm/stm: ltdc: set color look-up table for each
 plane

The color look-up table must be applied for each plane for
the L8 (aka C8) pixel format.

Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Change-Id: I50aaae5cf4284974e1d21469707dc8cf6a942b9e
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/315796
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 54 +++++++++++++++++++++++---------------
 1 file changed, 33 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 2749b5ed127f..174beb4bb940 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -793,25 +793,6 @@ static irqreturn_t ltdc_irq(int irq, void *arg)
  * DRM_CRTC
  */
 
-static void ltdc_crtc_update_clut(struct drm_crtc *crtc)
-{
-	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
-	struct drm_color_lut *lut;
-	u32 val;
-	int i;
-
-	if (!crtc->state->color_mgmt_changed || !crtc->state->gamma_lut)
-		return;
-
-	lut = (struct drm_color_lut *)crtc->state->gamma_lut->data;
-
-	for (i = 0; i < CLUT_SIZE; i++, lut++) {
-		val = ((lut->red << 8) & 0xff0000) | (lut->green & 0xff00) |
-			(lut->blue >> 8) | (i << 24);
-		regmap_write(ldev->regmap, LTDC_L1CLUTWR, val);
-	}
-}
-
 static void ltdc_crtc_atomic_enable(struct drm_crtc *crtc,
 				    struct drm_atomic_state *state)
 {
@@ -1139,8 +1120,6 @@ static void ltdc_crtc_atomic_flush(struct drm_crtc *crtc,
 
 	DRM_DEBUG_ATOMIC("\n");
 
-	ltdc_crtc_update_clut(crtc);
-
 	/* Commit shadow registers = update planes at next vblank */
 	if (!ldev->caps.plane_reg_shadow)
 		regmap_set_bits(ldev->regmap, LTDC_SRCR, SRCR_VBR);
@@ -1400,6 +1379,35 @@ static u32 calculateScalingFactor(u32 in, u32 out)
 	return factor & 0xFFFF;
 }
 
+static void ltdc_plane_update_clut(struct drm_plane *plane,
+				   struct drm_plane_state *state)
+{
+	struct ltdc_device *ldev = plane_to_ltdc(plane);
+	struct drm_crtc *crtc = state->crtc;
+	struct drm_color_lut *lut;
+	u32 lofs = plane->index * LAY_OFS;
+	u32 val;
+	int lut_size;
+	int i;
+
+	if (!crtc || !crtc->state)
+		return;
+
+	if (!crtc->state->color_mgmt_changed || !crtc->state->gamma_lut)
+		return;
+
+	lut = (struct drm_color_lut *)crtc->state->gamma_lut->data;
+	lut_size = drm_color_lut_size(crtc->state->gamma_lut);
+	if (lut_size > CLUT_SIZE)
+		return;
+
+	for (i = 0; i < CLUT_SIZE; i++, lut++) {
+		val = ((lut->red << 8) & 0xff0000) | (lut->green & 0xff00) |
+		      (lut->blue >> 8) | (i << 24);
+		regmap_write(ldev->regmap, LTDC_L1CLUTWR + lofs, val);
+	}
+}
+
 static void ltdc_plane_atomic_update(struct drm_plane *plane,
 				     struct drm_atomic_state *state)
 {
@@ -1655,6 +1663,10 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 	/* Configure burst length */
 	regmap_write(ldev->regmap, LTDC_L1BLCR + lofs, ldev->max_burst_length);
 
+	/* set color look-up table */
+	if (fb->format->format == DRM_FORMAT_C8)
+		ltdc_plane_update_clut(plane, newstate);
+
 	/* Enable layer and CLUT if needed */
 	lxcr = fb->format->format == DRM_FORMAT_C8 ? LXCR_CLUTEN : 0;
 	lxcr |= LXCR_LEN;
-- 
2.39.2

