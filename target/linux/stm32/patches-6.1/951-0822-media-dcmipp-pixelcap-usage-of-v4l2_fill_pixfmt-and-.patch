From f9d21b0ae4f976208a7b8f37d467f93f06004dd6 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Fri, 12 Jan 2024 17:23:30 +0100
Subject: [PATCH 0822/1141] media: dcmipp: pixelcap: usage of v4l2_fill_pixfmt
 and v4l2_format_info

Use v4l2_fill_pixfmt and v4l2_format_info to compute frame size/stride.

Change-Id: I8fce06f8ea988b766d2004dee1c29d237b103ddd
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/351136
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-pixelcap.c   | 132 ++++--------------
 1 file changed, 25 insertions(+), 107 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
@@ -217,59 +217,6 @@ struct dcmipp_pixelcap_buffer {
 	struct list_head list;
 };
 
-static inline int frame_size(u32 width, u32 height, u32 format)
-{
-	switch (format) {
-	case V4L2_PIX_FMT_NV12:
-	case V4L2_PIX_FMT_NV21:
-	case V4L2_PIX_FMT_YUV420:
-	case V4L2_PIX_FMT_YVU420:
-		return (width * height * 3) / 2;
-	case V4L2_PIX_FMT_GREY:
-		return (width * height);
-	case V4L2_PIX_FMT_RGB565:
-	case V4L2_PIX_FMT_YUYV:
-	case V4L2_PIX_FMT_YVYU:
-	case V4L2_PIX_FMT_UYVY:
-	case V4L2_PIX_FMT_VYUY:
-	case V4L2_PIX_FMT_NV16:
-	case V4L2_PIX_FMT_NV61:
-		return (width * height * 2);
-	case V4L2_PIX_FMT_RGB24:
-		return (width * height * 3);
-	case V4L2_PIX_FMT_ARGB32:
-		return (width * height * 4);
-	default:
-		return 0;
-	}
-}
-
-static inline int frame_stride(u32 width, u32 format)
-{
-	switch (format) {
-	case V4L2_PIX_FMT_NV12:
-	case V4L2_PIX_FMT_NV21:
-	case V4L2_PIX_FMT_YUV420:
-	case V4L2_PIX_FMT_YVU420:
-	case V4L2_PIX_FMT_NV16:
-	case V4L2_PIX_FMT_NV61:
-	case V4L2_PIX_FMT_GREY:
-		return width;
-	case V4L2_PIX_FMT_RGB565:
-	case V4L2_PIX_FMT_YUYV:
-	case V4L2_PIX_FMT_YVYU:
-	case V4L2_PIX_FMT_UYVY:
-	case V4L2_PIX_FMT_VYUY:
-		return (width * 2);
-	case V4L2_PIX_FMT_RGB24:
-		return (width * 3);
-	case V4L2_PIX_FMT_ARGB32:
-		return (width * 4);
-	default:
-		return 0;
-	}
-}
-
 static inline int hdw_pixel_alignment(u32 format)
 {
 	/* 16 bytes alignment required by hardware */
@@ -300,59 +247,30 @@ static inline int frame_planes(dma_addr_
 			       u32 strides[], u64 sizes[],
 			       u32 width, u32 height, u32 format)
 {
-	switch (format) {
-	case V4L2_PIX_FMT_RGB565:
-	case V4L2_PIX_FMT_YUYV:
-	case V4L2_PIX_FMT_YVYU:
-	case V4L2_PIX_FMT_UYVY:
-	case V4L2_PIX_FMT_VYUY:
-		addrs[0] = base_addr;
-		strides[0] = width * 2;
-		sizes[0] = strides[0] * height;
-		return 0;
-	case V4L2_PIX_FMT_RGB24:
-		addrs[0] = base_addr;
-		strides[0] = width * 3;
-		sizes[0] = strides[0] * height;
-		return 0;
-	case V4L2_PIX_FMT_ARGB32:
-		addrs[0] = base_addr;
-		strides[0] = width * 4;
-		sizes[0] = strides[0] * height;
-		return 0;
-	case V4L2_PIX_FMT_NV12:
-	case V4L2_PIX_FMT_NV21:
-		addrs[0] = base_addr;
-		strides[0] = width;
-		sizes[0] = width * height;
-		addrs[1] = addrs[0] + sizes[0];
-		strides[1] = strides[0];
-		sizes[1] = width * height / 2;
-		return 0;
-	case V4L2_PIX_FMT_NV16:
-	case V4L2_PIX_FMT_NV61:
-		addrs[0] = base_addr;
-		strides[0] = width;
-		sizes[0] = strides[0] * height;
-		addrs[1] = addrs[0] + sizes[0];
-		strides[1] = strides[0];
-		sizes[1] = width * height;
-		return 0;
-	case V4L2_PIX_FMT_YUV420:
-	case V4L2_PIX_FMT_YVU420:
-		addrs[0] = base_addr;
-		strides[0] = width;
-		sizes[0] = strides[0] * height;
+	const struct v4l2_format_info *info;
+
+	info = v4l2_format_info(format);
+	if (!info)
+		return -EINVAL;
+
+	/* Fill-in each plane information */
+	addrs[0] = base_addr;
+	strides[0] = width * info->bpp[0];
+	sizes[0] = strides[0] * height;
+
+	if (info->comp_planes > 1) {
 		addrs[1] = addrs[0] + sizes[0];
-		strides[1] = strides[0] / 2;
-		sizes[1] = width * height / 4;
+		strides[1] = width * info->bpp[1] / info->hdiv;
+		sizes[1] = strides[1] * height / info->vdiv;
+	}
+
+	if (info->comp_planes > 2) {
 		addrs[2] = addrs[1] + sizes[1];
-		strides[2] = strides[0] / 2;
-		sizes[2] = width * height / 4;
-		return 0;
-	default:
-		return -1;
+		strides[2] = width * info->bpp[2] / info->hdiv;
+		sizes[2] = strides[2] * height / info->vdiv;
 	}
+
+	return 0;
 }
 
 static int dcmipp_pixelcap_querycap(struct file *file, void *priv,
@@ -418,8 +336,8 @@ static int dcmipp_pixelcap_try_fmt_vid_c
 			"resolution updated: %dx%d -> %dx%d\n",
 			in_w, in_h, format->width, format->height);
 
-	format->bytesperline = frame_stride(format->width, format->pixelformat);
-	format->sizeimage = frame_size(format->width, format->height, format->pixelformat);
+	v4l2_fill_pixfmt(format, format->pixelformat,
+			 format->width, format->height);
 
 	if (format->field == V4L2_FIELD_ANY)
 		format->field = fmt_default.field;
@@ -1215,8 +1133,8 @@ dcmipp_pixelcap_ent_init(struct device *
 	/* Set default frame format */
 	vcap->format = fmt_default;
 	format = &vcap->format;
-	format->bytesperline = frame_stride(format->width, format->pixelformat);
-	format->sizeimage = frame_size(format->width, format->height, format->pixelformat);
+	v4l2_fill_pixfmt(format, format->pixelformat,
+			 format->width, format->height);
 
 	/* Fill the dcmipp_ent_device struct */
 	vcap->ved.ent = &vcap->vdev.entity;
