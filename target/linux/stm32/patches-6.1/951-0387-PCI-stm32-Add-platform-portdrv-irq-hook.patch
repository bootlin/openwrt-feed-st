From 135ba07205500c8afb974d5f1674905535720259 Mon Sep 17 00:00:00 2001
From: Christian Bruel <christian.bruel@foss.st.com>
Date: Tue, 2 May 2023 11:16:43 +0200
Subject: [PATCH 0387/1141] PCI: stm32: Add platform portdrv irq hook

The Synopsys Designware controller uses interrupt signals to assert AER
and AER service messages When MSI are enable this is equivalent to the
controller receiving and MSI with the msg_num value as the MSI vector.

Signed-off-by: Christian Bruel <christian.bruel@foss.st.com>
Change-Id: Ifa25924e4357fa5a932ecfc6b7644f25cd0d96de
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/309516
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Eric FOURMONT <eric.fourmont-ext@st.com>
---
 drivers/pci/controller/dwc/pcie-stm32.c | 31 +++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

--- a/drivers/pci/controller/dwc/pcie-stm32.c
+++ b/drivers/pci/controller/dwc/pcie-stm32.c
@@ -13,6 +13,7 @@
 #include <linux/of_platform.h>
 #include <linux/of_gpio.h>
 #include <linux/phy/phy.h>
+#include <linux/msi.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
 #include "pcie-designware.h"
@@ -137,6 +138,30 @@ static irqreturn_t stm32_pcie_aer_msi_ir
 	return IRQ_HANDLED;
 }
 
+static int stm32_pcie_port_irqs(struct pci_dev *pci_dev, u32 *pme, u32 *aer, u32 *dpc)
+{
+	struct dw_pcie_rp *pp = pci_dev->bus->sysdata;
+	struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
+	struct stm32_pcie *stm32_pcie = to_stm32_pcie(pci);
+	int nirqs = 0;
+
+	if (aer && stm32_pcie->aer_irq)
+		nirqs++;
+	if (pme && stm32_pcie->pme_irq)
+		nirqs++;
+
+	nirqs = pci_alloc_irq_vectors(pci_dev, nirqs, nirqs, PCI_IRQ_MSI);
+	if (nirqs < 0)
+		return nirqs;
+
+	if (aer && stm32_pcie->aer_irq)
+		*aer = stm32_pcie->aer_irq;
+	if (pme && stm32_pcie->pme_irq)
+		*pme = stm32_pcie->pme_irq;
+
+	return 0;
+}
+
 static int stm32_add_pcie_port(struct stm32_pcie *stm32_pcie,
 			       struct platform_device *pdev)
 {
@@ -186,6 +211,10 @@ static int stm32_add_pcie_port(struct st
 		}
 	}
 
+	/* Register AER/PME pordrv hook */
+	if (stm32_pcie->pme_irq || stm32_pcie->aer_irq)
+		pcie_port_irqs_hook = stm32_pcie_port_irqs;
+
 	ret = regmap_update_bits(stm32_pcie->regmap, SYSCFG_PCIECR,
 				 STM32MP25_PCIECR_TYPE_MASK, STM32MP25_PCIECR_RC);
 	if (ret)
@@ -297,6 +326,8 @@ static int stm32_pcie_remove(struct plat
 
 	dw_pcie_host_deinit(pp);
 	clk_disable_unprepare(stm32_pcie->clk);
+	pcie_port_irqs_hook = NULL;
+
 	phy_exit(stm32_pcie->phy);
 
 	return 0;
