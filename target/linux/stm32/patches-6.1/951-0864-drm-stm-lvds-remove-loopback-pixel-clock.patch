From 8cd8d2135715499ae8b89f0a9fdf1c49d9880dd1 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 26 Jan 2024 11:31:31 +0100
Subject: [PATCH 0864/1141] drm/stm: lvds: remove loopback pixel clock

Parent of pixel clock should be set by the display controller.

Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Change-Id: I7ed3d4a1cf5149c272e6cc28c3a15e64a164517c
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/354666
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/gpu/drm/stm/lvds.c | 90 ++++++++++++++++++--------------------
 1 file changed, 43 insertions(+), 47 deletions(-)

diff --git a/drivers/gpu/drm/stm/lvds.c b/drivers/gpu/drm/stm/lvds.c
index 41482dd699fb..dcf7576a406b 100644
--- a/drivers/gpu/drm/stm/lvds.c
+++ b/drivers/gpu/drm/stm/lvds.c
@@ -266,7 +266,6 @@ struct stm_lvds {
 	struct device *dev;
 	struct clk *pclk;		/* APB bus clock */
 	struct clk *pllref_clk;		/* HSE / Flexclkgen */
-	struct clk *pixel_clk;
 	struct clk_hw lvds_ck_px;	/* Pixel clock */
 	u32 pixel_clock_rate;		/* Pixel clock rate */
 	struct {
@@ -575,12 +574,13 @@ static int lvds_pixel_clk_enable(struct clk_hw *hw)
 	struct lvds_phy_info *phy;
 	int ret;
 
-
-	ret = pm_runtime_get_sync(lvds->dev);
-	if (ret < 0) {
-		DRM_ERROR("Failed to set mode, cannot get sync\n");
+	ret = clk_prepare_enable(lvds->pclk);
+	if (ret)
 		return ret;
-	}
+
+	ret = clk_prepare_enable(lvds->pllref_clk);
+	if (ret)
+		goto err_pclk;
 
 	/*
 	 * In case we are operating in dual link, PHY Slv is set before PHY
@@ -595,7 +595,7 @@ static int lvds_pixel_clk_enable(struct clk_hw *hw)
 		ret = lvds_pll_enable(lvds, phy);
 		if (ret) {
 			DRM_ERROR("Unable to enable PHY PLL Slv: %d\n", ret);
-			return ret;
+			goto err_pllref;
 		}
 	}
 
@@ -609,11 +609,18 @@ static int lvds_pixel_clk_enable(struct clk_hw *hw)
 		ret = lvds_pll_enable(lvds, phy);
 		if (ret) {
 			DRM_ERROR("Unable to enable PHY PLL Mst: %d\n", ret);
-			return ret;
+			goto err_pllref;
 		}
 	}
 
 	return 0;
+
+err_pllref:
+	clk_disable_unprepare(lvds->pllref_clk);
+err_pclk:
+	clk_disable_unprepare(lvds->pclk);
+
+	return ret;
 }
 
 static void lvds_pixel_clk_disable(struct clk_hw *hw)
@@ -634,7 +641,8 @@ static void lvds_pixel_clk_disable(struct clk_hw *hw)
 		lvds_clear(lvds, lvds->phy_slave->base + lvds->phy_slave->ofs.PxGCR,
 			   PHY_GCR_DIV_RSTN | PHY_GCR_RSTZ);
 
-	pm_runtime_put(lvds->dev);
+	clk_disable_unprepare(lvds->pllref_clk);
+	clk_disable_unprepare(lvds->pclk);
 }
 
 static unsigned long lvds_pixel_clk_recalc_rate(struct clk_hw *hw,
@@ -1026,10 +1034,12 @@ static void lvds_atomic_enable(struct drm_bridge *bridge,
 	struct drm_crtc *crtc;
 	int ret;
 
-	ret = pm_runtime_get_sync(lvds->dev);
-	if (ret < 0) {
-		DRM_ERROR("Failed to set mode, cannot get sync\n");
-		return;
+	if (!pm_runtime_active(lvds->dev)) {
+		ret = pm_runtime_get_sync(lvds->dev);
+		if (ret < 0) {
+			DRM_ERROR("Failed to set mode, cannot get sync\n");
+			return;
+		}
 	}
 
 	connector = drm_atomic_get_new_connector_for_encoder(state,
@@ -1063,27 +1073,9 @@ static void lvds_atomic_disable(struct drm_bridge *bridge,
 	pm_runtime_put(lvds->dev);
 }
 
-static bool lvds_mode_fixup(struct drm_bridge *bridge,
-				   const struct drm_display_mode *mode,
-				   struct drm_display_mode *adjusted_mode)
-{
-	struct stm_lvds *lvds = bridge_to_stm_lvds(bridge);
-	int ret;
-
-	/* Switch pixel clock parent to own clock */
-	ret = clk_set_parent(lvds->pixel_clk, lvds->lvds_ck_px.clk);
-	if (ret) {
-		DRM_ERROR("Could not set parent clock: %d\n", ret);
-		return false;
-	}
-
-	return true;
-}
-
 static const struct drm_bridge_funcs lvds_bridge_funcs = {
 	.attach = lvds_attach,
 	.detach = lvds_detach,
-	.mode_fixup = lvds_mode_fixup,
 	.atomic_enable = lvds_atomic_enable,
 	.atomic_disable = lvds_atomic_disable,
 	.atomic_duplicate_state = drm_atomic_helper_bridge_duplicate_state,
@@ -1134,16 +1126,19 @@ static int lvds_probe(struct platform_device *pdev)
 		return  PTR_ERR(lvds->vdda18_supply);
 	}
 
-	rstc = devm_reset_control_get_exclusive(dev, NULL);
+	/* To obtain a continuous display after the probe, reset shouldn't be done */
+	if (!device_property_read_bool(dev, "default-on")) {
+		rstc = devm_reset_control_get_exclusive(dev, NULL);
 
-	if (IS_ERR(rstc)) {
-		ret = PTR_ERR(rstc);
-		return ret;
-	}
+		if (IS_ERR(rstc)) {
+			ret = PTR_ERR(rstc);
+			return ret;
+		}
 
-	reset_control_assert(rstc);
-	usleep_range(10, 20);
-	reset_control_deassert(rstc);
+		reset_control_assert(rstc);
+		usleep_range(10, 20);
+		reset_control_deassert(rstc);
+	}
 
 	port1 = of_graph_get_port_by_id(dev->of_node, 1);
 	port2 = of_graph_get_port_by_id(dev->of_node, 2);
@@ -1216,13 +1211,6 @@ static int lvds_probe(struct platform_device *pdev)
 		return ret;
 	}
 
-	lvds->pixel_clk = devm_clk_get(lvds->dev, "pixclk");
-	if (IS_ERR(lvds->pixel_clk)) {
-		ret = PTR_ERR(lvds->pixel_clk);
-		DRM_ERROR("Unable to get pix clock: %d\n", ret);
-		return ret;
-	}
-
 	ret = lvds_pixel_clk_register(lvds);
 	if (ret) {
 		DRM_ERROR("Failed to register LVDS pixel clock: %d\n", ret);
@@ -1232,10 +1220,18 @@ static int lvds_probe(struct platform_device *pdev)
 	lvds->lvds_bridge.funcs = &lvds_bridge_funcs;
 	lvds->lvds_bridge.of_node = dev->of_node;
 
-	pm_runtime_enable(lvds->dev);
 	drm_bridge_add(&lvds->lvds_bridge);
 	platform_set_drvdata(pdev, lvds);
 
+	pm_runtime_enable(dev);
+
+	/*
+	 * To obtain a continuous display after the probe,
+	 *  the clocks must remain activated
+	 */
+	if (device_property_read_bool(dev, "default-on"))
+		pm_runtime_get_sync(dev);
+
 	return 0;
 }
 
-- 
2.39.2

