From 11e69778fc0f8801fb1ed9530942f2eafbf4e9f2 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Thu, 8 Feb 2024 17:22:49 +0100
Subject: [PATCH 0938/1141] drm/stm: dsi: add power supply vdd

Vdd & Vadd18 supplies are specific to MP25 SOC.

Change-Id: Ib41e723ef603c904353e57c3ccef895fc1d5cb59
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/358850
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/gpu/drm/stm/dw_mipi_dsi-stm.c | 97 +++++++++++++++++----------
 1 file changed, 60 insertions(+), 37 deletions(-)

--- a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
+++ b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
@@ -1125,8 +1125,15 @@ static struct dw_mipi_dsi_plat_data dw_m
 	.phy_ops = &dw_mipi_dsi_stm_phy_ops,
 };
 
+static struct dw_mipi_dsi_plat_data dw_mipi_dsi_stm32mp25_plat_data = {
+	.max_data_lanes = 4,
+	.mode_valid = dw_mipi_dsi_stm_mode_valid,
+	.phy_ops = &dw_mipi_dsi_stm_phy_141_ops,
+};
+
 static const struct of_device_id dw_mipi_dsi_stm_dt_ids[] = {
 	{ .compatible = "st,stm32-dsi", .data = &dw_mipi_dsi_stm_plat_data, },
+	{ .compatible = "st,stm32mp25-dsi", .data = &dw_mipi_dsi_stm32mp25_plat_data, },
 	{ },
 };
 MODULE_DEVICE_TABLE(of, dw_mipi_dsi_stm_dt_ids);
@@ -1149,30 +1156,47 @@ static int dw_mipi_dsi_stm_probe(struct
 		return ret;
 	}
 
-	dsi->vdd_supply = devm_regulator_get(dev, "phy-dsi");
-	if (IS_ERR(dsi->vdd_supply)) {
-		ret = PTR_ERR(dsi->vdd_supply);
-		dev_err_probe(dev, ret, "Failed to request regulator\n");
-		return ret;
-	}
+	if (of_device_is_compatible(dev->of_node, "st,stm32-dsi")) {
+		dsi->vdd_supply = devm_regulator_get(dev, "phy-dsi");
+		if (IS_ERR(dsi->vdd_supply)) {
+			ret = PTR_ERR(dsi->vdd_supply);
+			dev_err_probe(dev, ret, "Failed to request regulator\n");
+			return ret;
+		}
 
-	ret = regulator_enable(dsi->vdd_supply);
-	if (ret) {
-		DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
-		return ret;
+		ret = regulator_enable(dsi->vdd_supply);
+		if (ret) {
+			DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
+			return ret;
+		}
 	}
 
-	dsi->vdda18_supply = devm_regulator_get(dev, "vdda18");
-	if (IS_ERR(dsi->vdda18_supply)) {
-		ret = PTR_ERR(dsi->vdda18_supply);
-		dev_err_probe(dev, ret, "Failed to request regulator\n");
-		goto err_clk_get;
-	}
+	if (of_device_is_compatible(dev->of_node, "st,stm32mp25-dsi")) {
+		dsi->vdd_supply = devm_regulator_get(dev, "vdd");
+		if (IS_ERR(dsi->vdd_supply)) {
+			ret = PTR_ERR(dsi->vdd_supply);
+			dev_err_probe(dev, ret, "Failed to request regulator\n");
+			return ret;
+		}
 
-	ret = regulator_enable(dsi->vdda18_supply);
-	if (ret) {
-		DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
-		return ret;
+		ret = regulator_enable(dsi->vdd_supply);
+		if (ret) {
+			DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
+			return ret;
+		}
+
+		dsi->vdda18_supply = devm_regulator_get(dev, "vdda18");
+		if (IS_ERR(dsi->vdda18_supply)) {
+			ret = PTR_ERR(dsi->vdda18_supply);
+			dev_err_probe(dev, ret, "Failed to request regulator\n");
+			goto err_clk_get;
+		}
+
+		ret = regulator_enable(dsi->vdda18_supply);
+		if (ret) {
+			DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
+			return ret;
+		}
 	}
 
 	dsi->pllref_clk = devm_clk_get(dev, "ref");
@@ -1225,14 +1249,6 @@ static int dw_mipi_dsi_stm_probe(struct
 	dsi->pdata.base = dsi->base;
 	dsi->pdata.priv_data = dsi;
 
-	if (dsi->hw_version == HWVER_130 || dsi->hw_version == HWVER_131) {
-		dsi->pdata.max_data_lanes = 2;
-		dsi->pdata.phy_ops = &dw_mipi_dsi_stm_phy_ops;
-	} else if (dsi->hw_version == HWVER_141) {
-		dsi->pdata.max_data_lanes = 4;
-		dsi->pdata.phy_ops = &dw_mipi_dsi_stm_phy_141_ops;
-	}
-
 	platform_set_drvdata(pdev, dsi);
 
 	dsi->dsi = dw_mipi_dsi_probe(pdev, &dsi->pdata);
@@ -1275,7 +1291,8 @@ static int dw_mipi_dsi_stm_probe(struct
 err_dsi_probe:
 	clk_disable_unprepare(dsi->pclk);
 err_regu_enable:
-	regulator_disable(dsi->vdda18_supply);
+	if (dsi->vdda18_supply)
+		regulator_disable(dsi->vdda18_supply);
 err_clk_get:
 	regulator_disable(dsi->vdd_supply);
 
@@ -1301,7 +1318,8 @@ static int __maybe_unused dw_mipi_dsi_st
 	clk_disable_unprepare(dsi->pllref_clk);
 	clk_disable_unprepare(dsi->pclk);
 	regulator_disable(dsi->vdd_supply);
-	regulator_disable(dsi->vdda18_supply);
+	if (dsi->vdda18_supply)
+		regulator_disable(dsi->vdda18_supply);
 
 	return 0;
 }
@@ -1313,15 +1331,18 @@ static int __maybe_unused dw_mipi_dsi_st
 
 	DRM_DEBUG_DRIVER("\n");
 
-	ret = regulator_enable(dsi->vdda18_supply);
-	if (ret) {
-		DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
-		return ret;
+	if (dsi->vdda18_supply) {
+		ret = regulator_enable(dsi->vdda18_supply);
+		if (ret) {
+			DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
+			return ret;
+		}
 	}
 
 	ret = regulator_enable(dsi->vdd_supply);
 	if (ret) {
-		regulator_disable(dsi->vdda18_supply);
+		if (dsi->vdda18_supply)
+			regulator_disable(dsi->vdda18_supply);
 		DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
 		return ret;
 	}
@@ -1329,7 +1350,8 @@ static int __maybe_unused dw_mipi_dsi_st
 	ret = clk_prepare_enable(dsi->pclk);
 	if (ret) {
 		regulator_disable(dsi->vdd_supply);
-		regulator_disable(dsi->vdda18_supply);
+		if (dsi->vdda18_supply)
+			regulator_disable(dsi->vdda18_supply);
 		DRM_ERROR("Failed to enable pclk: %d\n", ret);
 		return ret;
 	}
@@ -1338,7 +1360,8 @@ static int __maybe_unused dw_mipi_dsi_st
 	if (ret) {
 		clk_disable_unprepare(dsi->pclk);
 		regulator_disable(dsi->vdd_supply);
-		regulator_disable(dsi->vdda18_supply);
+		if (dsi->vdda18_supply)
+			regulator_disable(dsi->vdda18_supply);
 		DRM_ERROR("Failed to enable pllref_clk: %d\n", ret);
 		return ret;
 	}
