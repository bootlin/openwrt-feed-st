From 8295a7a82490c90efb68006e56f538f6f0ff25eb Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Tue, 17 Oct 2023 13:05:03 +0200
Subject: [PATCH 0847/1141] drm/stm: lvds: add power supplies vdd & vdda18

This patch enables power supplies vdd & vdda18.

Change-Id: I005ccbf9ab0fc7adf670af1117a33b305cc5e528
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/334558
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/gpu/drm/stm/lvds.c | 53 +++++++++++++++++++++++++++++++-------
 1 file changed, 43 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/stm/lvds.c b/drivers/gpu/drm/stm/lvds.c
index a58f8c4aa870..41482dd699fb 100644
--- a/drivers/gpu/drm/stm/lvds.c
+++ b/drivers/gpu/drm/stm/lvds.c
@@ -20,6 +20,7 @@
 #include <linux/module.h>
 #include <linux/of_device.h>
 #include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
 #include <linux/reset.h>
 
 /* LVDS Host registers */
@@ -280,6 +281,9 @@ struct stm_lvds {
 	struct drm_connector	connector;
 	struct drm_encoder	*encoder;
 	struct drm_panel	*panel;
+
+	struct regulator *vdd_supply;
+	struct regulator *vdda18_supply;
 };
 
 #define bridge_to_stm_lvds(b) \
@@ -1118,6 +1122,18 @@ static int lvds_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	lvds->vdd_supply = devm_regulator_get(dev, "vdd");
+	if (IS_ERR(lvds->vdd_supply)) {
+		dev_err_probe(dev, ret, "Failed to request regulator\n");
+		return PTR_ERR(lvds->vdd_supply);
+	}
+
+	lvds->vdda18_supply = devm_regulator_get(dev, "vdda18");
+	if (IS_ERR(lvds->vdda18_supply)) {
+		dev_err_probe(dev, ret, "Failed to request regulator\n");
+		return  PTR_ERR(lvds->vdda18_supply);
+	}
+
 	rstc = devm_reset_control_get_exclusive(dev, NULL);
 
 	if (IS_ERR(rstc)) {
@@ -1244,6 +1260,8 @@ static int __maybe_unused lvds_runtime_suspend(struct device *dev)
 
 	clk_disable_unprepare(lvds->pllref_clk);
 	clk_disable_unprepare(lvds->pclk);
+	regulator_disable(lvds->vdd_supply);
+	regulator_disable(lvds->vdda18_supply);
 
 	return 0;
 }
@@ -1255,19 +1273,34 @@ static int __maybe_unused lvds_runtime_resume(struct device *dev)
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = regulator_enable(lvds->vdda18_supply);
+	if (ret) {
+		DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
+		return ret;
+	}
+
+	ret = regulator_enable(lvds->vdd_supply);
+	if (ret) {
+		regulator_disable(lvds->vdda18_supply);
+		DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
+		return ret;
+	}
+
 	ret = clk_prepare_enable(lvds->pclk);
-	if (ret)
-		goto err;
+	if (ret) {
+		regulator_disable(lvds->vdd_supply);
+		regulator_disable(lvds->vdda18_supply);
+		DRM_ERROR("Failed to enable pclk: %d\n", ret);
+		return ret;
+	}
 
 	ret = clk_prepare_enable(lvds->pllref_clk);
-	if (ret)
-		goto err_pclk;
-
-	return 0;
-err_pclk:
-	clk_disable_unprepare(lvds->pclk);
-err:
-	DRM_ERROR("Failed to resume lvds: %d\n", ret);
+	if (ret) {
+		clk_disable_unprepare(lvds->pclk);
+		regulator_disable(lvds->vdd_supply);
+		regulator_disable(lvds->vdda18_supply);
+		DRM_ERROR("Failed to enable pllref_clk: %d\n", ret);
+	}
 
 	return ret;
 }
-- 
2.39.2

