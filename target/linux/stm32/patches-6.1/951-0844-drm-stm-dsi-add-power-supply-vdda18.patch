From 68043ffc038c044d4b4001853ef9475cc4608041 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Wed, 18 Oct 2023 09:01:38 +0200
Subject: [PATCH 0844/1141] drm/stm: dsi: add power supply vdda18

This patch enables power supplies vdda18.

Change-Id: Ia665669be08913a9e43f5601c1e14cbad43bfebe
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/334560
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/gpu/drm/stm/dw_mipi_dsi-stm.c | 36 +++++++++++++++++++++++----
 1 file changed, 31 insertions(+), 5 deletions(-)

--- a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
+++ b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
@@ -142,6 +142,7 @@ struct dw_mipi_dsi_stm {
 	int lane_min_kbps;
 	int lane_max_kbps;
 	struct regulator *vdd_supply;
+	struct regulator *vdda18_supply;
 	struct dw_mipi_dsi_plat_data pdata;
 	unsigned int lane_mbps;
 	u32 format;
@@ -1100,7 +1101,20 @@ static int dw_mipi_dsi_stm_probe(struct
 
 	ret = regulator_enable(dsi->vdd_supply);
 	if (ret) {
-		DRM_ERROR("Failed to enable regulator: %d\n", ret);
+		DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
+		return ret;
+	}
+
+	dsi->vdda18_supply = devm_regulator_get(dev, "vdda18");
+	if (IS_ERR(dsi->vdda18_supply)) {
+		ret = PTR_ERR(dsi->vdda18_supply);
+		dev_err_probe(dev, ret, "Failed to request regulator\n");
+		goto err_clk_get;
+	}
+
+	ret = regulator_enable(dsi->vdda18_supply);
+	if (ret) {
+		DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
 		return ret;
 	}
 
@@ -1108,20 +1122,20 @@ static int dw_mipi_dsi_stm_probe(struct
 	if (IS_ERR(dsi->pllref_clk)) {
 		ret = PTR_ERR(dsi->pllref_clk);
 		dev_err_probe(dev, ret, "Unable to get pll reference clock\n");
-		goto err_clk_get;
+		goto err_regu_enable;
 	}
 
 	dsi->pclk = devm_clk_get(dev, "pclk");
 	if (IS_ERR(dsi->pclk)) {
 		ret = PTR_ERR(dsi->pclk);
 		DRM_ERROR("Unable to get peripheral clock: %d\n", ret);
-		goto err_clk_get;
+		goto err_regu_enable;
 	}
 
 	ret = clk_prepare_enable(dsi->pclk);
 	if (ret) {
 		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
-		goto err_clk_get;
+		goto err_regu_enable;
 	}
 
 	dsi->hw_version = dsi_read(dsi, DSI_VERSION) & VERSION;
@@ -1196,6 +1210,8 @@ static int dw_mipi_dsi_stm_probe(struct
 
 err_dsi_probe:
 	clk_disable_unprepare(dsi->pclk);
+err_regu_enable:
+	regulator_disable(dsi->vdda18_supply);
 err_clk_get:
 	regulator_disable(dsi->vdd_supply);
 
@@ -1221,6 +1237,7 @@ static int __maybe_unused dw_mipi_dsi_st
 	clk_disable_unprepare(dsi->pllref_clk);
 	clk_disable_unprepare(dsi->pclk);
 	regulator_disable(dsi->vdd_supply);
+	regulator_disable(dsi->vdda18_supply);
 
 	return 0;
 }
@@ -1232,15 +1249,23 @@ static int __maybe_unused dw_mipi_dsi_st
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = regulator_enable(dsi->vdda18_supply);
+	if (ret) {
+		DRM_ERROR("Failed to enable regulator vdda18: %d\n", ret);
+		return ret;
+	}
+
 	ret = regulator_enable(dsi->vdd_supply);
 	if (ret) {
-		DRM_ERROR("Failed to enable regulator: %d\n", ret);
+		regulator_disable(dsi->vdda18_supply);
+		DRM_ERROR("Failed to enable regulator vdd: %d\n", ret);
 		return ret;
 	}
 
 	ret = clk_prepare_enable(dsi->pclk);
 	if (ret) {
 		regulator_disable(dsi->vdd_supply);
+		regulator_disable(dsi->vdda18_supply);
 		DRM_ERROR("Failed to enable pclk: %d\n", ret);
 		return ret;
 	}
@@ -1249,6 +1274,7 @@ static int __maybe_unused dw_mipi_dsi_st
 	if (ret) {
 		clk_disable_unprepare(dsi->pclk);
 		regulator_disable(dsi->vdd_supply);
+		regulator_disable(dsi->vdda18_supply);
 		DRM_ERROR("Failed to enable pllref_clk: %d\n", ret);
 		return ret;
 	}
