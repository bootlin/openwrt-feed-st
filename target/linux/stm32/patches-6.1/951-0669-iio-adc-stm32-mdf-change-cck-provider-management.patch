From 33a980e035d13f479133910285220c442c44c040 Mon Sep 17 00:00:00 2001
From: Olivier Moysan <olivier.moysan@foss.st.com>
Date: Thu, 19 Oct 2023 11:33:14 +0200
Subject: [PATCH 0669/1141] iio: adc: stm32-mdf: change cck provider management

Use clk-regmap to manage cck clocks provider.

Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Signed-off-by: Olivier Moysan <olivier.moysan@foss.st.com>
Change-Id: I92a5819a80063d914f79aeb67080b7932121355e
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/334773
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/iio/adc/stm32-mdf-core.c   | 282 ++++++++++-------------------
 drivers/iio/adc/stm32-mdf-serial.c |   4 +-
 drivers/iio/adc/stm32-mdf.h        |   3 +
 3 files changed, 102 insertions(+), 187 deletions(-)

diff --git a/drivers/iio/adc/stm32-mdf-core.c b/drivers/iio/adc/stm32-mdf-core.c
index 2efb636e6d61..8918ac7730dc 100644
--- a/drivers/iio/adc/stm32-mdf-core.c
+++ b/drivers/iio/adc/stm32-mdf-core.c
@@ -8,6 +8,7 @@
 
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
+#include <linux/clk-regmap.h>
 #include <linux/device.h>
 #include <linux/gcd.h>
 #include <linux/list.h>
@@ -68,54 +69,30 @@ static const struct regmap_config stm32_mdf_regmap_cfg = {
 	.fast_io = true,
 };
 
-/*
- * struct stm32_mdf_sck_prov - STM32 MDF serial interface clock provider data
- * @hw: pointer to hw clock data
- * @data: pointer to mdf private data
- * @div: serial clock divider data
- * @gate: serial clock gating data
- * @id: serial clock provider id (0 for cck0 & 1 for cck1)
- */
-struct stm32_mdf_sck_prov {
-	struct clk_hw *hw;
-	struct stm32_mdf_priv *data;
-	struct clk_divider div;
-	struct clk_gate gate;
-	unsigned int id;
-};
-
 /*
  * struct stm32_mdf_priv - STM32 MDF private data
  * @mdf: mdf common data
  * @pdev: platform device pointer
  * @regmap: regmap for register read/write
- * @prov: serial interface clock providers array
  * @kclk: mdf kernel clock handle
  * @base: mdf registers base cpu address
  * @phys_base: mdf registers base physical address
  * @n_active_ch: number of active channels
  * @lock: lock to manage clock provider
  * @cck_freq: output cck clocks frequencies array
- * @procdiv: processing divider (common divider)
- * @cckdiv: cck divider (cck0 & cck1 common divider)
  */
 struct stm32_mdf_priv {
 	struct stm32_mdf mdf;
 	struct platform_device *pdev;
 	struct regmap *regmap;
-	struct stm32_mdf_sck_prov prov[2];
 	struct clk *kclk;
 	void __iomem *base;
 	phys_addr_t phys_base;
 	atomic_t n_active_ch;
 	spinlock_t lock; /* Manage clock provider race conditions */
 	unsigned long cck_freq;
-	u32 procdiv;
-	u32 cckdiv;
 };
 
-#define gate_to_sck_prov(p) container_of(p, struct stm32_mdf_sck_prov, gate)
-#define div_to_sck_prov(p) container_of(p, struct stm32_mdf_sck_prov, div)
 #define STM32_MDF_MAX_CCK 2
 
 static inline struct stm32_mdf_priv *to_stm32_mdf_priv(struct stm32_mdf *mdf)
@@ -188,150 +165,90 @@ int stm32_mdf_stop_mdf(struct stm32_mdf *mdf)
 }
 EXPORT_SYMBOL_GPL(stm32_mdf_stop_mdf);
 
-static int stm32_mdf_clk_gate_endisable(struct clk_hw *hw, int enable)
-{
-	struct clk_gate *gate = to_clk_gate(hw);
-	struct stm32_mdf_sck_prov *prov = gate_to_sck_prov(gate);
-	struct stm32_mdf_priv *priv = prov->data;
-	u32 bit = enable ? gate->bit_idx : 0;
-
-	return regmap_update_bits(priv->regmap, gate->reg - priv->base, gate->bit_idx, bit);
-}
-
-static int stm32_mdf_cck_gate_enable(struct clk_hw *hw)
-{
-	stm32_mdf_clk_gate_endisable(hw, 1);
-
-	return 0;
-};
-
-static void stm32_mdf_cck_gate_disable(struct clk_hw *hw)
+static int stm32_mdf_cck_divider_set_rate(struct platform_device *pdev,
+					  struct stm32_mdf_priv *priv,
+					  unsigned long parent_rate)
 {
-	stm32_mdf_clk_gate_endisable(hw, 0);
-};
+	struct device *dev = &pdev->dev;
+	unsigned long rate = priv->cck_freq;
+	unsigned long ratio, delta, delta_ppm;
+	unsigned int cckdiv, procdiv;
 
-static int stm32_mdf_cck_gate_is_enabled(struct clk_hw *hw)
-{
-	struct clk_gate *gate = to_clk_gate(hw);
-	struct stm32_mdf_sck_prov *prov = gate_to_sck_prov(gate);
-	struct stm32_mdf_priv *priv = prov->data;
-	u32 val;
+	ratio = DIV_ROUND_CLOSEST(parent_rate, rate);
+	if (!ratio) {
+		dev_err(dev, "CCK frequency above kernel frequency\n");
+		return -EINVAL;
+	}
 
-	regmap_read(priv->regmap, gate->reg - priv->base, &val);
+	delta = abs(parent_rate - (ratio * rate));
 
-	return (val & gate->bit_idx) ? 1 : 0;
-};
+	delta_ppm = (1000000 * delta) / parent_rate;
+	if (delta_ppm > 1000)
+		/* Warn if frequency deviation is higher than 1000 ppm */
+		dev_warn(dev, "CCK clock deviation [%lu] ppm: [%lu] vs [%lu] Hz\n",
+			 delta_ppm, parent_rate / ratio, rate);
+	else if (delta)
+		dev_dbg(dev, "CCK clock frequency not accurate: [%lu] ppm deviation\n",
+			delta_ppm);
 
-static unsigned long stm32_mdf_cck_divider_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
-{
-	struct clk_divider *div = to_clk_divider(hw);
-	struct stm32_mdf_sck_prov *prov = div_to_sck_prov(div);
-	struct stm32_mdf_priv *priv = prov->data;
-	unsigned int ratio;
-	u32 cckdiv, procdiv;
-
-	regmap_read(priv->regmap, MDF_CKGCR_REG, &cckdiv);
-	regmap_read(priv->regmap, MDF_CKGCR_REG, &procdiv);
-	ratio = (FIELD_GET(MDF_CKG_PROCDIV_MASK, procdiv) + 1) *
-		(FIELD_GET(MDF_CKG_CCKDIV_MASK, cckdiv) + 1);
+	/*
+	 * The total divider ratio must be split between proc divider and
+	 * cck divider. Try to maximize cck divider first, to help fulfilling
+	 * frequency ratio requirements between fproc and fcck.
+	 */
+	cckdiv = gcd(ratio, MDF_CCKDIV_MAX);
+	procdiv = ratio / cckdiv;
 
-	return DIV_ROUND_CLOSEST_ULL((u64)parent_rate, ratio);
-};
+	if (procdiv > MDF_PROCDIV_MAX) {
+		dev_err(dev, "Proc divider out of range: %d > %d\n", procdiv, MDF_PROCDIV_MAX);
+		return -EINVAL;
+	}
 
-static int stm32_mdf_cck_divider_set_rate(struct clk_hw *hw, unsigned long rate,
-					  unsigned long parent_rate)
-{
-	struct clk_divider *div = to_clk_divider(hw);
-	struct stm32_mdf_sck_prov *prov = div_to_sck_prov(div);
-	struct stm32_mdf_priv *priv = prov->data;
+	priv->mdf.fproc = DIV_ROUND_CLOSEST(parent_rate, procdiv);
 
 	/* Configure CKGCR register */
 	return regmap_update_bits(priv->regmap, MDF_CKGCR_REG,
 				  MDF_CKG_CCKDIV_MASK | MDF_CKG_PROCDIV_MASK,
-				  MDF_CKG_CCKDIV(priv->cckdiv - 1) |
-				  MDF_CKG_PROCDIV(priv->procdiv - 1));
-};
+				  MDF_CKG_CCKDIV(cckdiv - 1) |
+				  MDF_CKG_PROCDIV(procdiv - 1));
+}
 
-static long stm32_mdf_cck_divider_round_rate(struct clk_hw *hw, unsigned long rate,
-					     unsigned long *parent_rate)
+static unsigned long stm32_mdf_cck_divider_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
 {
-	struct clk_divider *div = to_clk_divider(hw);
-	struct stm32_mdf_sck_prov *prov = div_to_sck_prov(div);
-	struct stm32_mdf_priv *priv = prov->data;
-	struct device *dev = &priv->pdev->dev;
-	unsigned long ratio, delta, delta_ppm;
-	u32 cckdiv, procdiv;
+	struct clk_regmap *clk = to_clk_regmap(hw);
+	unsigned int val;
+	unsigned int ratio;
 	int ret;
 
-	/* Protect CCK0/1 shared dividers against concurrent accesses */
-	spin_lock(&priv->lock);
-
-	/*
-	 * Compute procdiv / cckdiv if not already set.
-	 * Done only once as CCK0 and CCK1 share the same frequency.
-	 */
-	if (!priv->procdiv || !priv->cckdiv) {
-		ratio = DIV_ROUND_CLOSEST(*parent_rate, rate);
-		if (!ratio) {
-			dev_err(dev, "CCK frequency above kernel frequency\n");
-			ret = -EINVAL;
-			goto err;
-		}
-
-		delta = abs(*parent_rate - (ratio * rate));
-
-		delta_ppm = (1000000 * delta) / *parent_rate;
-		if (delta_ppm > 1000)
-			/* Warn if frequency deviation is higher than 1000 ppm */
-			dev_warn(dev, "CCK clock deviation [%lu] ppm: [%lu] vs [%lu] Hz\n",
-				 delta_ppm, *parent_rate / ratio, rate);
-		else if (delta)
-			dev_dbg(dev, "CCK clock frequency not accurate: [%lu] ppm deviation\n",
-				delta_ppm);
-
-		/*
-		 * The total divider ratio must be split between proc divider and
-		 * cck divider. Try to maximize cck divider first, to help fulfilling
-		 * frequency ratio requirements between fproc and fcck.
-		 */
-		cckdiv = gcd(ratio, MDF_CCKDIV_MAX);
-		procdiv = ratio / cckdiv;
-
-		if (procdiv > MDF_PROCDIV_MAX) {
-			dev_err(dev, "Proc divider out of range: %d > %d\n",
-				procdiv, MDF_PROCDIV_MAX);
-			ret = -EINVAL;
-			goto err;
-		}
-
-		priv->procdiv = procdiv;
-		priv->cckdiv = cckdiv;
-
-		priv->mdf.fproc = DIV_ROUND_CLOSEST(*parent_rate, procdiv);
-	} else {
-		ratio = priv->procdiv * priv->cckdiv;
-	}
-
-	spin_unlock(&priv->lock);
+	ret = regmap_read(clk->map, MDF_CKGCR_REG, &val);
+	if (ret)
+		/* Gives a hint that something is wrong */
+		return 0;
 
-	return DIV_ROUND_CLOSEST_ULL((u64)*parent_rate, ratio);
+	ratio = (FIELD_GET(MDF_CKG_PROCDIV_MASK, val) + 1) *
+		(FIELD_GET(MDF_CKG_CCKDIV_MASK, val) + 1);
 
-err:
-	spin_unlock(&priv->lock);
+	return DIV_ROUND_CLOSEST_ULL((u64)parent_rate, ratio);
+};
 
-	return ret;
+static const struct clk_ops clk_cck_ops = {
+	.recalc_rate = stm32_mdf_cck_divider_recalc_rate,
 };
 
-static const struct clk_ops cck_gate_ops = {
-	.enable = stm32_mdf_cck_gate_enable,
-	.disable = stm32_mdf_cck_gate_disable,
-	.is_enabled = stm32_mdf_cck_gate_is_enabled,
+static struct clk_regmap clk_cck;
+
+static struct clk_regmap clk_cck0 = {
+	.data = &(struct clk_regmap_gate_data){
+		.offset = MDF_CKGCR_REG,
+		.bit_idx = 1,
+	},
 };
 
-const struct clk_ops cck_divider_ops = {
-	.recalc_rate = stm32_mdf_cck_divider_recalc_rate,
-	.round_rate = stm32_mdf_cck_divider_round_rate,
-	.set_rate = stm32_mdf_cck_divider_set_rate,
+static struct clk_regmap clk_cck1 = {
+	.data = &(struct clk_regmap_gate_data){
+		.offset = MDF_CKGCR_REG,
+		.bit_idx = 2,
+	},
 };
 
 static int stm32_mdf_core_register_clock_provider(struct platform_device *pdev,
@@ -340,14 +257,25 @@ static int stm32_mdf_core_register_clock_provider(struct platform_device *pdev,
 	struct device_node *node = pdev->dev.of_node;
 	struct device *dev = &pdev->dev;
 	struct clk_hw_onecell_data *clk_data;
-	struct clk_hw *hw;
 	struct property *prop;
-	struct clk_parent_data pdata = { .name = "ker_ck" };
-	struct clk_gate *gate;
-	struct clk_divider *div;
+	struct clk_regmap *clk;
 	const char *clk_name;
 	u32 ckgcr = 0;
 	int index = 0, ret, clk_id;
+	struct clk_hw *mdf_hw[] = { &clk_cck0.hw, &clk_cck1.hw };
+
+	clk_cck.hw.init = CLK_HW_INIT_FW_NAME("clk_cck", "ker_ck", &clk_cck_ops, 0);
+	clk_cck0.hw.init = CLK_HW_INIT_HW(STM32_MDF_CCK0, &clk_cck.hw, &clk_regmap_gate_ops, 0);
+	clk_cck1.hw.init = CLK_HW_INIT_HW(STM32_MDF_CCK1, &clk_cck.hw, &clk_regmap_gate_ops, 0);
+
+	clk_cck.data = priv;
+
+	clk = to_clk_regmap(&clk_cck.hw);
+	clk->map = priv->regmap;
+
+	ret = devm_clk_hw_register(dev, &clk_cck.hw);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to register clk_cck");
 
 	clk_data = devm_kzalloc(dev, struct_size(clk_data, hws, STM32_MDF_MAX_CCK), GFP_KERNEL);
 	if (!clk_data)
@@ -370,28 +298,15 @@ static int stm32_mdf_core_register_clock_provider(struct platform_device *pdev,
 			return -EINVAL;
 		}
 
-		gate = &priv->prov[index].gate;
-		gate->reg = priv->base + MDF_CKGCR_REG;
-		gate->bit_idx = clk_id ? MDF_CKG_CCK1EN : MDF_CKG_CCK0EN;
+		clk = to_clk_regmap(mdf_hw[clk_id]);
+		clk->map = priv->regmap;
 
-		div = &priv->prov[index].div;
-		div->reg = priv->base + MDF_CKGCR_REG;
-		div->shift = MDF_CKG_CCKDIV_SHIFT;
-		div->width = MDF_CKG_CCKDIV_WIDTH;
-
-		priv->prov[index].data = priv;
-
-		hw = devm_clk_hw_register_composite_pdata(dev, clk_name, &pdata, 1, NULL, NULL,
-							  &priv->prov[index].div.hw,
-							  &cck_divider_ops, &gate->hw,
-							  &cck_gate_ops, 0);
-		if (IS_ERR(hw)) {
-			dev_err(dev, "Failed to register %s clock provider\n", clk_name);
-			return PTR_ERR(hw);
-		}
+		ret = devm_clk_hw_register(dev, mdf_hw[clk_id]);
+		if (ret)
+			return dev_err_probe(dev, ret, "Failed to register %s clock provider",
+					     clk_name);
 
-		priv->prov[index].hw = hw;
-		clk_data->hws[index] = hw;
+		clk_data->hws[index] = mdf_hw[clk_id];
 
 		/* Configure the CCKx clock as output */
 		ckgcr |= clk_id ? MDF_CKG_CCK1DIR : MDF_CKG_CCK0DIR;
@@ -411,7 +326,8 @@ static int stm32_mdf_core_register_clock_provider(struct platform_device *pdev,
 	}
 
 	/* Configure CKGCR register */
-	return regmap_set_bits(priv->regmap, MDF_CKGCR_REG, ckgcr);
+	return regmap_update_bits(priv->regmap, MDF_CKGCR_REG,
+				  MDF_CKG_CCK1DIR | MDF_CKG_CCK0DIR, ckgcr);
 }
 
 static int stm32_mdf_of_cck_get(struct platform_device *pdev, struct stm32_mdf_priv *priv)
@@ -444,37 +360,33 @@ static int stm32_mdf_core_parse_clocks(struct platform_device *pdev, struct stm3
 	struct device *dev = &pdev->dev;
 	struct clk *kclk;
 	int ret;
+	unsigned long kclk_rate;
 
 	kclk = devm_clk_get(dev, "ker_ck");
 	if (IS_ERR(kclk))
 		return dev_err_probe(dev, PTR_ERR(kclk), "Failed to get kernel clock\n");
+
 	priv->kclk = kclk;
 
+	kclk_rate = clk_get_rate(kclk);
+
 	/* CCK0 and CCK1 clocks are optional. Used only in SPI master modes. */
 	ret = stm32_mdf_of_cck_get(pdev, priv);
 	if (ret)
 		return ret;
 
-	ret = stm32_mdf_core_register_clock_provider(pdev, priv);
-	if (ret)
-		return ret;
-
 	if (priv->cck_freq) {
-		/* Set CCK0 frequency if CCK0 provider exists */
-		ret = clk_set_rate(priv->prov[0].div.hw.clk, priv->cck_freq);
+		ret = stm32_mdf_cck_divider_set_rate(pdev, priv, kclk_rate);
 		if (ret) {
-			dev_err(dev, "Failed to set cck0 rate: %d\n", ret);
-			return ret;
-		}
-
-		/* Set CCK1 frequency if CCK1 provider exists */
-		ret = clk_set_rate(priv->prov[1].div.hw.clk, priv->cck_freq);
-		if (ret) {
-			dev_err(dev, "Failed to set cck1 rate: %d\n", ret);
+			dev_err(dev, "Failed to set cck rate: %d\n", ret);
 			return ret;
 		}
 	}
 
+	ret = stm32_mdf_core_register_clock_provider(pdev, priv);
+	if (ret)
+		return ret;
+
 	return 0;
 }
 
diff --git a/drivers/iio/adc/stm32-mdf-serial.c b/drivers/iio/adc/stm32-mdf-serial.c
index 521c4a16d34f..027494b11859 100644
--- a/drivers/iio/adc/stm32-mdf-serial.c
+++ b/drivers/iio/adc/stm32-mdf-serial.c
@@ -96,9 +96,9 @@ static int stm32_mdf_sitf_get_clk(struct device *dev, struct stm32_mdf_sitf *sit
 	sitf->sck = sck;
 
 	if (sitf->sck) {
-		if (!strncmp(__clk_get_name(sck), "cck0", 4))
+		if (!strncmp(__clk_get_name(sck), STM32_MDF_CCK0, sizeof(STM32_MDF_CCK0)))
 			sitf->scksrc = STM32_MDF_SCKSRC_CCK0;
-		else if (!strncmp(__clk_get_name(sck), "cck1", 4))
+		else if (!strncmp(__clk_get_name(sck), STM32_MDF_CCK1, sizeof(STM32_MDF_CCK1)))
 			sitf->scksrc = STM32_MDF_SCKSRC_CCK1;
 		else
 			sitf->scksrc = STM32_MDF_SCKSRC_CLK;
diff --git a/drivers/iio/adc/stm32-mdf.h b/drivers/iio/adc/stm32-mdf.h
index ab59286a3dbc..6405d8a194d1 100644
--- a/drivers/iio/adc/stm32-mdf.h
+++ b/drivers/iio/adc/stm32-mdf.h
@@ -240,6 +240,9 @@
 
 #define STM32MP25_MDF_IPIDR_NUMBER 0x00110032
 
+#define STM32_MDF_CCK0 "clk_cck0"
+#define STM32_MDF_CCK1 "clk_cck1"
+
 enum stm32_sitf_mode {
 	STM32_MDF_MODE_LF_SPI,
 	STM32_MDF_MODE_SPI,
-- 
2.39.2

