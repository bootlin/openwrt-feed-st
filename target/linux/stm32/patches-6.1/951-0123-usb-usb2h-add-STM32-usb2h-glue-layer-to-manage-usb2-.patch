From 1be05c7134281bc07f4e271589058ed419f18543 Mon Sep 17 00:00:00 2001
From: Pankaj Dev <pankaj.dev@st.com>
Date: Wed, 12 Jan 2022 15:12:22 +0530
Subject: [PATCH 0123/1141] usb: usb2h: add STM32 usb2h glue layer to manage
 usb2 host ctrl

This patch adds the STM32 family glue logic to manage the usb2 host ctrl
Currently Only supported for STM32MP25, glue logic contains :
1. Setting polarity of VBUSEN (O)
2. Setting polarity of OVRCUR (I)

Signed-off-by: Pankaj Dev <pankaj.dev@st.com>
Change-Id: Ia80cef8757a82fd31a84dfc810b7aa308f3d3157
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/305595
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
---
 drivers/usb/host/Kconfig      |  13 +++
 drivers/usb/host/Makefile     |   1 +
 drivers/usb/host/usbh-stm32.c | 183 ++++++++++++++++++++++++++++++++++
 3 files changed, 197 insertions(+)
 create mode 100644 drivers/usb/host/usbh-stm32.c

diff --git a/drivers/usb/host/Kconfig b/drivers/usb/host/Kconfig
index 247568bc17a2..10a53cb5e2b2 100644
--- a/drivers/usb/host/Kconfig
+++ b/drivers/usb/host/Kconfig
@@ -126,6 +126,19 @@ config USB_BRCMSTB
 	  Disabling this will keep the controllers and corresponding
 	  PHYs powered down.
 
+config USB_STM32_USBH
+	tristate "STM32 USB2 Host Glue support"
+	depends on ARCH_STM32 || COMPILE_TEST
+	select USB_OHCI_HCD_PLATFORM if USB_OHCI_HCD
+	select USB_EHCI_HCD_PLATFORM if USB_EHCI_HCD
+	help
+	  Enables support for USB2 Host controller on STM32MP25, configures
+	  glue logic around EHCI and OHCI host controller handled via
+          ehci-platform.o and ohci-platform.o
+
+	  Disabling this will keep the controllers and corresponding
+	  PHYs powered down.
+
 config USB_EHCI_HCD
 	tristate "EHCI HCD (USB 2.0) support"
 	depends on HAS_DMA && HAS_IOMEM
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index 2c8a61be7e46..5afa021d422d 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -87,3 +87,4 @@ obj-$(CONFIG_USB_HCD_SSB)	+= ssb-hcd.o
 obj-$(CONFIG_USB_FOTG210_HCD)	+= fotg210-hcd.o
 obj-$(CONFIG_USB_MAX3421_HCD)	+= max3421-hcd.o
 obj-$(CONFIG_USB_XEN_HCD)	+= xen-hcd.o
+obj-$(CONFIG_USB_STM32_USBH)	+= usbh-stm32.o
diff --git a/drivers/usb/host/usbh-stm32.c b/drivers/usb/host/usbh-stm32.c
new file mode 100644
index 000000000000..75fa1b06a984
--- /dev/null
+++ b/drivers/usb/host/usbh-stm32.c
@@ -0,0 +1,183 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * STM32 USB2 EHCI/OHCI (USBH) controller glue driver
+ *
+ * Copyright (C) 2022 STMicroelectronics â€“ All Rights Reserved
+ *
+ * Author: Pankaj Dev <pankaj.dev@st.com>
+ */
+
+#include <linux/usb.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/regmap.h>
+
+#define SYSCFG_USBHCR_OVRCUR_POLARITY_MASK      BIT(0)
+#define SYSCFG_USBHCR_VBUSEN_POLARITY_MASK      BIT(1)
+
+/**
+ * struct stm32_usbh - usbh-stm32 driver private structure
+ * @dev:			device pointer
+ * @regmap:			regmap pointer for getting syscfg
+ * @syscfg_usbhcr_reg_off:	usbhcr syscfg control offset
+ * @vbusen_polarity_low:	vbusen signal polarity
+ * @ovrcur_polarity_low:	ovrcur signal polarity
+ * @irq_wakeup:			wakeup irq
+ */
+struct stm32_usbh {
+	struct device *dev;
+	struct regmap *regmap;
+	int syscfg_usbhcr_reg_off;
+	bool vbusen_polarity_low;
+	bool ovrcur_polarity_low;
+	int irq_wakeup;
+};
+
+/**
+ * stm32_usbh_init: init the controller via glue logic
+ * @usbh_data: driver private structure
+ */
+static int stm32_usbh_init(struct stm32_usbh *usbh_data)
+{
+	return regmap_update_bits(usbh_data->regmap, usbh_data->syscfg_usbhcr_reg_off,
+				  SYSCFG_USBHCR_OVRCUR_POLARITY_MASK |
+				  SYSCFG_USBHCR_VBUSEN_POLARITY_MASK,
+				  FIELD_PREP(SYSCFG_USBHCR_OVRCUR_POLARITY_MASK,
+					     usbh_data->ovrcur_polarity_low) |
+				  FIELD_PREP(SYSCFG_USBHCR_VBUSEN_POLARITY_MASK,
+					     usbh_data->vbusen_polarity_low));
+}
+
+static irqreturn_t stm32_usbh_irq_wakeup_handler(int irq, void *dev_id)
+{
+	return IRQ_HANDLED;
+}
+
+static int stm32_usbh_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *node = dev->of_node;
+	struct regmap *regmap;
+	struct stm32_usbh *usbh_data;
+	int ret, irq;
+
+	if (usb_disabled())
+		return -ENODEV;
+
+	usbh_data = devm_kzalloc(dev, sizeof(*usbh_data), GFP_KERNEL);
+	if (!usbh_data)
+		return -ENOMEM;
+
+	regmap = syscon_regmap_lookup_by_phandle(node, "st,syscfg");
+	if (IS_ERR(regmap))
+		return dev_err_probe(&pdev->dev, PTR_ERR(regmap), "no st,syscfg node found\n");
+
+	ret = of_property_read_u32_index(node, "st,syscfg", 1, &usbh_data->syscfg_usbhcr_reg_off);
+	if (ret)
+		return dev_err_probe(&pdev->dev, ret, "can't get usbhcr offset\n");
+
+	dev_vdbg(&pdev->dev, "syscfg-usbhcr-reg offset 0x%x\n", usbh_data->syscfg_usbhcr_reg_off);
+
+	usbh_data->dev = dev;
+	usbh_data->regmap = regmap;
+
+	if (device_property_read_bool(dev, "st,vbusen-active-low"))
+		usbh_data->vbusen_polarity_low = true;
+	if (device_property_read_bool(dev, "st,ovrcur-active-low"))
+		usbh_data->ovrcur_polarity_low = true;
+
+	/* ST USBH glue logic init */
+	ret = stm32_usbh_init(usbh_data);
+	if (ret)
+		return dev_err_probe(&pdev->dev, ret, "err setting syscfg_usbhcr_reg\n");
+
+	if (device_property_read_bool(dev, "wakeup-source")) {
+		irq = platform_get_irq(pdev, 0);
+		if (irq < 0)
+			return dev_err_probe(dev, irq, "failed to get IRQ\n");
+		usbh_data->irq_wakeup = irq;
+
+		ret = devm_request_threaded_irq(dev, usbh_data->irq_wakeup, NULL,
+						stm32_usbh_irq_wakeup_handler, IRQF_ONESHOT,
+						NULL, NULL);
+		if (ret)
+			return dev_err_probe(dev, ret, "unable to request wake IRQ %d\n",
+					     usbh_data->irq_wakeup);
+
+		device_set_wakeup_capable(dev, true);
+	}
+
+	/* Populate the ehci and ohci child nodes */
+	ret = devm_of_platform_populate(dev);
+	if (ret)
+		return dev_err_probe(&pdev->dev, ret, "failed to add ehci/ohci devices\n");
+
+	platform_set_drvdata(pdev, usbh_data);
+
+	return 0;
+}
+
+static int __maybe_unused stm32_usbh_suspend(struct device *dev)
+{
+	struct stm32_usbh *usbh_data = dev_get_drvdata(dev);
+
+	if (device_may_wakeup(dev) || device_wakeup_path(dev)) {
+		enable_irq_wake(usbh_data->irq_wakeup);
+		return 0;
+	}
+
+	return pinctrl_pm_select_sleep_state(dev);
+}
+
+static int __maybe_unused stm32_usbh_resume(struct device *dev)
+{
+	struct stm32_usbh *usbh_data = dev_get_drvdata(dev);
+	int err;
+
+	if (device_may_wakeup(dev) || device_wakeup_path(dev)) {
+		disable_irq_wake(usbh_data->irq_wakeup);
+		return 0;
+	}
+
+	err = pinctrl_pm_select_default_state(dev);
+	if (err) {
+		dev_err(dev, "pinctrl select during resume error:%d\n", err);
+		return err;
+	}
+
+	/* ST USBH glue logic init */
+	err = stm32_usbh_init(usbh_data);
+	if (err) {
+		dev_err(dev, "err setting syscfg_usbhcr_reg (%d)\n", err);
+		return err;
+	}
+
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(stm32_usbh_pm_ops, stm32_usbh_suspend, stm32_usbh_resume);
+
+static const struct of_device_id stm32_usbh_match[] = {
+	{ .compatible = "st,stm32mp25-usbh" },
+	{ /* sentinel */ },
+};
+
+MODULE_DEVICE_TABLE(of, stm32_usbh_match);
+
+static struct platform_driver stm32_usbh_driver = {
+	.probe = stm32_usbh_probe,
+	.driver = {
+		.name = "stm32-usbh",
+		.of_match_table = stm32_usbh_match,
+		.pm = &stm32_usbh_pm_ops,
+	},
+};
+
+module_platform_driver(stm32_usbh_driver);
+
+MODULE_AUTHOR("Pankaj Dev <pankaj.dev@st.com>");
+MODULE_DESCRIPTION("STMicroelectronics STM32 EHCI/OHCI Specific Glue layer");
+MODULE_LICENSE("GPL v2");
-- 
2.39.2

