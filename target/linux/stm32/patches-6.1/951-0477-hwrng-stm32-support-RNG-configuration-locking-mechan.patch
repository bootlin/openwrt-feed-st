From a1eb518e71c269e65fcd56fbccf05dcb518b582d Mon Sep 17 00:00:00 2001
From: Gatien Chevallier <gatien.chevallier@foss.st.com>
Date: Fri, 1 Sep 2023 15:35:36 +0200
Subject: [PATCH 0477/1141] hwrng: stm32 - support RNG configuration locking
 mechanism

If "st,rng-lock-conf" DT binding property is set for a stm32-rng node,
the RNG configuration will be locked until next hardware block reset
or platform reset.

Signed-off-by: Gatien Chevallier <gatien.chevallier@foss.st.com>
Change-Id: Ib671a91eed2a2aa902bc9c25d20f212ef760061b
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/321681
Reviewed-by: Yann GAUTIER <yann.gautier@foss.st.com>
Tested-by: Yann GAUTIER <yann.gautier@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Yann GAUTIER <yann.gautier@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/char/hw_random/stm32-rng.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

--- a/drivers/char/hw_random/stm32-rng.c
+++ b/drivers/char/hw_random/stm32-rng.c
@@ -52,6 +52,7 @@ struct stm32_rng_private {
 	const struct stm32_rng_data *data;
 	u32 pm_cr;
 	bool ced;
+	bool lock_conf;
 };
 
 /*
@@ -274,7 +275,9 @@ static int stm32_rng_init(struct hwrng *
 		       (clock_div << RNG_CR_CLKDIV_SHIFT);
 		writel_relaxed(reg, priv->base + RNG_CR);
 		reg &= ~RNG_CR_CONDRST;
-		reg |= RNG_CR_CONFLOCK;
+		if (priv->lock_conf)
+			reg |= RNG_CR_CONFLOCK;
+
 		writel_relaxed(reg, priv->base + RNG_CR);
 		err = readl_relaxed_poll_timeout_atomic(priv->base + RNG_CR, reg,
 							(!(reg & RNG_CR_CONDRST)),
@@ -416,6 +419,7 @@ static int stm32_rng_probe(struct platfo
 	}
 
 	priv->ced = of_property_read_bool(np, "clock-error-detect");
+	priv->lock_conf = of_property_read_bool(np, "st,rng-lock-conf");
 
 	match = of_match_device(of_match_ptr(stm32_rng_match), dev);
 	if (!match) {
