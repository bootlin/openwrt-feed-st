From 5e4b45c5894421ddd165edb22d0696fcf2528f3e Mon Sep 17 00:00:00 2001
From: Erwan Le Ray <erwan.leray@foss.st.com>
Date: Wed, 15 Apr 2020 10:30:25 +0200
Subject: [PATCH 110/529] serial: stm32: rework config_reg_rs485

Rework config_reg_rs485 function to simplify code reading and improve
code quality.

Signed-off-by: Erwan Le Ray <erwan.leray@foss.st.com>
Change-Id: I3a790dbca611d2f25f2eba076477bd2c3be475b8
---
 drivers/tty/serial/stm32-usart.c | 56 +++++++++++++++++++-------------
 1 file changed, 34 insertions(+), 22 deletions(-)

--- a/drivers/tty/serial/stm32-usart.c
+++ b/drivers/tty/serial/stm32-usart.c
@@ -178,13 +178,37 @@ static void stm32_usart_rs485_rts_disabl
 	}
 }
 
+static u32 stm32_usart_config_delay_rs485(u32 *cr1, u32 delay, u32 baud,
+					  bool over8, u32 rs485_deat_dedt_max,
+					  struct serial_rs485 *rs485conf)
+{
+	u64 tmp;
+
+	/*
+	 * Compute (de)assertion time by using the delay (in ns), the baud rate
+	 * (in bits/s) and the oversampling (in 1/8 or 1/16 bit)
+	 */
+	tmp = (u64)delay * (u64)baud * 8ULL;
+
+	/* Handle oversampling 16 */
+	if (!over8)
+		tmp = tmp * 2ULL;
+
+	tmp = DIV_ROUND_CLOSEST_ULL(tmp, NSEC_PER_SEC);
+
+	/* Set delay to max value if result is higher than max value */
+	tmp = tmp > rs485_deat_dedt_max ? rs485_deat_dedt_max : tmp;
+
+	return tmp;
+}
+
 static void stm32_usart_config_reg_rs485(u32 *cr1, u32 *cr3,  u32 baud,
 					 struct serial_rs485 *rs485conf)
 {
-	u64 rs485_deat_dedt;
-	u32 delay_ADE, delay_DDE;
+	u32 delay_ADE, delay_DDE, rs485_deat_dedt;
 	u32 rs485_deat_dedt_max = (USART_CR1_DEAT_MASK >> USART_CR1_DEAT_SHIFT);
 	bool over8;
+	u32 tmp;
 
 	/*
 	 * Assertion and deassertion delays (in ns) are computed by the
@@ -205,28 +229,16 @@ static void stm32_usart_config_reg_rs485
 
 	*cr1 &= ~(USART_CR1_DEDT_MASK | USART_CR1_DEAT_MASK);
 
-	if (over8)
-		rs485_deat_dedt = (u64)delay_ADE * (u64)baud * 8ULL;
-	else
-		rs485_deat_dedt = (u64)delay_ADE * (u64)baud * 16ULL;
-
-	rs485_deat_dedt = DIV_ROUND_CLOSEST_ULL(rs485_deat_dedt, 1000000000);
-	rs485_deat_dedt = rs485_deat_dedt > rs485_deat_dedt_max ?
-			  rs485_deat_dedt_max : rs485_deat_dedt;
-	rs485_deat_dedt = (rs485_deat_dedt << USART_CR1_DEAT_SHIFT) &
-			   USART_CR1_DEAT_MASK;
+	/* Assertion time */
+	tmp = stm32_usart_config_delay_rs485(cr1, delay_ADE, baud, over8,
+					     rs485_deat_dedt_max, rs485conf);
+	rs485_deat_dedt = (tmp << USART_CR1_DEAT_SHIFT) & USART_CR1_DEAT_MASK;
 	*cr1 |= rs485_deat_dedt;
 
-	if (over8)
-		rs485_deat_dedt = (u64)delay_DDE * (u64)baud * 8ULL;
-	else
-		rs485_deat_dedt = (u64)delay_DDE * (u64)baud * 16ULL;
-
-	rs485_deat_dedt = DIV_ROUND_CLOSEST_ULL(rs485_deat_dedt, 1000000000);
-	rs485_deat_dedt = rs485_deat_dedt > rs485_deat_dedt_max ?
-			  rs485_deat_dedt_max : rs485_deat_dedt;
-	rs485_deat_dedt = (rs485_deat_dedt << USART_CR1_DEDT_SHIFT) &
-			   USART_CR1_DEDT_MASK;
+	/* Deassertion time */
+	tmp = stm32_usart_config_delay_rs485(cr1, delay_DDE, baud, over8,
+					     rs485_deat_dedt_max, rs485conf);
+	rs485_deat_dedt = (tmp << USART_CR1_DEDT_SHIFT) & USART_CR1_DEDT_MASK;
 	*cr1 |= rs485_deat_dedt;
 }
 
