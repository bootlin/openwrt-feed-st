From f7b3425a2e67d9fa2f816da40617f813723dc47a Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Wed, 21 Sep 2022 17:45:00 +0200
Subject: [PATCH 0535/1141] dmaengine: stm32-dma3: restore channel semaphore
 status after suspend

Depending on power state reached during suspend, CxSEMCR register could
have been reset, and semaphore released.
Try to take again the semaphore on resume. In case the semaphore can't be
taken, an error log with the channel number and channel user is displayed.

This requires the introduction of 2 new functions: stm32_dma3_pm_suspend(),
where the status of each channel is checked because we can't suspend if a
channel is still running; stm32_dma3_pm_resume(), where channel semaphore
is restored if it was taken before suspend.

Change-Id: I3b9be1f3dcdab5650a5f56b9bf08c239c17d0aec
Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/322597
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/dma/stm32-dma3.c | 83 ++++++++++++++++++++++++++++++++++++----
 1 file changed, 76 insertions(+), 7 deletions(-)

diff --git a/drivers/dma/stm32-dma3.c b/drivers/dma/stm32-dma3.c
index 9d5560540630..e34bbe5cb0e0 100644
--- a/drivers/dma/stm32-dma3.c
+++ b/drivers/dma/stm32-dma3.c
@@ -1623,6 +1623,10 @@ static struct dma_async_tx_descriptor *stm32_dma3_prep_dma_memcpy(struct dma_cha
 	bool prevent_refactor = !!FIELD_GET(STM32_DMA3_DT_NOPACK, chan->dt_config.tr_conf) ||
 				!!FIELD_GET(STM32_DMA3_DT_NOREFACT, chan->dt_config.tr_conf);
 
+	/* Semaphore could be lost during suspend/resume */
+	if (chan->semaphore_mode && !chan->semaphore_taken)
+		return NULL;
+
 	/* TODO: Check if channel is busy ? */
 
 /* TODO: ch12-15 extra block size
@@ -1704,6 +1708,10 @@ static struct dma_async_tx_descriptor *stm32_dma3_prep_slave_sg(struct dma_chan
 				!!FIELD_GET(STM32_DMA3_DT_NOREFACT, chan->dt_config.tr_conf);
 	int ret;
 
+	/* Semaphore could be lost during suspend/resume */
+	if (chan->semaphore_mode && !chan->semaphore_taken)
+		return NULL;
+
 	/* TODO: Check if channel is busy ? */
 
 /* TODO: ch12-15 extra block size
@@ -1811,6 +1819,10 @@ static struct dma_async_tx_descriptor *stm32_dma3_prep_dma_cyclic(struct dma_cha
 	u32 ccr, ctr1, ctr2, ctr3;
 	int ret;
 
+	/* Semaphore could be lost during suspend/resume */
+	if (chan->semaphore_mode && !chan->semaphore_taken)
+		return NULL;
+
 	/* TODO: Check if channel is busy ? */
 
 /* TODO: ch12-15 extra block size
@@ -2401,8 +2413,6 @@ static int __maybe_unused stm32_dma3_runtime_suspend(struct device *dev)
 {
 	struct stm32_dma3_ddata *ddata = dev_get_drvdata(dev);
 
-	//TODO: check if a channel is active
-	//TODO: disable dma ?
 	clk_disable_unprepare(ddata->clk);
 
 	return 0;
@@ -2415,16 +2425,75 @@ static int __maybe_unused stm32_dma3_runtime_resume(struct device *dev)
 
 	ret = clk_prepare_enable(ddata->clk);
 	if (ret)
-		dev_err(dev, "clk_prepare_enable failed: %d\n", ret);
-
-	//TODO: enable dma ?
+		dev_err(dev, "Failed to enable clk: %d\n", ret);
 
 	return ret;
 }
 
+static int stm32_dma3_pm_suspend(struct device *dev)
+{
+	struct stm32_dma3_ddata *ddata = dev_get_drvdata(dev);
+	struct dma_device *dma_dev = &ddata->dma_dev;
+	struct dma_chan *c;
+	int ccr, ret;
+
+	ret = pm_runtime_resume_and_get(dev);
+	if (ret < 0)
+		return ret;
+
+	list_for_each_entry(c, &dma_dev->channels, device_node) {
+		struct stm32_dma3_chan *chan = to_stm32_dma3_chan(c);
+
+		ccr = readl_relaxed(ddata->base + STM32_DMA3_CCR(chan->id));
+		if (ccr & CCR_EN) {
+			dev_warn(dev, "Suspend is prevented: %s still in use by %s\n",
+				 dma_chan_name(c), dev_name(c->slave));
+			pm_runtime_put_sync(dev);
+			return -EBUSY;
+		}
+	}
+
+	pm_runtime_put_sync(dev);
+
+	pm_runtime_force_suspend(dev);
+
+	return 0;
+}
+
+static int stm32_dma3_pm_resume(struct device *dev)
+{
+	struct stm32_dma3_ddata *ddata = dev_get_drvdata(dev);
+	struct dma_device *dma_dev = &ddata->dma_dev;
+	struct dma_chan *c;
+	int ret;
+
+	ret = pm_runtime_force_resume(dev);
+	if (ret < 0)
+		return ret;
+
+	ret = pm_runtime_resume_and_get(dev);
+	if (ret < 0)
+		return ret;
+
+	/*
+	 * Channels semaphore need to be restored in case of registers reset during low power.
+	 * stm32_dma3_get_chan_sem() will prior check the semaphore status.
+	 */
+	list_for_each_entry(c, &dma_dev->channels, device_node) {
+		struct stm32_dma3_chan *chan = to_stm32_dma3_chan(c);
+
+		if (chan->semaphore_mode && chan->semaphore_taken)
+			stm32_dma3_get_chan_sem(chan);
+	}
+
+	pm_runtime_put_sync(dev);
+
+	return 0;
+}
+
 static const struct dev_pm_ops stm32_dma3_pm_ops = {
-	SET_SYSTEM_SLEEP_PM_OPS(pm_runtime_force_suspend,
-				pm_runtime_force_resume)
+	SET_SYSTEM_SLEEP_PM_OPS(stm32_dma3_pm_suspend,
+				stm32_dma3_pm_resume)
 	SET_RUNTIME_PM_OPS(stm32_dma3_runtime_suspend,
 			   stm32_dma3_runtime_resume, NULL)
 };
-- 
2.39.2

