From 43c952617d4052f4ab99d24c8fe8b98836ef41e5 Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Fri, 29 Mar 2024 10:41:08 +0100
Subject: [PATCH 0356/1141] dmaengine: stm32-dma3: remove chan_reserved from
 stm32_dma3_ddata struct

ddata->chan_reserved is only used in probe(), no need to keep it in
driver data structure.

Modify stm32_dma3_check_rif() prototype to return the u32 bit mask of
reserved channel instead of initializing ddata->chan_reserved. Then use
this u32 bit mask in probe(), instead of ddata->chan_reserved.

Change-Id: I9b5f82195f06594584592a9f4ea3fe3015365743
Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/313356
Tested-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
---
 drivers/dma/stm32-dma3.c | 24 +++++++++++++-----------
 1 file changed, 13 insertions(+), 11 deletions(-)

--- a/drivers/dma/stm32-dma3.c
+++ b/drivers/dma/stm32-dma3.c
@@ -2021,12 +2021,12 @@ static struct dma_chan *stm32_dma3_of_xl
 	return c;
 }
 
-static void stm32_dma3_check_rif(struct stm32_dma3_ddata *ddata)
+static u32 stm32_dma3_check_rif(struct stm32_dma3_ddata *ddata)
 {
-	u32 mask = 0, i, ccidcfgr, invalid_cid = 0;
+	u32 chan_reserved, mask = 0, i, ccidcfgr, invalid_cid = 0;
 
 	/* reserve Secure channels */
-	ddata->chan_reserved = readl_relaxed(ddata->base + STM32_DMA3_SECCFGR);
+	chan_reserved = readl_relaxed(ddata->base + STM32_DMA3_SECCFGR);
 
 	of_property_read_u32(ddata->dma_dev.dev->of_node, "dma-channel-mask", &mask);
 
@@ -2042,27 +2042,29 @@ static void stm32_dma3_check_rif(struct
 		if (!(ccidcfgr & CCIDCFGR_CFEN)) { /* !CID-filtered */
 			invalid_cid |= BIT(i);
 			if (!(mask & BIT(i)))
-				ddata->chan_reserved |= BIT(i);
+				chan_reserved |= BIT(i);
 		} else { /* CID-filtered */
 			if (!(ccidcfgr & CCIDCFGR_SEM_EN)) { /* Static CID mode */
 				if (FIELD_GET(CCIDCFGR_SCID, ccidcfgr) != CCIDCFGR_CID1)
-					ddata->chan_reserved |= BIT(i);
+					chan_reserved |= BIT(i);
 			} else { /* Semaphore mode */
 				if (!FIELD_GET(CCIDCFGR_SEM_WLIST_CID1, ccidcfgr))
-					ddata->chan_reserved |= BIT(i);
+					chan_reserved |= BIT(i);
 				ddata->chans[i].semaphore_mode = true;
 			}
 		}
 		dev_dbg(ddata->dma_dev.dev, "chan%d: %s mode, %s\n", i,
 			!(ccidcfgr & CCIDCFGR_CFEN) ? "!CID-filtered" :
 			ddata->chans[i].semaphore_mode ? "Semaphore" : "Static CID",
-			(ddata->chan_reserved & BIT(i)) ? "denied" :
+			(chan_reserved & BIT(i)) ? "denied" :
 			mask & BIT(i) ? "force allowed" : "allowed");
 	}
 
 	if (invalid_cid)
 		dev_warn(ddata->dma_dev.dev, "chan%*pbl have invalid CID configuration\n",
 			 ddata->dma_channels, &invalid_cid);
+
+	return chan_reserved;
 }
 
 static const struct of_device_id stm32_dma3_of_match[] = {
@@ -2079,7 +2081,7 @@ static int stm32_dma3_probe(struct platf
 	struct stm32_dma3_chan *chan;
 	struct dma_device *dma_dev;
 	struct resource *res;
-	u32 i, j, hwcfgr[4], verr;
+	u32 chan_reserved, i, j, hwcfgr[4], verr;
 	int ret;
 
 	ddata = devm_kzalloc(&pdev->dev, sizeof(*ddata), GFP_KERNEL);
@@ -2205,9 +2207,9 @@ static int stm32_dma3_probe(struct platf
 		goto err_clk_disable;
 	}
 
-	stm32_dma3_check_rif(ddata);
+	chan_reserved = stm32_dma3_check_rif(ddata);
 
-	if (ddata->chan_reserved == GENMASK(ddata->dma_channels - 1, 0)) {
+	if (chan_reserved == GENMASK(ddata->dma_channels - 1, 0)) {
 		dev_err(&pdev->dev, "No channel available, abort registration\n");
 		ret = -ENODEV;
 		goto err_clk_disable;
@@ -2245,7 +2247,7 @@ static int stm32_dma3_probe(struct platf
 
 		chan = &ddata->chans[i];
 
-		if (ddata->chan_reserved & BIT(i))
+		if (chan_reserved & BIT(i))
 			continue;
 
 		chan->vchan.desc_free = stm32_dma3_chan_vdesc_free;
