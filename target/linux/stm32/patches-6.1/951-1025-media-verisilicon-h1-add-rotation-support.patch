From f2e9104a438114c7b00b48258c788941c530745b Mon Sep 17 00:00:00 2001
From: Hugues Fruchet <hugues.fruchet@foss.st.com>
Date: Mon, 11 Mar 2024 16:54:10 +0100
Subject: [PATCH 1025/1141] media: verisilicon: h1: add rotation support

Add support of input image rotation before encoding.
Only 90 and 270 degrees rotation are supported.

Signed-off-by: Hugues Fruchet <hugues.fruchet@foss.st.com>
Change-Id: I0ab3992d780da14a2d8399685801f678117d26fb
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/368371
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
Reviewed-by: Hugues FRUCHET <hugues.fruchet@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Tested-by: Hugues FRUCHET <hugues.fruchet@st.com>
---
 drivers/media/platform/verisilicon/hantro.h   |  4 ++
 .../media/platform/verisilicon/hantro_drv.c   | 44 ++++++++++++++++++-
 .../media/platform/verisilicon/hantro_h1.c    | 37 ++++++++++++++++
 .../platform/verisilicon/hantro_h1_jpeg_enc.c | 22 ----------
 .../platform/verisilicon/hantro_h1_regs.h     |  1 +
 5 files changed, 85 insertions(+), 23 deletions(-)

--- a/drivers/media/platform/verisilicon/hantro.h
+++ b/drivers/media/platform/verisilicon/hantro.h
@@ -236,6 +236,7 @@ struct hantro_dev {
  * @ctrl_handler:	Control handler used to register controls.
  * @jpeg_quality:	User-specified JPEG compression quality.
  * @bit_depth:		Bit depth of current frame
+ * @rotation:		Image clockwise rotation in degrees
  *
  * @codec_ops:		Set of operations related to codec mode.
  * @postproc:		Post-processing context.
@@ -264,6 +265,7 @@ struct hantro_ctx {
 	struct v4l2_ctrl_handler ctrl_handler;
 	int jpeg_quality;
 	int bit_depth;
+	int rotation;
 
 	const struct hantro_codec_ops *codec_ops;
 	struct hantro_postproc_ctx postproc;
@@ -502,5 +504,7 @@ int hanto_postproc_enum_framesizes(struc
 
 void hantro_h1_set_axi_ctrl(struct hantro_dev *vpu, struct hantro_ctx *ctx);
 void hantro_h1_set_color_conv(struct hantro_dev *vpu, struct hantro_ctx *ctx);
+void hantro_h1_set_src_img_ctrl(struct hantro_dev *vpu, struct hantro_ctx *ctx);
+
 
 #endif /* HANTRO_H_ */
--- a/drivers/media/platform/verisilicon/hantro_drv.c
+++ b/drivers/media/platform/verisilicon/hantro_drv.c
@@ -285,6 +285,38 @@ static int hantro_try_ctrl(struct v4l2_c
 		if (dec_params->profile != 0)
 			return -EINVAL;
 	}
+
+	return 0;
+}
+
+static int hantro_enc_try_ctrl(struct v4l2_ctrl *ctrl)
+{
+	if (ctrl->id == V4L2_CID_ROTATE) {
+		/* Only 90 and 270 degrees rotation are supported */
+		if (ctrl->val != 0 && ctrl->val != 90 && ctrl->val != 270)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int hantro_enc_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct hantro_ctx *ctx;
+
+	ctx = container_of(ctrl->handler,
+			   struct hantro_ctx, ctrl_handler);
+
+	vpu_debug(1, "s_ctrl: id = %d, val = %d\n", ctrl->id, ctrl->val);
+
+	switch (ctrl->id) {
+	case V4L2_CID_ROTATE:
+		ctx->rotation = ctrl->val;
+		break;
+	default:
+		return -EINVAL;
+	}
+
 	return 0;
 }
 
@@ -338,6 +370,11 @@ static const struct v4l2_ctrl_ops hantro
 	.s_ctrl = hantro_vp9_s_ctrl,
 };
 
+static const struct v4l2_ctrl_ops hantro_enc_ctrl_ops = {
+	.try_ctrl = hantro_enc_try_ctrl,
+	.s_ctrl = hantro_enc_s_ctrl,
+};
+
 #define HANTRO_JPEG_ACTIVE_MARKERS	(V4L2_JPEG_ACTIVE_MARKER_APP0 | \
 					 V4L2_JPEG_ACTIVE_MARKER_COM | \
 					 V4L2_JPEG_ACTIVE_MARKER_DQT | \
@@ -533,7 +570,11 @@ static int hantro_ctrls_setup(struct han
 {
 	int i, num_ctrls = ARRAY_SIZE(controls);
 
-	v4l2_ctrl_handler_init(&ctx->ctrl_handler, num_ctrls);
+	v4l2_ctrl_handler_init(&ctx->ctrl_handler, 1 + num_ctrls);
+
+	if (ctx->is_encoder)
+		v4l2_ctrl_new_std(&ctx->ctrl_handler, &hantro_enc_ctrl_ops,
+				  V4L2_CID_ROTATE, 0, 270, 90, 0);
 
 	for (i = 0; i < num_ctrls; i++) {
 		if (!(allowed_codecs & controls[i].codec))
@@ -548,6 +589,7 @@ static int hantro_ctrls_setup(struct han
 			v4l2_ctrl_handler_free(&ctx->ctrl_handler);
 			return ctx->ctrl_handler.error;
 		}
+
 	}
 	return v4l2_ctrl_handler_setup(&ctx->ctrl_handler);
 }
--- a/drivers/media/platform/verisilicon/hantro_h1.c
+++ b/drivers/media/platform/verisilicon/hantro_h1.c
@@ -342,3 +342,40 @@ void hantro_h1_set_axi_ctrl(struct hantr
 
 	vepu_write(vpu, reg, H1_REG_AXI_CTRL);
 }
+
+static inline unsigned int hantro_rotation(int rotation)
+{
+	if (rotation == 90)
+		return 1;
+	else if (rotation == 270)
+		return 2;
+
+	return 0;
+}
+
+void hantro_h1_set_src_img_ctrl(struct hantro_dev *vpu, struct hantro_ctx *ctx)
+{
+	u32 overfill_r, overfill_b;
+	u32 reg;
+
+	/*
+	 * The format width and height are already macroblock aligned
+	 * by .vidioc_s_fmt_vid_cap_mplane() callback. Destination
+	 * format width and height can be further modified by
+	 * .vidioc_s_selection(), and the width is 4-aligned.
+	 */
+	if (!ctx->rotation) {
+		overfill_r = ctx->src_fmt.width - ctx->dst_fmt.width;
+		overfill_b = ctx->src_fmt.height - ctx->dst_fmt.height;
+	} else {
+		overfill_r = ctx->src_fmt.width - ctx->dst_fmt.height;
+		overfill_b = ctx->src_fmt.height - ctx->dst_fmt.width;
+	}
+
+	reg = H1_REG_IN_IMG_CTRL_ROW_LEN(ctx->src_fmt.width)
+		| H1_REG_IN_IMG_CTRL_OVRFLR_D4(overfill_r / 4)
+		| H1_REG_IN_IMG_CTRL_OVRFLB(overfill_b)
+		| H1_REG_IN_IMG_CTRL_FMT(ctx->vpu_src_fmt->enc_fmt)
+		| H1_REG_IN_IMG_CTRL_ROTATION(hantro_rotation(ctx->rotation));
+	vepu_write_relaxed(vpu, reg, H1_REG_IN_IMG_CTRL);
+}
--- a/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c
+++ b/drivers/media/platform/verisilicon/hantro_h1_jpeg_enc.c
@@ -15,28 +15,6 @@
 
 #define H1_JPEG_QUANT_TABLE_COUNT 16
 
-static void hantro_h1_set_src_img_ctrl(struct hantro_dev *vpu,
-				       struct hantro_ctx *ctx)
-{
-	u32 overfill_r, overfill_b;
-	u32 reg;
-
-	/*
-	 * The format width and height are already macroblock aligned
-	 * by .vidioc_s_fmt_vid_cap_mplane() callback. Destination
-	 * format width and height can be further modified by
-	 * .vidioc_s_selection(), and the width is 4-aligned.
-	 */
-	overfill_r = ctx->src_fmt.width - ctx->dst_fmt.width;
-	overfill_b = ctx->src_fmt.height - ctx->dst_fmt.height;
-
-	reg = H1_REG_IN_IMG_CTRL_ROW_LEN(ctx->src_fmt.width)
-		| H1_REG_IN_IMG_CTRL_OVRFLR_D4(overfill_r / 4)
-		| H1_REG_IN_IMG_CTRL_OVRFLB(overfill_b)
-		| H1_REG_IN_IMG_CTRL_FMT(ctx->vpu_src_fmt->enc_fmt);
-	vepu_write_relaxed(vpu, reg, H1_REG_IN_IMG_CTRL);
-}
-
 static void hantro_h1_jpeg_enc_set_buffers(struct hantro_dev *vpu,
 					   struct hantro_ctx *ctx,
 					   struct vb2_buffer *src_buf,
--- a/drivers/media/platform/verisilicon/hantro_h1_regs.h
+++ b/drivers/media/platform/verisilicon/hantro_h1_regs.h
@@ -61,6 +61,7 @@
 #define     H1_REG_IN_IMG_CTRL_OVRFLR_D4(x)		((x) << 10)
 #define     H1_REG_IN_IMG_CTRL_OVRFLB(x)		((x) << 6)
 #define     H1_REG_IN_IMG_CTRL_FMT(x)			((x) << 2)
+#define     H1_REG_IN_IMG_CTRL_ROTATION(x)		((x))
 #define H1_REG_ENC_CTRL0				0x040
 #define    H1_REG_ENC_CTRL0_INIT_QP(x)			((x) << 26)
 #define    H1_REG_ENC_CTRL0_SLICE_ALPHA(x)		((x) << 22)
