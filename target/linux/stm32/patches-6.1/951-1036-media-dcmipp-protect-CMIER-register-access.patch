From e1899c92e2eaafa156f84ac883e9d0104ee679e9 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Sat, 23 Mar 2024 22:11:03 +0100
Subject: [PATCH 1036/1141] media: dcmipp: protect CMIER register access

CMIER register is common between all pipes and thus needs to be
protected from concurrent access.  The struct v4l2_device structure,
unique to the whole driver embeds a spin_lock which can also be used
by the driver itself as explained in its description.  Rely on this
spin_lock to protect from concurrent access to the CMIER register.

Change-Id: I0ce3eb8c1778f211c7d50513c76a164903db461e
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/369269
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-bytecap.c         |  4 ++++
 .../st/stm32/stm32-dcmipp/dcmipp-pixelcap.c        | 14 ++++----------
 2 files changed, 8 insertions(+), 10 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
@@ -561,7 +561,9 @@ static int dcmipp_bytecap_start_streamin
 
 	/* Enable interruptions */
 	vcap->cmier |= DCMIPP_CMIER_P0ALL;
+	spin_lock(&vcap->vdev.v4l2_dev->lock);
 	reg_set(vcap, DCMIPP_CMIER, vcap->cmier);
+	spin_unlock(&vcap->vdev.v4l2_dev->lock);
 
 	vcap->state = RUNNING;
 
@@ -617,7 +619,9 @@ static void dcmipp_bytecap_stop_streamin
 	media_pipeline_stop(vcap->vdev.entity.pads);
 
 	/* Disable interruptions */
+	spin_lock(&vcap->vdev.v4l2_dev->lock);
 	reg_clear(vcap, DCMIPP_CMIER, vcap->cmier);
+	spin_unlock(&vcap->vdev.v4l2_dev->lock);
 
 	/* Stop capture */
 	reg_clear(vcap, DCMIPP_P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
@@ -25,9 +25,6 @@
 #define DCMIPP_PIXELCAP_DRV_NAME "dcmipp-pixelcap"
 
 #define DCMIPP_PRSR (0x1F8)
-/* TODO - CMIER configuration should be done in a common place since it is
- * common to all pipes and thus should be in core with a dedicated mutex
- */
 #define DCMIPP_CMIER (0x3F0)
 #define DCMIPP_CMIER_P1FRAMEIE BIT(17)
 #define DCMIPP_CMIER_P1VSYNCIE BIT(18)
@@ -650,12 +647,11 @@ static int dcmipp_pixelcap_start_streami
 	if (ret)
 		goto err_media_pipeline_stop;
 
-/* TODO - CMIER configuration should be done in a common place since it is
- * common to all pipes and thus should be in core with a dedicated mutex
- */
 	/* Enable interruptions */
 	vcap->cmier |= DCMIPP_CMIER_PxALL(vcap->pipe_id);
+	spin_lock(&vcap->vdev.v4l2_dev->lock);
 	reg_set(vcap, DCMIPP_CMIER, vcap->cmier);
+	spin_unlock(&vcap->vdev.v4l2_dev->lock);
 
 	/* Enable pipe at the end of programming */
 	reg_set(vcap, DCMIPP_PxFSCR(vcap->pipe_id), DCMIPP_PxFSCR_PIPEN);
@@ -729,12 +725,10 @@ static void dcmipp_pixelcap_stop_streami
 	/* Stop the media pipeline */
 	media_pipeline_stop(vcap->vdev.entity.pads);
 
-/* TODO - CMIER configuration should be done in a common place since it is
- * common to all pipes and thus should be in core with a dedicated mutex
- */
-
 	/* Disable interruptions */
+	spin_lock(&vcap->vdev.v4l2_dev->lock);
 	reg_clear(vcap, DCMIPP_CMIER, vcap->cmier);
+	spin_unlock(&vcap->vdev.v4l2_dev->lock);
 
 	/* Stop capture */
 	reg_clear(vcap, DCMIPP_PxFCTCR(vcap->pipe_id), DCMIPP_PxFCTCR_CPTREQ);
