From f500383368be0598cb6c38f95bf40d10386c30b4 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Mon, 20 Jun 2022 13:47:32 +0200
Subject: [PATCH 0250/1141] remoteproc: stm32: revert the use of workqueue to
 treat mailbox callback

This reverts commit 714cf5e3846047052fae89c7b927b886cc69d60c.

For the rpmsg_i2c and rpmsg_intc drivers support we need to manage the
RPMsg in interrupt context.
This revert suppresses the creation of a workqueue, which
allowed to call the RPMsg framework in normal context.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Change-Id: Ie73b65e50e7a87bf1b08a49394961e087a15711c
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/286891
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Ludovic BARRE <ludovic.barre@foss.st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/remoteproc/stm32_rproc.c | 45 ++++----------------------------
 1 file changed, 5 insertions(+), 40 deletions(-)

diff --git a/drivers/remoteproc/stm32_rproc.c b/drivers/remoteproc/stm32_rproc.c
index 4eff39aa06de..42008e2d260b 100644
--- a/drivers/remoteproc/stm32_rproc.c
+++ b/drivers/remoteproc/stm32_rproc.c
@@ -20,7 +20,6 @@
 #include <linux/reset.h>
 #include <linux/slab.h>
 #include <linux/tee_remoteproc.h>
-#include <linux/workqueue.h>
 
 #include "remoteproc_internal.h"
 #include "remoteproc_elf_helpers.h"
@@ -35,9 +34,7 @@
 #define STM32_SMC_REG_WRITE	0x1
 
 #define STM32_MBX_VQ0		"vq0"
-#define STM32_MBX_VQ0_ID	0
 #define STM32_MBX_VQ1		"vq1"
-#define STM32_MBX_VQ1_ID	1
 #define STM32_MBX_SHUTDOWN	"shutdown"
 #define STM32_MBX_DETACH	"detach"
 
@@ -98,7 +95,6 @@ struct stm32_mbox {
 	const unsigned char name[10];
 	struct mbox_chan *chan;
 	struct mbox_client client;
-	struct work_struct vq_work;
 	int vq_id;
 };
 
@@ -114,7 +110,6 @@ struct stm32_rproc {
 	u32 nb_rmems;
 	struct stm32_rproc_mem *rmems;
 	struct stm32_mbox mb[MBOX_NB_MBX];
-	struct workqueue_struct *workqueue;
 	bool fw_loaded;
 	struct tee_rproc *trproc;
 	const struct stm32_rproc_data *desc;
@@ -518,30 +513,13 @@ static irqreturn_t stm32_rproc_wdg(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
-static void stm32_rproc_mb_vq_work(struct work_struct *work)
-{
-	struct stm32_mbox *mb = container_of(work, struct stm32_mbox, vq_work);
-	struct rproc *rproc = dev_get_drvdata(mb->client.dev);
-
-	mutex_lock(&rproc->lock);
-
-	if (rproc->state != RPROC_RUNNING && rproc->state != RPROC_ATTACHED)
-		goto unlock_mutex;
-
-	if (rproc_vq_interrupt(rproc, mb->vq_id) == IRQ_NONE)
-		dev_dbg(&rproc->dev, "no message found in vq%d\n", mb->vq_id);
-
-unlock_mutex:
-	mutex_unlock(&rproc->lock);
-}
-
 static void stm32_rproc_mb_callback(struct mbox_client *cl, void *data)
 {
 	struct rproc *rproc = dev_get_drvdata(cl->dev);
 	struct stm32_mbox *mb = container_of(cl, struct stm32_mbox, client);
-	struct stm32_rproc *ddata = rproc->priv;
 
-	queue_work(ddata->workqueue, &mb->vq_work);
+	if (rproc_vq_interrupt(rproc, mb->vq_id) == IRQ_NONE)
+		dev_dbg(&rproc->dev, "no message found in vq%d\n", mb->vq_id);
 }
 
 static void stm32_rproc_free_mbox(struct rproc *rproc)
@@ -559,7 +537,7 @@ static void stm32_rproc_free_mbox(struct rproc *rproc)
 static const struct stm32_mbox stm32_rproc_mbox[MBOX_NB_MBX] = {
 	{
 		.name = STM32_MBX_VQ0,
-		.vq_id = STM32_MBX_VQ0_ID,
+		.vq_id = 0,
 		.client = {
 			.rx_callback = stm32_rproc_mb_callback,
 			.tx_block = false,
@@ -567,7 +545,7 @@ static const struct stm32_mbox stm32_rproc_mbox[MBOX_NB_MBX] = {
 	},
 	{
 		.name = STM32_MBX_VQ1,
-		.vq_id = STM32_MBX_VQ1_ID,
+		.vq_id = 1,
 		.client = {
 			.rx_callback = stm32_rproc_mb_callback,
 			.tx_block = false,
@@ -623,10 +601,6 @@ static int stm32_rproc_request_mbox(struct rproc *rproc)
 			dev_warn(dev, "cannot get %s mbox\n", name);
 			ddata->mb[i].chan = NULL;
 		}
-		if (ddata->mb[i].vq_id >= 0) {
-			INIT_WORK(&ddata->mb[i].vq_work,
-				  stm32_rproc_mb_vq_work);
-		}
 	}
 
 	return 0;
@@ -1154,18 +1128,12 @@ static int stm32_rproc_probe(struct platform_device *pdev)
 		rproc->state = RPROC_DETACHED;
 
 	rproc->has_iommu = false;
-	ddata->workqueue = create_workqueue(dev_name(dev));
-	if (!ddata->workqueue) {
-		dev_err(dev, "cannot create workqueue\n");
-		ret = -ENOMEM;
-		goto free_resources;
-	}
 
 	platform_set_drvdata(pdev, rproc);
 
 	ret = stm32_rproc_request_mbox(rproc);
 	if (ret)
-		goto free_wkq;
+		goto free_resources;
 
 	ret = rproc_add(rproc);
 	if (ret)
@@ -1175,8 +1143,6 @@ static int stm32_rproc_probe(struct platform_device *pdev)
 
 free_mb:
 	stm32_rproc_free_mbox(rproc);
-free_wkq:
-	destroy_workqueue(ddata->workqueue);
 free_resources:
 	rproc_resource_cleanup(rproc);
 free_rproc:
@@ -1203,7 +1169,6 @@ static int stm32_rproc_remove(struct platform_device *pdev)
 
 	rproc_del(rproc);
 	stm32_rproc_free_mbox(rproc);
-	destroy_workqueue(ddata->workqueue);
 
 	if (device_may_wakeup(dev)) {
 		dev_pm_clear_wake_irq(dev);
-- 
2.39.2

