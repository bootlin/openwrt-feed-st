From 070bd15a8a9295e2653431b7aebc26177f83f964 Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Tue, 29 Aug 2023 15:13:00 +0200
Subject: [PATCH 0458/1141] pinctrl: stm32: Fix support for RIF semaphore
 handling

Current code acquires the GPIO's RIF semaphores while computing
the valid mask. When the GPIO is shared with other CIDs, this
prevents the other CID to acquire the semaphore.

Only test for the semaphore available to Linux CID while computing
the valid mask.
Acquire the semaphore during GPIO request and release it at GPIO
free.
While there, reorder the functions to keep together the RIF code
avoiding forward declarations.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: Ie88072a02b053567eea9b895180cce5d429f2287
---
 drivers/pinctrl/stm32/pinctrl-stm32.c | 123 ++++++++++++++++++--------
 1 file changed, 86 insertions(+), 37 deletions(-)

--- a/drivers/pinctrl/stm32/pinctrl-stm32.c
+++ b/drivers/pinctrl/stm32/pinctrl-stm32.c
@@ -244,6 +244,80 @@ static void stm32_gpio_backup_delay(stru
 	bank->pin_backup[offset] |= delay << STM32_GPIO_BKP_DELAY_SHIFT;
 }
 
+/* RIF functions */
+
+static bool stm32_gpio_rif_valid(struct stm32_gpio_bank *bank, unsigned int gpio_nr)
+{
+	u32 cid;
+
+	cid = readl_relaxed(bank->base + STM32_GPIO_CIDCFGR(gpio_nr));
+
+	if (!(cid & STM32_GPIO_CIDCFGR_CFEN))
+		return true;
+
+	if (!(cid & STM32_GPIO_CIDCFGR_SEMEN)) {
+		if (FIELD_GET(STM32_GPIO_CIDCFGR_SCID_MASK, cid) == STM32_GPIO_CID1)
+			return true;
+
+		return false;
+	}
+
+	if (cid & STM32_GPIO_CIDCFGR_SEMWL_CID1)
+		return true;
+
+	return false;
+}
+
+static bool stm32_gpio_rif_acquire_semaphore(struct stm32_gpio_bank *bank, unsigned int gpio_nr)
+{
+	u32 cid, sem;
+
+	cid = readl_relaxed(bank->base + STM32_GPIO_CIDCFGR(gpio_nr));
+
+	if (!(cid & STM32_GPIO_CIDCFGR_CFEN))
+		return true;
+
+	if (!(cid & STM32_GPIO_CIDCFGR_SEMEN)) {
+		if (FIELD_GET(STM32_GPIO_CIDCFGR_SCID_MASK, cid) == STM32_GPIO_CID1)
+			return true;
+
+		return false;
+	}
+
+	if (!(cid & STM32_GPIO_CIDCFGR_SEMWL_CID1))
+		return false;
+
+	sem = readl_relaxed(bank->base + STM32_GPIO_SEMCR(gpio_nr));
+	if (sem & STM32_GPIO_SEMCR_SEM_MUTEX) {
+		if (FIELD_GET(STM32_GPIO_SEMCR_SEMCID_MASK, sem) == STM32_GPIO_CID1)
+			return true;
+
+		return false;
+	}
+
+	writel_relaxed(STM32_GPIO_SEMCR_SEM_MUTEX, bank->base + STM32_GPIO_SEMCR(gpio_nr));
+
+	sem = readl_relaxed(bank->base + STM32_GPIO_SEMCR(gpio_nr));
+	if (sem & STM32_GPIO_SEMCR_SEM_MUTEX &&
+	    FIELD_GET(STM32_GPIO_SEMCR_SEMCID_MASK, sem) == STM32_GPIO_CID1)
+		return true;
+
+	return false;
+}
+
+static void stm32_gpio_rif_release_semaphore(struct stm32_gpio_bank *bank, unsigned int gpio_nr)
+{
+	u32 cid;
+
+	cid = readl_relaxed(bank->base + STM32_GPIO_CIDCFGR(gpio_nr));
+
+	if (!(cid & STM32_GPIO_CIDCFGR_CFEN))
+		return;
+
+	if (cid & STM32_GPIO_CIDCFGR_SEMEN)
+		writel_relaxed(0, bank->base + STM32_GPIO_SEMCR(gpio_nr));
+}
+
 /* GPIO functions */
 
 static inline void __stm32_gpio_set(struct stm32_gpio_bank *bank,
@@ -270,12 +344,24 @@ static int stm32_gpio_request(struct gpi
 		return -EINVAL;
 	}
 
+	if (bank->rif_control) {
+		if (!stm32_gpio_rif_acquire_semaphore(bank, offset)) {
+			dev_err(pctl->dev, "pin %d not available.\n", pin);
+			return -EINVAL;
+		}
+	}
+
 	return pinctrl_gpio_request(chip->base + offset);
 }
 
 static void stm32_gpio_free(struct gpio_chip *chip, unsigned offset)
 {
+	struct stm32_gpio_bank *bank = gpiochip_get_data(chip);
+
 	pinctrl_gpio_free(chip->base + offset);
+
+	if (bank->rif_control)
+		stm32_gpio_rif_release_semaphore(bank, offset);
 }
 
 static int stm32_gpio_get(struct gpio_chip *chip, unsigned offset)
@@ -340,43 +426,6 @@ static int stm32_gpio_get_direction(stru
 	return ret;
 }
 
-static bool stm32_gpio_rif_valid(struct stm32_gpio_bank *bank, unsigned int gpio_nr)
-{
-	u32 cid, sem;
-
-	cid = readl_relaxed(bank->base + STM32_GPIO_CIDCFGR(gpio_nr));
-
-	if (!(cid & STM32_GPIO_CIDCFGR_CFEN))
-		return true;
-
-	if (!(cid & STM32_GPIO_CIDCFGR_SEMEN)) {
-		if (FIELD_GET(STM32_GPIO_CIDCFGR_SCID_MASK, cid) == STM32_GPIO_CID1)
-			return true;
-
-		return false;
-	}
-
-	if (!(cid & STM32_GPIO_CIDCFGR_SEMWL_CID1))
-		return false;
-
-	sem = readl_relaxed(bank->base + STM32_GPIO_SEMCR(gpio_nr));
-
-	if (sem & STM32_GPIO_SEMCR_SEM_MUTEX) {
-		if (FIELD_GET(STM32_GPIO_SEMCR_SEMCID_MASK, sem) == STM32_GPIO_CID1)
-			return true;
-
-		return false;
-	}
-
-	writel_relaxed(STM32_GPIO_SEMCR_SEM_MUTEX, bank->base + STM32_GPIO_SEMCR(gpio_nr));
-	sem = readl_relaxed(bank->base + STM32_GPIO_SEMCR(gpio_nr));
-	if (sem & STM32_GPIO_SEMCR_SEM_MUTEX &&
-	    FIELD_GET(STM32_GPIO_SEMCR_SEMCID_MASK, sem) == STM32_GPIO_CID1)
-		return true;
-
-	return false;
-}
-
 static int stm32_gpio_init_valid_mask(struct gpio_chip *chip,
 				      unsigned long *valid_mask,
 				      unsigned int ngpios)
