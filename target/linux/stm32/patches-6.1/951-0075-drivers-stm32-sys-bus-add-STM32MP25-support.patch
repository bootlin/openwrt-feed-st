From 342296e6a538b72ff342c07e679d5c576c3681d2 Mon Sep 17 00:00:00 2001
From: Gatien Chevallier <gatien.chevallier@foss.st.com>
Date: Mon, 28 Nov 2022 10:02:57 +0100
Subject: [PATCH 0075/1141] drivers: stm32-sys-bus: add STM32MP25 support

STM32MP25 system bus firewall is based on RIFSC (Resource
Isolation Framework Security Controller). This controller
allows to define access right for each resource connected to
the system bus.
Before accessing a resource, firewall configuration must be
checked and access right granted, else a bus illegal will be
generated.

[TEMPORARY]

Export stm32_rifsc_get_access_by_id() API so that other devices can
check their firewall configuration.

Signed-off-by: Loic PALLARDY <loic.pallardy@st.com>
Signed-off-by: Gatien Chevallier <gatien.chevallier@foss.st.com>
Change-Id: I853cad2331ada5581a20ba170af16739e1ec94f7
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/276544
             https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/295476
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Tested-by: Gatien CHEVALLIER <gatien.chevallier@st.com>
Reviewed-by: Gatien CHEVALLIER <gatien.chevallier@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Lionel DEBIEVE <lionel.debieve@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/301072
Reviewed-by: Lionel DEBIEVE <lionel.debieve@foss.st.com>
Reviewed-by: Gabriel FERNANDEZ <gabriel.fernandez@foss.st.com>
---
 arch/arm64/Kconfig.platforms |   1 +
 drivers/bus/Kconfig          |   2 +-
 drivers/bus/stm32_sys_bus.c  | 146 ++++++++++++++++++++++++++++++++++-
 drivers/bus/stm32_sys_bus.h  |  12 +++
 4 files changed, 159 insertions(+), 2 deletions(-)
 create mode 100644 drivers/bus/stm32_sys_bus.h

--- a/arch/arm64/Kconfig.platforms
+++ b/arch/arm64/Kconfig.platforms
@@ -292,6 +292,7 @@ config ARCH_STM32
 	select ARM_SMC_MBOX
 	select ARM_SCMI_PROTOCOL
 	select COMMON_CLK_SCMI
+	select STM32_SYS_BUS
 	help
 	  This enables support for ARMv8 based STMicroelectronics STM32 family.
 
--- a/drivers/bus/Kconfig
+++ b/drivers/bus/Kconfig
@@ -166,7 +166,7 @@ config QCOM_SSC_BLOCK_BUS
 config STM32_SYS_BUS
 	bool "STM32 System bus controller"
 	depends on ARCH_STM32
-	default MACH_STM32MP157 || MACH_STM32MP13
+	default MACH_STM32MP157 || MACH_STM32MP13 || MACH_STM32MP25
 	help
 	  Say y to enable device access right verification before device probing.
 	  If access not granted, device won't be probed and an error message will
--- a/drivers/bus/stm32_sys_bus.c
+++ b/drivers/bus/stm32_sys_bus.c
@@ -15,6 +15,8 @@
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 
+#include "stm32_sys_bus.h"
+
 /* ETZPC peripheral as firewall bus */
 /* ETZPC registers */
 #define ETZPC_DECPROT			0x10
@@ -28,6 +30,46 @@
 #define STM32MP15_ETZPC_ENTRIES		96
 #define STM32MP13_ETZPC_ENTRIES		64
 
+/* RIFSC peripheral as firewall bus */
+/* RIFSC offset register */
+#define RIFSC_RISC_SECCFGR0		0x10
+#define RIFSC_RISC_PRIVCFGR0		0x30
+#define RIFSC_RISC_PER0_CIDCFGR		0x100
+#define RIFSC_RISC_PER0_SEMCR		0x104
+
+/*
+ * SEMCR register
+ */
+#define SEMCR_MUTEX			BIT(0)
+
+/* RIFSC miscellaneous */
+#define RIFSC_RISC_SCID_MASK		GENMASK(6, 4)
+#define RIFSC_RISC_SEMWL_MASK		GENMASK(23, 16)
+#define RIFSC_RISC_PER_ID_MASK		GENMASK(31, 24)
+
+#define RIFSC_RISC_PERx_CID_MASK	(RIFSC_RISC_CFEN_MASK | \
+					 RIFSC_RISC_SEM_EN_MASK | \
+					 RIFSC_RISC_SCID_MASK | \
+					 RIFSC_RISC_SEML_MASK)
+
+#define IDS_PER_RISC_SEC_PRIV_REGS	32
+
+/* RIF miscellaneous */
+/*
+ * CIDCFGR register fields
+ */
+#define CIDCFGR_CFEN			BIT(0)
+#define CIDCFGR_SEMEN			BIT(1)
+#define CIDCFGR_SEMWL(x)		BIT(RIFSC_RISC_SEML_SHIFT + (x))
+
+#define SEMWL_SHIFT			16
+
+/* Compartiment IDs */
+#define RIF_CID0			0x0
+#define RIF_CID1			0x1
+
+#define STM32MP25_RIFSC_ENTRIES		178
+
 struct sys_bus_data;
 
 struct stm32_sys_bus_match_data {
@@ -93,6 +135,102 @@ static int stm32_etzpc_get_access(struct
 	return 0;
 }
 
+static bool stm32_rif_is_semaphore_available(void __iomem *addr)
+{
+	return !(readl(addr) & SEMCR_MUTEX);
+}
+
+static int stm32_rif_acquire_semaphore(struct sys_bus_data *pdata, int id)
+{
+	void __iomem *addr = pdata->sys_bus_base + RIFSC_RISC_PER0_SEMCR + 0x8 * id;
+
+	writel(SEMCR_MUTEX, addr);
+
+	/* Check that CID1 has the semaphore */
+	if (stm32_rif_is_semaphore_available(addr) ||
+	    FIELD_GET(RIFSC_RISC_SCID_MASK, (readl(addr)) != RIF_CID1))
+		return -EACCES;
+
+	return 0;
+}
+
+static int stm32_rifsc_get_access_by_node(struct sys_bus_data *pdata, struct device_node *np)
+{
+	int err;
+	u32 id;
+
+	err = stm32_sys_bus_get_periph_id(pdata, np, &id);
+	if (err)
+		return err;
+
+	return stm32_rifsc_get_access_by_id(id);
+}
+
+int stm32_rifsc_get_access_by_id(u32 id)
+{
+	struct sys_bus_data *pdata = bus_data;
+	int err;
+	u32 reg_offset, reg_id, sec_reg_value, cid_reg_value;
+
+	if (id >= STM32MP25_RIFSC_ENTRIES)
+		return -EINVAL;
+
+	/*
+	 * RIFSC_RISC_PRIVCFGRx and RIFSC_RISC_SECCFGRx both handle configuration access for
+	 * 32 peripherals. On the other hand, there is one _RIFSC_RISC_PERx_CIDCFGR register
+	 * per peripheral
+	 */
+	reg_id = id / IDS_PER_RISC_SEC_PRIV_REGS;
+	reg_offset = id % IDS_PER_RISC_SEC_PRIV_REGS;
+	sec_reg_value = readl(pdata->sys_bus_base + RIFSC_RISC_SECCFGR0 + 0x4 * reg_id);
+	cid_reg_value = readl(pdata->sys_bus_base + RIFSC_RISC_PER0_CIDCFGR + 0x8 * id);
+
+	/*
+	 * First check conditions for semaphore mode, which doesn't take into account static CID.
+	 * CID for Cortex A35 is RIF_CID1.
+	 */
+	if (cid_reg_value & CIDCFGR_SEMEN) {
+		if (cid_reg_value & BIT(RIF_CID1 + SEMWL_SHIFT)) {
+			/* Static CID is irrelevant if semaphore mode */
+			goto skip_cid_check;
+		} else {
+			dev_dbg(pdata->dev, "Invalid bus semaphore configuration: index %d\n", id);
+			return -EACCES;
+		}
+	}
+
+	/* Skip CID check if CID filtering isn't enabled */
+	if (!(cid_reg_value & CIDCFGR_CFEN))
+		goto skip_cid_check;
+
+	/* Coherency check with the CID configuration */
+	if (FIELD_GET(RIFSC_RISC_SCID_MASK, cid_reg_value) != RIF_CID1) {
+		dev_dbg(pdata->dev, "Invalid CID configuration for peripheral: %d\n", id);
+		return -EACCES;
+	}
+
+skip_cid_check:
+	/* Check security configuration */
+	if (sec_reg_value & BIT(reg_offset)) {
+		dev_dbg(pdata->dev, "Invalid security configuration for peripheral: %d\n", id);
+		return -EACCES;
+	}
+
+	/*
+	 * If the peripheral is in semaphore mode, take the semaphore so that
+	 * the CID1 has the ownership.
+	 */
+	if (cid_reg_value & CIDCFGR_SEMEN) {
+		err = stm32_rif_acquire_semaphore(pdata, id);
+		if (err) {
+			dev_err(pdata->dev, "Couldn't acquire semaphore for peripheral: %d\n", id);
+			return err;
+		}
+	}
+
+	return 0;
+}
+
 static void stm32_sys_bus_populate(struct sys_bus_data *pdata)
 {
 	struct device *parent;
@@ -109,7 +247,7 @@ static void stm32_sys_bus_populate(struc
 			 * Mark the node as populated so platform bus won't probe it
 			 */
 			of_node_set_flag(child, OF_POPULATED);
-			dev_dbg(parent, "%s: Peripheral will not be probed\n",
+			dev_err(parent, "%s: Peripheral will not be probed\n",
 				child->full_name);
 		}
 	}
@@ -162,9 +300,15 @@ static const struct stm32_sys_bus_match_
 	.sys_bus_get_access = stm32_etzpc_get_access,
 };
 
+static const struct stm32_sys_bus_match_data stm32mp25_sys_bus_data = {
+	.max_entries = STM32MP25_RIFSC_ENTRIES,
+	.sys_bus_get_access = stm32_rifsc_get_access_by_node,
+};
+
 static const struct of_device_id stm32_sys_bus_of_match[] = {
 	{ .compatible = "st,stm32mp15-sys-bus", .data = &stm32mp15_sys_bus_data },
 	{ .compatible = "st,stm32mp13-sys-bus", .data = &stm32mp13_sys_bus_data },
+	{ .compatible = "st,stm32mp25-sys-bus", .data = &stm32mp25_sys_bus_data },
 	{}
 };
 MODULE_DEVICE_TABLE(of, stm32_sys_bus_of_match);
--- /dev/null
+++ b/drivers/bus/stm32_sys_bus.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause) */
+/*
+ * Copyright (C) STMicroelectronics 2022 - All Rights Reserved
+ */
+#ifndef __ARCH_ARM_MACH_STM32MP25_SYSTEM_BUS
+#define __ARCH_ARM_MACH_STM32MP25_SYSTEM_BUS
+
+#include <linux/types.h>
+
+int stm32_rifsc_get_access_by_id(u32 id);
+
+#endif /* __ARCH_ARM_MACH_STM32MP25_SYSTEM_BUS */
