From c5aab678e9b6a0097877611af6c10bdd5cd7c7ce Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Wed, 3 Jan 2024 16:01:54 +0100
Subject: [PATCH 0865/1141] drm/stm: dsi: don't enable/disable dsi-phy clock
 during probe

Change-Id: Idcf65cc00a10d4b89707ae68905135bd991ab9b9
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/352881
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/gpu/drm/stm/dw_mipi_dsi-stm.c | 87 +++++++++++++++++++++++++--
 1 file changed, 83 insertions(+), 4 deletions(-)

--- a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
+++ b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
@@ -146,6 +146,7 @@ struct dw_mipi_dsi_stm {
 	struct dw_mipi_dsi_plat_data pdata;
 	unsigned int lane_mbps;
 	u32 format;
+	bool probe_done;
 };
 
 static inline void dsi_write(struct dw_mipi_dsi_stm *dsi, u32 reg, u32 val)
@@ -419,6 +420,9 @@ static int dw_mipi_dsi_phy_141_init(void
 	dsi_clear(dsi, DSI_PTCR0, PTCR0_TRSEN);
 	mdelay(1);
 
+	if (clk_hw_is_enabled(&dsi->txbyte_clk))
+		clk_disable_unprepare(dsi->txbyte_clk.clk);
+
 	/* dummy set rate ... */
 	clk_set_rate(dsi->txbyte_clk.clk, dsi->lane_mbps * 1000000);
 
@@ -479,9 +483,19 @@ dw_mipi_dsi_phy_141_get_lane_mbps(void *
 static void dw_mipi_dsi_clk_disable(struct clk_hw *clk)
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(clk);
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	if (!dsi->probe_done)
+		return;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return;
+	}
+
 	if (dsi->hw_version == HWVER_141) {
 		/* Disable the DSI PLL */
 		dsi_clear(dsi, DSI_WRPCR2, WRPCR2_PLLEN);
@@ -492,6 +506,8 @@ static void dw_mipi_dsi_clk_disable(stru
 		/* Disable the regulator */
 		dsi_clear(dsi, DSI_WRPCR, WRPCR_REGEN | WRPCR_BGREN);
 	}
+
+	clk_disable_unprepare(dsi->pclk);
 }
 
 static int dw_mipi_dsi_clk_enable(struct clk_hw *clk)
@@ -502,6 +518,15 @@ static int dw_mipi_dsi_clk_enable(struct
 
 	DRM_DEBUG_DRIVER("\n");
 
+	if (!dsi->probe_done)
+		return 0;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return ret;
+	}
+
 	if (dsi->hw_version == HWVER_141) {
 		ret = readl_poll_timeout_atomic(dsi->base + DSI_PSR, val, val & PSR_PSSC,
 						SLEEP_US, TIMEOUT_US);
@@ -525,17 +550,30 @@ static int dw_mipi_dsi_clk_enable(struct
 			DRM_DEBUG_DRIVER("!TIMEOUT! waiting PLL, let's continue\n");
 	}
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return 0;
 }
 
 static int dw_mipi_dsi_clk_is_enabled(struct clk_hw *hw)
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+	int ret;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return false;
+	}
 
 	if (dsi->hw_version == HWVER_141)
-		return dsi_read(dsi, DSI_WRPCR2) & WRPCR2_PLLEN;
+		ret = dsi_read(dsi, DSI_WRPCR2) & WRPCR2_PLLEN;
 	else
-		return dsi_read(dsi, DSI_WRPCR) & WRPCR_PLLEN;
+		ret = dsi_read(dsi, DSI_WRPCR) & WRPCR_PLLEN;
+
+	clk_disable_unprepare(dsi->pclk);
+
+	return ret;
 }
 
 static unsigned long dw_mipi_dsi_clk_recalc_rate(struct clk_hw *hw,
@@ -543,10 +581,17 @@ static unsigned long dw_mipi_dsi_clk_rec
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
 	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz;
+	int ret;
 	u32 val;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	pll_in_khz = (unsigned int)(parent_rate / 1000);
 
 	if (dsi->hw_version == HWVER_141) {
@@ -571,6 +616,8 @@ static unsigned long dw_mipi_dsi_clk_rec
 	/* Get the adjusted pll out value */
 	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return (unsigned long)pll_out_khz * 1000;
 }
 
@@ -583,6 +630,12 @@ static long dw_mipi_dsi_clk_round_rate(s
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	pll_in_khz = (unsigned int)(*parent_rate / 1000);
 
 	/* Compute best pll parameters */
@@ -602,6 +655,8 @@ static long dw_mipi_dsi_clk_round_rate(s
 	/* Get the adjusted pll out value */
 	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return pll_out_khz * 1000;
 }
 
@@ -617,6 +672,12 @@ static int dw_mipi_dsi_clk_set_rate(stru
 
 	pll_in_khz = (unsigned int)(parent_rate / 1000);
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	/* Compute best pll parameters */
 	idf = 0;
 	ndiv = 0;
@@ -680,6 +741,8 @@ static int dw_mipi_dsi_clk_set_rate(stru
 		dsi_update_bits(dsi, DSI_WPCR0, WPCR0_UIX4, val);
 	}
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return 0;
 }
 
@@ -748,9 +811,11 @@ static int dw_mipi_dsi_clk_register(stru
 static int dw_mipi_dsi_phy_init(void *priv_data)
 {
 	struct dw_mipi_dsi_stm *dsi = priv_data;
-	int ret;
+	int ret = 0;
+
+	if (!clk_hw_is_enabled(&dsi->txbyte_clk))
+		ret = clk_prepare_enable(dsi->txbyte_clk.clk);
 
-	ret = clk_prepare_enable(dsi->txbyte_clk.clk);
 	return ret;
 }
 
@@ -1203,6 +1268,20 @@ static int dw_mipi_dsi_stm_probe(struct
 			dev_err_probe(dev, PTR_ERR(dsi->ltdc_clk), "Unable to get pixclk clock\n");
 	}
 
+	dsi->probe_done = true;
+
+	/*
+	 * To obtain a continuous display after the probe, the txbyte clock must
+	 * remain activated
+	 */
+	if (device_property_read_bool(dev, "default-on")) {
+		ret = clk_prepare_enable(dsi->txbyte_clk.clk);
+		if (ret) {
+			DRM_ERROR("Failed to enable DSI pixel clock: %d\n", ret);
+			goto err_dsi_probe;
+		}
+	}
+
 	clk_disable_unprepare(dsi->pclk);
 	regulator_disable(dsi->vdd_supply);
 
