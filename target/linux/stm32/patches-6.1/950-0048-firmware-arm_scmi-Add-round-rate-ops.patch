From b6cbb882fd51410c1fca5863568b81257d377d22 Mon Sep 17 00:00:00 2001
From: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Date: Mon, 13 Sep 2021 13:02:28 +0200
Subject: [PATCH 048/529] firmware: arm_scmi: Add round rate ops

Need round ltdc clock witch using a SCMI clock parent.

Change-Id: I978aed2fbd8c173cfc0ce9c587aa39396a5d6952
Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/234117
Reviewed-by: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
---
 drivers/firmware/arm_scmi/clock.c | 43 +++++++++++++++++++++++++++++++
 include/linux/scmi_protocol.h     |  2 ++
 2 files changed, 45 insertions(+)

--- a/drivers/firmware/arm_scmi/clock.c
+++ b/drivers/firmware/arm_scmi/clock.c
@@ -22,6 +22,7 @@ enum scmi_clock_protocol_cmd {
 	CLOCK_RATE_NOTIFY = 0x9,
 	CLOCK_RATE_CHANGE_REQUESTED_NOTIFY = 0xA,
 	CLOCK_DUTY_CYCLE_GET = 0xB,
+	CLOCK_ROUND_RATE_GET = 0xC,
 };
 
 struct scmi_msg_resp_clock_protocol_attributes {
@@ -428,6 +429,47 @@ static int scmi_clock_rate_set(const str
 }
 
 static int
+scmi_clock_round_rate_get(const struct scmi_protocol_handle *ph,
+			  u32 clk_id, u64 *value)
+{
+	int ret;
+	struct scmi_xfer *t;
+	struct scmi_clock_set_rate *cfg;
+	struct clock_info *ci = ph->get_priv(ph);
+	u32 flags = 0;
+
+	ret = ph->xops->xfer_get_init(ph, CLOCK_ROUND_RATE_GET,
+				      sizeof(*cfg), 0, &t);
+	if (ret)
+		return ret;
+
+	if (ci->max_async_req &&
+	    atomic_inc_return(&ci->cur_async_req) < ci->max_async_req)
+		flags |= CLOCK_SET_ASYNC;
+
+	cfg = t->tx.buf;
+	cfg->flags = cpu_to_le32(flags);
+	cfg->id = cpu_to_le32(clk_id);
+	cfg->value_low = cpu_to_le32(*value & 0xffffffff);
+	cfg->value_high = cpu_to_le32(*value >> 32);
+
+	if (flags & CLOCK_SET_ASYNC)
+		ret = ph->xops->do_xfer_with_response(ph, t);
+	else
+		ret = ph->xops->do_xfer(ph, t);
+
+	if (ci->max_async_req)
+		atomic_dec(&ci->cur_async_req);
+
+	if (!ret)
+		*value = get_unaligned_le64(t->rx.buf);
+
+	ph->xops->xfer_put(ph, t);
+
+	return ret;
+}
+
+static int
 scmi_clock_config_set(const struct scmi_protocol_handle *ph, u32 clk_id,
 		      u32 config, bool atomic)
 {
@@ -507,6 +549,7 @@ static const struct scmi_clk_proto_ops c
 	.enable_atomic = scmi_clock_enable_atomic,
 	.disable_atomic = scmi_clock_disable_atomic,
 	.get_duty_cycle = scmi_clock_get_duty_cycle,
+	.round_rate_get = scmi_clock_round_rate_get,
 };
 
 static int scmi_clk_rate_notify(const struct scmi_protocol_handle *ph,
--- a/include/linux/scmi_protocol.h
+++ b/include/linux/scmi_protocol.h
@@ -97,6 +97,8 @@ struct scmi_clk_proto_ops {
 			      u32 clk_id);
 	int (*get_duty_cycle)(const struct scmi_protocol_handle *ph,
 			      u32 clk_id, int *num, int *den);
+	int (*round_rate_get)(const struct scmi_protocol_handle *ph,
+			      u32 clk_id, u64 *rate);
 };
 
 /**
