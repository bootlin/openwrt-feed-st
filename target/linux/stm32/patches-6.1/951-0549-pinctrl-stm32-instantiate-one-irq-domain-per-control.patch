From ed48d2c205e9b45968178efacfc8fa18607d9a82 Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Thu, 10 Aug 2023 18:19:24 +0200
Subject: [PATCH 0549/1141] pinctrl: stm32: instantiate one irq domain per
 controller

The current code instantiates one irq domain per GPIO bank.
This is currently not needed as only one GPIO, among the GPIO with
same position in each bank, can be routed to the IRQ controller by
the mux in the EXTI (for MPU) or in the st,stm32-syscfg (for MCU).

The driver is going to support multiple EXTI irq controllers and
this will further increase the number of irq domains to a total of
the number of banks multiplied by the number of EXTI.

Modify the driver to instantiate a single irq domain used by all
the GPIO banks of the controller.
Track per bank the virq used by the GPIO, if any.
While there, manage the irq domain to safely remove it on probe
error.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: I23c4e676146289fe957970986a3ef6907740ba10
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/329529
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
---
 drivers/pinctrl/stm32/pinctrl-stm32.c | 148 +++++++++++++++++++-------
 1 file changed, 111 insertions(+), 37 deletions(-)

diff --git a/drivers/pinctrl/stm32/pinctrl-stm32.c b/drivers/pinctrl/stm32/pinctrl-stm32.c
index 78726492a800..163d387ac5b1 100644
--- a/drivers/pinctrl/stm32/pinctrl-stm32.c
+++ b/drivers/pinctrl/stm32/pinctrl-stm32.c
@@ -133,12 +133,11 @@ struct stm32_gpio_bank {
 	spinlock_t lock;
 	struct gpio_chip gpio_chip;
 	struct pinctrl_gpio_range range;
-	struct fwnode_handle *fwnode;
-	struct irq_domain *domain;
 	u32 bank_nr;
 	u32 bank_ioport_nr;
 	u32 pin_backup[STM32_GPIO_PINS_PER_BANK];
 	u8 irq_type[STM32_GPIO_PINS_PER_BANK];
+	int virq[STM32_GPIO_PINS_PER_BANK];
 	bool secure_control;
 	bool io_sync_control;
 	bool rif_control;
@@ -365,6 +364,7 @@ static int stm32_gpio_request(struct gpio_chip *chip, unsigned offset)
 static void stm32_gpio_free(struct gpio_chip *chip, unsigned offset)
 {
 	struct stm32_gpio_bank *bank = gpiochip_get_data(chip);
+	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
 	unsigned int virq;
 
 	pinctrl_gpio_free(chip->base + offset);
@@ -372,9 +372,12 @@ static void stm32_gpio_free(struct gpio_chip *chip, unsigned offset)
 	if (bank->rif_control)
 		stm32_gpio_rif_release_semaphore(bank, offset);
 
-	virq = irq_find_mapping(bank->domain, offset);
+	virq = bank->virq[offset];
 	if (virq)
 		irq_dispose_mapping(virq);
+
+	if (bank->virq[offset])
+		dev_err(pctl->dev, "ERROR: IRQ not freed\n");
 }
 
 static int stm32_gpio_get(struct gpio_chip *chip, unsigned offset)
@@ -413,7 +416,10 @@ static int stm32_gpio_to_irq(struct gpio_chip *chip, unsigned int offset)
 	struct stm32_gpio_bank *bank = gpiochip_get_data(chip);
 	struct irq_fwspec fwspec;
 
-	fwspec.fwnode = bank->fwnode;
+	if (bank->virq[offset])
+		return bank->virq[offset];
+
+	fwspec.fwnode = bank->gpio_chip.fwnode;
 	fwspec.param_count = 2;
 	fwspec.param[0] = offset;
 	fwspec.param[1] = IRQ_TYPE_NONE;
@@ -492,9 +498,21 @@ static const struct gpio_chip stm32_gpio_template = {
 	.init_valid_mask	= stm32_gpio_init_valid_mask,
 };
 
+static struct stm32_gpio_bank *stm32_pctrl_fwnode_to_bank(struct stm32_pinctrl *pctl,
+							  struct fwnode_handle *fwnode)
+{
+	unsigned int i;
+
+	for (i = 0; i < pctl->nbanks; i++)
+		if (fwnode == pctl->banks[i].gpio_chip.fwnode)
+			return &pctl->banks[i];
+
+	return NULL;
+}
+
 static void stm32_gpio_irq_trigger(struct irq_data *d)
 {
-	struct stm32_gpio_bank *bank = d->domain->host_data;
+	struct stm32_gpio_bank *bank = d->chip_data;
 	int level;
 
 	/* Do not access the GPIO if this is not LEVEL triggered IRQ. */
@@ -516,7 +534,7 @@ static void stm32_gpio_irq_eoi(struct irq_data *d)
 
 static int stm32_gpio_set_type(struct irq_data *d, unsigned int type)
 {
-	struct stm32_gpio_bank *bank = d->domain->host_data;
+	struct stm32_gpio_bank *bank = d->chip_data;
 	u32 parent_type;
 
 	switch (type) {
@@ -542,8 +560,8 @@ static int stm32_gpio_set_type(struct irq_data *d, unsigned int type)
 
 static int stm32_gpio_irq_request_resources(struct irq_data *irq_data)
 {
-	struct stm32_gpio_bank *bank = irq_data->domain->host_data;
-	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
+	struct stm32_gpio_bank *bank = irq_data->chip_data;
+	struct stm32_pinctrl *pctl = irq_data->domain->host_data;
 	int ret;
 
 	ret = stm32_gpio_direction_input(&bank->gpio_chip, irq_data->hwirq);
@@ -562,7 +580,7 @@ static int stm32_gpio_irq_request_resources(struct irq_data *irq_data)
 
 static void stm32_gpio_irq_release_resources(struct irq_data *irq_data)
 {
-	struct stm32_gpio_bank *bank = irq_data->domain->host_data;
+	struct stm32_gpio_bank *bank = irq_data->chip_data;
 
 	gpiochip_unlock_as_irq(&bank->gpio_chip, irq_data->hwirq);
 }
@@ -585,6 +603,39 @@ static struct irq_chip stm32_gpio_irq_chip = {
 	.irq_release_resources = stm32_gpio_irq_release_resources,
 };
 
+static int stm32_gpio_domain_select(struct irq_domain *dm,
+				    struct irq_fwspec *fwspec,
+				    enum irq_domain_bus_token bus_token)
+{
+	struct fwnode_handle *fwnode = fwspec->fwnode;
+	struct stm32_pinctrl *pctl = dm->host_data;
+
+	if (!fwnode ||
+	    (bus_token != DOMAIN_BUS_ANY && dm->bus_token != bus_token))
+		return 0;
+
+	if (stm32_pctrl_fwnode_to_bank(pctl, fwnode))
+		return 1;
+
+	return 0;
+}
+
+static int stm32_gpio_domain_match(struct irq_domain *dm,
+				   struct device_node *node,
+				   enum irq_domain_bus_token bus_token)
+{
+	struct stm32_pinctrl *pctl = dm->host_data;
+
+	if (!node ||
+	    (bus_token != DOMAIN_BUS_ANY && dm->bus_token != bus_token))
+		return 0;
+
+	if (stm32_pctrl_fwnode_to_bank(pctl, of_node_to_fwnode(node)))
+		return 1;
+
+	return 0;
+}
+
 static int stm32_gpio_domain_translate(struct irq_domain *d,
 				       struct irq_fwspec *fwspec,
 				       unsigned long *hwirq,
@@ -602,8 +653,8 @@ static int stm32_gpio_domain_translate(struct irq_domain *d,
 static int stm32_gpio_domain_activate(struct irq_domain *d,
 				      struct irq_data *irq_data, bool reserve)
 {
-	struct stm32_gpio_bank *bank = d->host_data;
-	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
+	struct stm32_pinctrl *pctl = d->host_data;
+	struct stm32_gpio_bank *bank = irq_data->chip_data;
 	int ret;
 
 	if (!stm32_pctl_uses_syscfg(pctl))
@@ -630,14 +681,19 @@ static int stm32_gpio_domain_alloc(struct irq_domain *d,
 				   unsigned int virq,
 				   unsigned int nr_irqs, void *data)
 {
-	struct stm32_gpio_bank *bank = d->host_data;
+	struct stm32_pinctrl *pctl = d->host_data;
 	struct irq_fwspec *fwspec = data;
 	struct irq_fwspec parent_fwspec;
-	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
+	struct stm32_gpio_bank *bank;
 	irq_hw_number_t hwirq = fwspec->param[0];
 	unsigned long flags;
 	int ret = 0;
 
+	bank = stm32_pctrl_fwnode_to_bank(pctl, fwspec->fwnode);
+
+	if (bank->virq[hwirq])
+		return -EBUSY;
+
 	if (stm32_pctl_uses_syscfg(pctl)) {
 		/*
 		 * Check first that the IRQ MUX of that line is free.
@@ -666,15 +722,21 @@ static int stm32_gpio_domain_alloc(struct irq_domain *d,
 	irq_domain_set_hwirq_and_chip(d, virq, hwirq, &stm32_gpio_irq_chip,
 				      bank);
 
-	return irq_domain_alloc_irqs_parent(d, virq, nr_irqs, &parent_fwspec);
+	ret = irq_domain_alloc_irqs_parent(d, virq, nr_irqs, &parent_fwspec);
+	if (ret)
+		return ret;
+
+	bank->virq[hwirq] = virq;
+
+	return 0;
 }
 
 static void stm32_gpio_domain_free(struct irq_domain *d, unsigned int virq,
 				   unsigned int nr_irqs)
 {
-	struct stm32_gpio_bank *bank = d->host_data;
-	struct stm32_pinctrl *pctl = dev_get_drvdata(bank->gpio_chip.parent);
+	struct stm32_pinctrl *pctl = d->host_data;
 	struct irq_data *irq_data = irq_domain_get_irq_data(d, virq);
+	struct stm32_gpio_bank *bank = irq_data->chip_data;
 	unsigned long flags, hwirq = irq_data->hwirq;
 
 	irq_domain_free_irqs_common(d, virq, nr_irqs);
@@ -684,9 +746,13 @@ static void stm32_gpio_domain_free(struct irq_domain *d, unsigned int virq,
 		pctl->irqmux_map &= ~BIT(hwirq);
 		spin_unlock_irqrestore(&pctl->irqmux_lock, flags);
 	}
+
+	bank->virq[hwirq] = 0;
 }
 
 static const struct irq_domain_ops stm32_gpio_domain_ops = {
+	.select		= stm32_gpio_domain_select,
+	.match		= stm32_gpio_domain_match,
 	.translate	= stm32_gpio_domain_translate,
 	.alloc		= stm32_gpio_domain_alloc,
 	.free		= stm32_gpio_domain_free,
@@ -1693,20 +1759,6 @@ static int stm32_gpiolib_register_bank(struct stm32_pinctrl *pctl, struct fwnode
 	bank->rif_control = pctl->match_data->rif_control;
 	spin_lock_init(&bank->lock);
 
-	if (pctl->domain) {
-		/* create irq hierarchical domain */
-		bank->fwnode = fwnode;
-
-		bank->domain = irq_domain_create_hierarchy(pctl->domain, 0, STM32_GPIO_IRQ_LINE,
-							   bank->fwnode, &stm32_gpio_domain_ops,
-							   bank);
-
-		if (!bank->domain) {
-			err = -ENODEV;
-			goto err_clk;
-		}
-	}
-
 	names = devm_kcalloc(dev, npins, sizeof(char *), GFP_KERNEL);
 	for (i = 0; i < npins; i++) {
 		stm32_pin = stm32_pctrl_get_desc_pin_from_gpio(pctl, bank, i);
@@ -1732,11 +1784,19 @@ static int stm32_gpiolib_register_bank(struct stm32_pinctrl *pctl, struct fwnode
 	return err;
 }
 
-static struct irq_domain *stm32_pctrl_get_irq_domain(struct platform_device *pdev)
+static void stm32_pctrl_remove_irq(void *data)
 {
-	struct device_node *np = pdev->dev.of_node;
+	struct irq_domain *domain = data;
+
+	irq_domain_remove(domain);
+}
+
+static struct irq_domain *stm32_pctrl_get_irq_domain(struct stm32_pinctrl *pctl)
+{
+	struct device_node *np = pctl->dev->of_node;
 	struct device_node *parent;
-	struct irq_domain *domain;
+	struct irq_domain *parent_domain, *domain;
+	int ret;
 
 	if (!of_find_property(np, "interrupt-parent", NULL))
 		return NULL;
@@ -1745,12 +1805,25 @@ static struct irq_domain *stm32_pctrl_get_irq_domain(struct platform_device *pde
 	if (!parent)
 		return ERR_PTR(-ENXIO);
 
-	domain = irq_find_host(parent);
+	parent_domain = irq_find_host(parent);
 	of_node_put(parent);
-	if (!domain)
+	if (!parent_domain)
 		/* domain not registered yet */
 		return ERR_PTR(-EPROBE_DEFER);
 
+	domain = irq_domain_add_hierarchy(parent_domain, 0, STM32_GPIO_IRQ_LINE,
+					  np, &stm32_gpio_domain_ops, pctl);
+	if (!domain) {
+		dev_err(pctl->dev, "Could not register pinctrl domain\n");
+		return ERR_PTR(-ENXIO);
+	}
+
+	ret = devm_add_action_or_reset(pctl->dev, stm32_pctrl_remove_irq, domain);
+	if (ret) {
+		irq_domain_remove(domain);
+		return ERR_PTR(ret);
+	}
+
 	return domain;
 }
 
@@ -1875,8 +1948,10 @@ int stm32_pctl_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, pctl);
 
+	pctl->dev = dev;
+
 	/* check for IRQ controller (may require deferred probe) */
-	pctl->domain = stm32_pctrl_get_irq_domain(pdev);
+	pctl->domain = stm32_pctrl_get_irq_domain(pctl);
 	if (IS_ERR(pctl->domain))
 		return PTR_ERR(pctl->domain);
 	if (!pctl->domain)
@@ -1893,7 +1968,6 @@ int stm32_pctl_probe(struct platform_device *pdev)
 
 	spin_lock_init(&pctl->irqmux_lock);
 
-	pctl->dev = dev;
 	pctl->match_data = match_data;
 
 	/*  get optional package information */
-- 
2.39.2

