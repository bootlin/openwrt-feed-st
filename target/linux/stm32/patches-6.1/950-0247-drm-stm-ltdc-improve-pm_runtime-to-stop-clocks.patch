From 9c7a0f7c95687551daa654d7b60579cd1fe3c76c Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Tue, 16 Nov 2021 16:01:31 +0100
Subject: [PATCH 247/529] drm/stm: ltdc: improve pm_runtime to stop clocks

In the LTDC driver, pm_runtime was wrongly used and caused the LTDC pixel
clock to be systematically enabled in the clock summary.

After one simple use of the LTDC by activating and deactivating,
the clock summary results as below:

~# cat /sys/kernel/debug/clk/clk_summary | grep ltdc_px
    ltdc_px    1    1    0    29700000    0    0    50000    N

Since the device do not have any idle callback, 'pm_runtime_put_sync'
calls were replaced by 'pm_runtime_put_sync_suspend'.

By doing so, the driver's runtime is active each time registers must be
accessed and deactivated after use. Therefore, it increments the clock pm
counter only when it is active, displaying the right information and
resulting in the below clock summary after deactivation.

~# cat /sys/kernel/debug/clk/clk_summary | grep ltdc_px
    ltdc_px    0    0    0    29700000    0    0    50000    N

Signed-off-by: Raphael Gallais-Pou <raphael.gallais-pou@foss.st.com>
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Change-Id: I5aaf5efe4d05c6d2656f45ac21fc6320f85a185e
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/228540
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -776,10 +776,17 @@ static void ltdc_crtc_atomic_enable(stru
 {
 	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
 	struct drm_device *ddev = crtc->dev;
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
-	pm_runtime_get_sync(ddev->dev);
+	if (!pm_runtime_active(ddev->dev)) {
+		ret = pm_runtime_get_sync(ddev->dev);
+		if (ret) {
+			DRM_ERROR("Failed to set mode, cannot get sync\n");
+			return;
+		}
+	}
 
 	/* Sets the background color value */
 	regmap_write(ldev->regmap, LTDC_BCCR, BCCR_BCBLACK);
@@ -817,7 +824,7 @@ static void ltdc_crtc_atomic_disable(str
 	if (!ldev->caps.plane_reg_shadow)
 		regmap_set_bits(ldev->regmap, LTDC_SRCR, SRCR_IMR);
 
-	pm_runtime_put_sync(ddev->dev);
+	pm_runtime_put_sync_suspend(ddev->dev);
 
 	/*  clear interrupt error counters */
 	mutex_lock(&ldev->err_lock);
@@ -1265,6 +1272,7 @@ static void ltdc_plane_atomic_update(str
 				     struct drm_atomic_state *state)
 {
 	struct ltdc_device *ldev = plane_to_ltdc(plane);
+	struct drm_device *ddev = plane->dev;
 	struct drm_plane_state *newstate = drm_atomic_get_new_plane_state(state,
 									  plane);
 	struct drm_framebuffer *fb = newstate->fb;
@@ -1295,6 +1303,9 @@ static void ltdc_plane_atomic_update(str
 			 newstate->crtc_w, newstate->crtc_h,
 			 newstate->crtc_x, newstate->crtc_y);
 
+	if (!pm_runtime_active(ddev->dev))
+		return;
+
 	regmap_read(ldev->regmap, LTDC_BPCR, &bpcr);
 
 	ahbp = (bpcr & BPCR_AHBP) >> 16;
@@ -1513,8 +1524,12 @@ static void ltdc_plane_atomic_disable(st
 	struct drm_plane_state *oldstate = drm_atomic_get_old_plane_state(state,
 									  plane);
 	struct ltdc_device *ldev = plane_to_ltdc(plane);
+	struct drm_device *ddev = plane->dev;
 	u32 lofs = plane->index * LAY_OFS;
 
+	if (!pm_runtime_active(ddev->dev))
+		return;
+
 	/* Disable layer */
 	regmap_write_bits(ldev->regmap, LTDC_L1CR + lofs, LXCR_LEN | LXCR_CLUTEN |  LXCR_HMEN, 0);
 
