From 06875cd3f077fa9e3904a140d3776b66fe3f60c9 Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Tue, 3 Oct 2023 11:38:09 +0200
Subject: [PATCH 0533/1141] dmaengine: stm32-dma3: double word data width can't
 be used on AHB port

Limit data width to word on AHB port (and then check word capability
against transfer length and destination address), because double word data
width is forbidden when AHB port is selected.

This issue has been seen with MEM_TO_MEM transfer. The driver configured
the maximum data width without checking the port used.

Change-Id: I276d85c6645905760a9cbf7208d668fb8820cbf8
Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/331189
Reviewed-by: Patrice CHOTARD <patrice.chotard@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Tested-by: Patrice CHOTARD <patrice.chotard@foss.st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
---
 drivers/dma/stm32-dma3.c | 26 +++++++++++++++++---------
 1 file changed, 17 insertions(+), 9 deletions(-)

diff --git a/drivers/dma/stm32-dma3.c b/drivers/dma/stm32-dma3.c
index c7c775651611..d0040a44d813 100644
--- a/drivers/dma/stm32-dma3.c
+++ b/drivers/dma/stm32-dma3.c
@@ -841,12 +841,13 @@ static int stm32_dma3_chan_prep_hwdesc(struct stm32_dma3_chan *chan,
 	return stm32_dma3_check_user_setting(hwdesc);
 }
 
-static enum dma_slave_buswidth stm32_dma3_get_max_dw(u32 len, dma_addr_t addr, u32 chan_max_burst)
+static enum dma_slave_buswidth stm32_dma3_get_max_dw(u32 len, dma_addr_t addr, u32 chan_max_burst,
+						     enum stm32_dma3_ap port)
 {
 	enum dma_slave_buswidth max_dw = DMA_SLAVE_BUSWIDTH_16_BYTES;
 
-	/* If chan_max_burst is 0, it means the channel has no FIFO */
-	if (!chan_max_burst)
+	/* If chan_max_burst is 0, it means the channel has no FIFO; Dword is forbidden on AHB */
+	if (!chan_max_burst || port == AP_AHB)
 		max_dw = DMA_SLAVE_BUSWIDTH_8_BYTES;
 
 	/* len and addr must be a multiple of dw */
@@ -893,6 +894,7 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 	u32 _ccr, _ctr1 = 0, _ctr2 = 0, _ctr3 = 0;
 	u32 ch_conf = chan->dt_config.ch_conf;
 	u32 tr_conf = chan->dt_config.tr_conf;
+	enum stm32_dma3_ap port;
 
 	dev_dbg(chan2dev(chan),	"%s: %s src_addr=%pad dst_addr=%pad\n",
 		__func__, dmaengine_get_direction_text(dir), &src_addr, &dst_addr);
@@ -956,7 +958,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 	switch (dir) {
 	case DMA_MEM_TO_DEV:
 		/* Set destination (device) data width and burst */
-		ddw = min_t(u32, ddw, stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst));
+		port = FIELD_GET(STM32_DMA3_DT_DAP, tr_conf);
+		ddw = min_t(u32, ddw, stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst, port));
 		dbl_max = min_t(u32, dbl_max, stm32_dma3_get_max_burst(len, ddw, chan->max_burst,
 								       dst_max_burst));
 
@@ -965,7 +968,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 			sdw = ddw;
 			sbl_max = dbl_max;
 		} else {
-			sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst);
+			port = FIELD_GET(STM32_DMA3_DT_SAP, tr_conf);
+			sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst, port);
 			sbl_max = stm32_dma3_get_max_burst(len, sdw, chan->max_burst,
 							   src_max_burst);
 		}
@@ -993,7 +997,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 
 	case DMA_DEV_TO_MEM:
 		/* Set source (device) data width and burst */
-		sdw = min_t(u32, sdw, stm32_dma3_get_max_dw(len, src_addr, chan->max_burst));
+		port = FIELD_GET(STM32_DMA3_DT_SAP, tr_conf);
+		sdw = min_t(u32, sdw, stm32_dma3_get_max_dw(len, src_addr, chan->max_burst, port));
 		sbl_max = min_t(u32, sbl_max, stm32_dma3_get_max_burst(len, sdw, chan->max_burst,
 								       src_max_burst));
 
@@ -1002,7 +1007,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 			ddw = sdw;
 			dbl_max = sbl_max;
 		} else {
-			ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst);
+			port = FIELD_GET(STM32_DMA3_DT_DAP, tr_conf);
+			ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst, port);
 			dbl_max = stm32_dma3_get_max_burst(len, ddw, chan->max_burst,
 							   dst_max_burst);
 		}
@@ -1032,7 +1038,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 		/* Set source (memory) data width and burst */
 		init_dw = sdw;
 		init_bl_max = sbl_max;
-		sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst);
+		port = FIELD_GET(STM32_DMA3_DT_SAP, tr_conf);
+		sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst, port);
 		sbl_max = stm32_dma3_get_max_burst(len, sdw, chan->max_burst, src_max_burst);
 		if (chan->config_set & STM32_DMA3_CFG_SET_DMA) {
 			sdw = min_t(u32, init_dw, sdw);
@@ -1044,7 +1051,8 @@ static int stm32_dma3_chan_prep_hw(struct stm32_dma3_chan *chan, enum dma_transf
 		/* Set destination (memory) data width and burst */
 		init_dw = ddw;
 		init_bl_max = dbl_max;
-		ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst);
+		port = FIELD_GET(STM32_DMA3_DT_DAP, tr_conf);
+		ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst, port);
 		dbl_max = stm32_dma3_get_max_burst(len, ddw, chan->max_burst, dst_max_burst);
 		if (chan->config_set & STM32_DMA3_CFG_SET_DMA) {
 			ddw = min_t(u32, init_dw, ddw);
-- 
2.39.2

