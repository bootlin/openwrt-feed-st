From f0be5cc292e2a7ac2736fa3d11c9d8efa43939e5 Mon Sep 17 00:00:00 2001
From: Hugues Fruchet <hugues.fruchet@foss.st.com>
Date: Mon, 7 Nov 2022 12:14:01 +0100
Subject: [PATCH 0295/1141] media: stm32-dcmipp: multiple capture support

Make subdev s_stream atomic so that if several captures are made
at same time, subdev are streamon/off only once.

Signed-off-by: Hugues Fruchet <hugues.fruchet@foss.st.com>
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-bytecap.c    | 51 ++++++++++++++++--
 .../st/stm32/stm32-dcmipp/dcmipp-pixelcap.c   | 53 +++++++++++++++++--
 2 files changed, 95 insertions(+), 9 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
@@ -447,9 +447,12 @@ static int dcmipp_pipeline_s_stream(stru
 				    int state)
 {
 	struct media_entity *entity = &vcap->vdev.entity;
+	struct media_device *mdev = entity->graph_obj.mdev;
 	struct v4l2_subdev *subdev;
 	struct media_pad *pad;
-	int ret;
+	int ret = 0;
+
+	mutex_lock(&mdev->graph_mutex);
 
 	/* Start/stop all entities within pipeline */
 	while (1) {
@@ -464,19 +467,44 @@ static int dcmipp_pipeline_s_stream(stru
 		entity = pad->entity;
 		subdev = media_entity_to_v4l2_subdev(entity);
 
+		if (state) {
+			/* Increment stream_count to indicate that entity is streamon */
+			entity->stream_count++;
+
+			/*
+			 * Do not streamon entities already started and streamon
+			 * by another capture pipeline
+			 */
+			if (entity->stream_count > 1)
+				continue;
+		} else {
+			/* Decrement stream_count to indicate that entity is streamoff. */
+			entity->stream_count--;
+
+			/*
+			 * Only streamoff if entity is not owned anymore
+			 * by other pipelines
+			 */
+			if (entity->stream_count > 0)
+				continue;
+		}
+
 		ret = v4l2_subdev_call(subdev, video, s_stream, state);
 		if (ret < 0 && ret != -ENOIOCTLCMD) {
 			dev_err(vcap->dev, "%s: \"%s\" failed to %s streaming (%d)\n",
 				__func__, subdev->name,
 				state ? "start" : "stop", ret);
 
-			return ret;
+			goto out;
 		}
 
 		dev_dbg(vcap->dev, "\"%s\" is %s\n",
 			subdev->name, state ? "started" : "stopped");
 	}
 
+out:
+	mutex_unlock(&mdev->graph_mutex);
+
 	return 0;
 }
 
@@ -500,6 +528,8 @@ static int dcmipp_bytecap_start_streamin
 {
 	struct dcmipp_bytecap_device *vcap = vb2_get_drv_priv(vq);
 	struct media_entity *entity = &vcap->vdev.entity;
+	struct media_device *mdev = entity->graph_obj.mdev;
+	struct media_pipeline *pipe;
 	struct dcmipp_buf *buf, *node;
 	int ret;
 
@@ -521,8 +551,21 @@ static int dcmipp_bytecap_start_streamin
 		goto err_pm_put;
 	}
 
-	/* Start the media pipeline */
-	ret = media_pipeline_start(entity->pads, &vcap->pipe);
+	/*
+	 * Start the media pipeline
+	 *
+	 * Pipeline is shared between all elements of the pipeline
+	 * including video capture nodes.
+	 * Instead of creating a common media_pipeline struct
+	 * global variable, use the one of the first capture
+	 * node. All the elements of the pipeline -including
+	 * other capture nodes- will be then assigned to this
+	 * pipeline (entity->pipe) in __media_pipeline_start().
+	 */
+	mutex_lock(&mdev->graph_mutex);
+	pipe = entity->pads[0].pipe ? : &vcap->pipe;
+	ret = __video_device_pipeline_start(&vcap->vdev, pipe);
+	mutex_unlock(&mdev->graph_mutex);
 	if (ret) {
 		dev_err(vcap->dev, "%s: Failed to start streaming, media pipeline start error (%d)\n",
 			__func__, ret);
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
@@ -580,9 +580,12 @@ static int dcmipp_pipeline_s_stream(stru
 				    int state)
 {
 	struct media_entity *entity = &vcap->vdev.entity;
+	struct media_device *mdev = entity->graph_obj.mdev;
 	struct v4l2_subdev *subdev;
 	struct media_pad *pad;
-	int ret;
+	int ret = 0;
+
+	mutex_lock(&mdev->graph_mutex);
 
 	/* Start/stop all entities within pipeline */
 	while (1) {
@@ -597,20 +600,45 @@ static int dcmipp_pipeline_s_stream(stru
 		entity = pad->entity;
 		subdev = media_entity_to_v4l2_subdev(entity);
 
+		if (state) {
+			/* Increment stream_count to indicate that entity is streamon */
+			entity->stream_count++;
+
+			/*
+			 * Do not streamon entities already started and streamon
+			 * by another capture pipeline
+			 */
+			if (entity->stream_count > 1)
+				continue;
+		} else {
+			/* Decrement stream_count to indicate that entity is streamoff. */
+			entity->stream_count--;
+
+			/*
+			 * Only streamoff if entity is not owned anymore
+			 * by other pipelines
+			 */
+			if (entity->stream_count > 0)
+				continue;
+		}
+
 		ret = v4l2_subdev_call(subdev, video, s_stream, state);
 		if (ret < 0 && ret != -ENOIOCTLCMD) {
 			dev_err(vcap->dev, "%s: \"%s\" failed to %s streaming (%d)\n",
 				__func__, subdev->name,
 				state ? "start" : "stop", ret);
 
-			return ret;
+			goto out;
 		}
 
 		dev_dbg(vcap->dev, "\"%s\" is %s\n",
 			subdev->name, state ? "started" : "stopped");
 	}
 
-	return 0;
+out:
+	mutex_unlock(&mdev->graph_mutex);
+
+	return ret;
 }
 
 static int dcmipp_start_capture(struct dcmipp_pixelcap_device *vcap,
@@ -644,6 +672,8 @@ static int dcmipp_pixelcap_start_streami
 {
 	struct dcmipp_pixelcap_device *vcap = vb2_get_drv_priv(vq);
 	struct media_entity *entity = &vcap->vdev.entity;
+	struct media_device *mdev = entity->graph_obj.mdev;
+	struct media_pipeline *pipe;
 	struct dcmipp_buf *buf, *node;
 	int ret;
 
@@ -662,8 +692,21 @@ static int dcmipp_pixelcap_start_streami
 		goto err_pm_put;
 	}
 
-	/* Start the media pipeline */
-	ret = media_pipeline_start(entity, &vcap->pipe);
+	/*
+	 * Start the media pipeline
+	 *
+	 * Pipeline is shared between all elements of the pipeline
+	 * including video capture nodes.
+	 * Instead of creating a common media_pipeline struct
+	 * global variable, use the one of the first capture
+	 * node. All the elements of the pipeline -including
+	 * other capture nodes- will be then assigned to this
+	 * pipeline (entity->pipe) in __media_pipeline_start().
+	 */
+	mutex_lock(&mdev->graph_mutex);
+	pipe = entity->pads[0].pipe ? : &vcap->pipe;
+	ret = __video_device_pipeline_start(&vcap->vdev, pipe);
+	mutex_unlock(&mdev->graph_mutex);
 	if (ret) {
 		dev_err(vcap->dev, "%s: Failed to start streaming, media pipeline start error (%d)\n",
 			__func__, ret);
