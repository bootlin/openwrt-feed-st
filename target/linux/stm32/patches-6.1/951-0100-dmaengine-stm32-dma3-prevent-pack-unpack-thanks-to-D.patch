From eb69a016ee53bd5839608e7cb72914149bfb1273 Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Thu, 1 Dec 2022 15:59:40 +0100
Subject: [PATCH 0100/1141] dmaengine: stm32-dma3: prevent pack/unpack thanks
 to DT configuration

When source data width/burst and destination data width/burst are
different, data are packed or unpacked in DMA3 channel FIFO, using
CxTR1.PAM.
Data are pushed out from DMA3 channel FIFO when the destination burst
length (= data width * burst) is reached.
If the transfer is stopped before CxBR1.BNDT = 0, and if some bytes are
packed/unpacked in the DMA3 channel FIFO, these bytes are lost.
DMA3 channel FIFO has no flush capability, only reset.
To avoid potential bytes lost, pack/unpack must be prevented by setting
memory data width/burst equal to peripheral data width/burst.
Memory accesses will be penalized. But it is the only way to avoid bytes
lost.

Prevent pack/unpack feature can be activated by setting bit 16 of DMA3
Transfer requirements bitfield (tr_conf).

Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Change-Id: I2cb2aabfb20a3e7966c4b874c351c37cabdb72a2
---
 drivers/dma/stm32-dma3.c | 34 ++++++++++++++++++++++++----------
 1 file changed, 24 insertions(+), 10 deletions(-)

--- a/drivers/dma/stm32-dma3.c
+++ b/drivers/dma/stm32-dma3.c
@@ -299,6 +299,8 @@ enum g_data_width {
 #define STM32_DMA3_DT_BREQ		BIT(8)		/* CTR2_BREQ */
 #define STM32_DMA3_DT_PFREQ		BIT(9)		/* CTR2_PFREQ */
 #define STM32_DMA3_DT_TCEM		GENMASK(13, 12)	/* CTR2_TCEM */
+#define STM32_DMA3_DT_NOPACK		BIT(16)		/* CTR1_PAM */
+
 /* .tr_conf_ext */
 #define STM32_DMA3_DT_SAO		GENMASK(12, 0)	/* CTR3_SAO */
 #define STM32_DMA3_DT_SDEC		BIT(13)		/* CBR1_SDEC */
@@ -807,16 +809,22 @@ static int stm32_dma3_chan_prep_hw(struc
 
 	switch (dir) {
 	case DMA_MEM_TO_DEV:
+		/* Set destination (device) data width and burst */
+		ddw = min_t(u32, ddw, stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst));
+		dbl_max = min_t(u32, dbl_max, stm32_dma3_get_max_burst(len, ddw, chan->max_burst));
+
 		/* Set source (memory) data width and burst */
-		sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst);
+		if (!!FIELD_GET(STM32_DMA3_DT_NOPACK, tr_conf)) {
+			sdw = ddw;
+			sbl_max = dbl_max;
+		} else {
+			sdw = stm32_dma3_get_max_dw(len, src_addr, chan->max_burst);
+			sbl_max = stm32_dma3_get_max_burst(len, sdw, chan->max_burst);
+		}
+
 		_ctr1 |= FIELD_PREP(CTR1_SDW_LOG2, ilog2(sdw));
-		sbl_max = stm32_dma3_get_max_burst(len, sdw, chan->max_burst);
 		_ctr1 |= FIELD_PREP(CTR1_SBL_1, sbl_max - 1);
-
-		/* Set destination (device) data width and burst */
-		ddw = min_t(u32, ddw, stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst));
 		_ctr1 |= FIELD_PREP(CTR1_DDW_LOG2, ilog2(ddw));
-		dbl_max = min_t(u32, dbl_max, stm32_dma3_get_max_burst(len, ddw, chan->max_burst));
 		_ctr1 |= FIELD_PREP(CTR1_DBL_1, dbl_max - 1);
 
 		/* TODO: packing is not supported if PFREQ=1 */
@@ -838,14 +846,20 @@ static int stm32_dma3_chan_prep_hw(struc
 	case DMA_DEV_TO_MEM:
 		/* Set source (device) data width and burst */
 		sdw = min_t(u32, sdw, stm32_dma3_get_max_dw(len, src_addr, chan->max_burst));
-		_ctr1 |= FIELD_PREP(CTR1_SDW_LOG2, ilog2(sdw));
 		sbl_max = min_t(u32, sbl_max, stm32_dma3_get_max_burst(len, sdw, chan->max_burst));
-		_ctr1 |= FIELD_PREP(CTR1_SBL_1, sbl_max - 1);
 
 		/* Set destination (memory) data width and burst */
-		ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst);
+		if (!!FIELD_GET(STM32_DMA3_DT_NOPACK, tr_conf)) {
+			ddw = sdw;
+			dbl_max = sbl_max;
+		} else {
+			ddw = stm32_dma3_get_max_dw(len, dst_addr, chan->max_burst);
+			dbl_max = stm32_dma3_get_max_burst(len, ddw, chan->max_burst);
+		}
+
+		_ctr1 |= FIELD_PREP(CTR1_SDW_LOG2, ilog2(sdw));
+		_ctr1 |= FIELD_PREP(CTR1_SBL_1, sbl_max - 1);
 		_ctr1 |= FIELD_PREP(CTR1_DDW_LOG2, ilog2(ddw));
-		dbl_max = stm32_dma3_get_max_burst(len, ddw, chan->max_burst);
 		_ctr1 |= FIELD_PREP(CTR1_DBL_1, dbl_max - 1);
 
 		/* TODO: packing is not supported if PFREQ=1 */
