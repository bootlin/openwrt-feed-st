From 844a35bcba96297d9182003cb200c4b15f44f44b Mon Sep 17 00:00:00 2001
From: Lionel Debieve <lionel.debieve@foss.st.com>
Date: Tue, 22 Aug 2023 09:52:27 +0200
Subject: [PATCH 0429/1141] drivers: stm32-sys-bus: add check access interface

Add a new interface to control if access is available
for the kernel.

Signed-off-by: Lionel Debieve <lionel.debieve@foss.st.com>
Change-Id: Ia48218ad567ac715285dcf0b79a37e598e34e11b
---
 drivers/bus/stm32_sys_bus.c | 51 ++++++++++++++++++++++++++++++++++++-
 drivers/bus/stm32_sys_bus.h |  1 +
 2 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/drivers/bus/stm32_sys_bus.c b/drivers/bus/stm32_sys_bus.c
index 7444d75c97d6..c94ed57ce8c4 100644
--- a/drivers/bus/stm32_sys_bus.c
+++ b/drivers/bus/stm32_sys_bus.c
@@ -166,10 +166,59 @@ static int stm32_rifsc_get_access_by_node(struct sys_bus_data *pdata, struct dev
 	return stm32_rifsc_get_access_by_id(id);
 }
 
-int stm32_rifsc_get_access_by_id(u32 id)
+int stm32_rifsc_check_access_by_id(u32 id)
 {
 	struct sys_bus_data *pdata = bus_data;
+	u32 reg_offset, reg_id, sec_reg_value, cid_reg_value;
+	void __iomem *addr;
+
+	if (id >= STM32MP25_RIFSC_ENTRIES)
+		return -EINVAL;
+
+	/*
+	 * RIFSC_RISC_PRIVCFGRx and RIFSC_RISC_SECCFGRx both handle configuration access for
+	 * 32 peripherals. On the other hand, there is one _RIFSC_RISC_PERx_CIDCFGR register
+	 * per peripheral
+	 */
+	reg_id = id / IDS_PER_RISC_SEC_PRIV_REGS;
+	reg_offset = id % IDS_PER_RISC_SEC_PRIV_REGS;
+	sec_reg_value = readl(pdata->sys_bus_base + RIFSC_RISC_SECCFGR0 + 0x4 * reg_id);
+	cid_reg_value = readl(pdata->sys_bus_base + RIFSC_RISC_PER0_CIDCFGR + 0x8 * id);
+
+	/* Check security configuration */
+	if (sec_reg_value & BIT(reg_offset)) {
+		dev_dbg(pdata->dev, "Invalid security configuration for peripheral: %d\n", id);
+		return -EACCES;
+	}
+
+	/* Skip CID check if CID filtering isn't enabled */
+	if (!(cid_reg_value & CIDCFGR_CFEN))
+		return 0;
+
+	if (FIELD_GET(RIFSC_RISC_SCID_MASK, cid_reg_value) == RIF_CID1)
+		return 0;
+
+	/*
+	 * First check conditions for semaphore mode, which doesn't take into account static CID.
+	 * CID for Cortex A35 is RIF_CID1.
+	 */
+	if (cid_reg_value & CIDCFGR_SEMEN) {
+		addr = pdata->sys_bus_base + RIFSC_RISC_PER0_SEMCR + 0x8 * id;
+
+		/* Check that CID1 has the semaphore */
+		if (!stm32_rif_is_semaphore_available(addr) &&
+		    (FIELD_GET(RIFSC_RISC_SCID_MASK, readl(addr)) == RIF_CID1)) {
+			return 0;
+		}
+	}
+
+	return -EACCES;
+}
+
+int stm32_rifsc_get_access_by_id(u32 id)
+{
 	int err;
+	struct sys_bus_data *pdata = bus_data;
 	u32 reg_offset, reg_id, sec_reg_value, cid_reg_value;
 
 	if (id >= STM32MP25_RIFSC_ENTRIES)
diff --git a/drivers/bus/stm32_sys_bus.h b/drivers/bus/stm32_sys_bus.h
index 1e1260947700..8e5a3bba2cff 100644
--- a/drivers/bus/stm32_sys_bus.h
+++ b/drivers/bus/stm32_sys_bus.h
@@ -8,5 +8,6 @@
 #include <linux/types.h>
 
 int stm32_rifsc_get_access_by_id(u32 id);
+int stm32_rifsc_check_access_by_id(u32 id);
 
 #endif /* __ARCH_ARM_MACH_STM32MP25_SYSTEM_BUS */
-- 
2.39.2

