From a98c7424d8012a9668eb2f57b4ed0259d3a0d734 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Tue, 23 Jan 2024 10:36:05 +0100
Subject: [PATCH 0838/1141] media: dcmipp: isp: removal of v4l2-ctrl based isp
 controls

Remove all v4l2-ctrl based isp control since this is now done
via the isp-param meta output video device.
With the removal of controls, irq handler is also no more
necessary since no operation are necessary anymore on each
VSYNC.

Change-Id: I6ce2be13b013767cd84148b60e292d6bdac77807
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/353669
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
Reviewed-by: Hugues FRUCHET <hugues.fruchet@st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-isp.c        | 385 +-----------------
 1 file changed, 2 insertions(+), 383 deletions(-)

diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
index d36b6da041d9..6d742e00d4ca 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
@@ -16,7 +16,6 @@
 #include <linux/vmalloc.h>
 #include <linux/v4l2-mediabus.h>
 #include <media/mipi-csi2.h>
-#include <media/v4l2-ctrls.h>
 #include <media/v4l2-event.h>
 #include <media/v4l2-rect.h>
 #include <media/v4l2-subdev.h>
@@ -41,14 +40,6 @@
 #define DCMIPP_P1SRCR_FIRSTLINEDEL_MASK GENMASK(14, 12)
 #define DCMIPP_P1SRCR_CROPEN BIT(15)
 
-#define DCMIPP_P1BPRCR (0x824)
-#define DCMIPP_P1BPRCR_ENABLE BIT(0)
-#define DCMIPP_P1BPRCR_STRENGTH_SHIFT 1
-#define DCMIPP_P1BPRCR_STRENGTH_MASK GENMASK(3, 1)
-
-#define DCMIPP_P1BPRSR (0x828)
-#define DCMIPP_P1BPRSR_BADCNT_MASK GENMASK(11, 0)
-
 #define DCMIPP_P1DECR (0x830)
 #define DCMIPP_P1DECR_ENABLE BIT(0)
 #define DCMIPP_P1DECR_HDEC_SHIFT 1
@@ -56,26 +47,6 @@
 #define DCMIPP_P1DECR_VDEC_SHIFT 3
 #define DCMIPP_P1DECR_VDEC_MASK GENMASK(4, 3)
 
-#define DCMIPP_P1BLCCR (0x840)
-#define DCMIPP_P1BLCCR_ENABLE BIT(0)
-#define DCMIPP_P1BLCCR_BLCB_SHIFT 8
-#define DCMIPP_P1BLCCR_BLCB_MASK GENMASK(15, 8)
-#define DCMIPP_P1BLCCR_BLCG_SHIFT 16
-#define DCMIPP_P1BLCCR_BLCG_MASK GENMASK(23, 16)
-#define DCMIPP_P1BLCCR_BLCR_SHIFT 24
-#define DCMIPP_P1BLCCR_BLCR_MASK GENMASK(31, 24)
-
-#define DCMIPP_P1EXCR1 (0x844)
-#define DCMIPP_P1EXCR1_ENABLE BIT(0)
-#define DCMIPP_P1EXCR1_MULTR_SHIFT 20
-#define DCMIPP_P1EXCR1_SHFR_SHIFT 28
-
-#define DCMIPP_P1EXCR2 (0x848)
-#define DCMIPP_P1EXCR2_MULTB_SHIFT 4
-#define DCMIPP_P1EXCR2_SHFB_SHIFT 12
-#define DCMIPP_P1EXCR2_MULTG_SHIFT 20
-#define DCMIPP_P1EXCR2_SHFG_SHIFT 28
-
 #define DCMIPP_P1DMCR (0x870)
 #define DCMIPP_P1DMCR_ENABLE BIT(0)
 #define DCMIPP_P1DMCR_TYPE_SHIFT 1
@@ -84,14 +55,6 @@
 #define DCMIPP_P1DMCR_TYPE_GRBG 0x1
 #define DCMIPP_P1DMCR_TYPE_GBRG 0x2
 #define DCMIPP_P1DMCR_TYPE_BGGR 0x3
-#define DCMIPP_P1DMCR_PEAK_SHIFT 16
-#define DCMIPP_P1DMCR_PEAK_MASK GENMASK(19, 16)
-#define DCMIPP_P1DMCR_LINEV_SHIFT 20
-#define DCMIPP_P1DMCR_LINEV_MASK GENMASK(23, 20)
-#define DCMIPP_P1DMCR_LINEH_SHIFT 24
-#define DCMIPP_P1DMCR_LINEH_MASK GENMASK(27, 24)
-#define DCMIPP_P1DMCR_EDGE_SHIFT 28
-#define DCMIPP_P1DMCR_EDGE_MASK GENMASK(31, 28)
 
 #define DCMIPP_P1CCCR (0x880)
 #define DCMIPP_P1CCCR_ENABLE BIT(0)
@@ -105,36 +68,6 @@
 #define DCMIPP_P1CCBR1 (0x894)
 #define DCMIPP_P1CCBR2 (0x898)
 
-#define DCMIPP_P1CTCR1 (0x8a0)
-#define DCMIPP_P1CTCR1_ENABLE BIT(0)
-#define DCMIPP_P1CTCR1_LUM0_SHIFT 9
-
-#define DCMIPP_P1CTCR2 (0x8a4)
-#define DCMIPP_P1CTCR2_LUM4_SHIFT 1
-#define DCMIPP_P1CTCR2_LUM3_SHIFT 9
-#define DCMIPP_P1CTCR2_LUM2_SHIFT 17
-#define DCMIPP_P1CTCR2_LUM1_SHIFT 25
-
-#define DCMIPP_P1CTCR3 (0x8a8)
-#define DCMIPP_P1CTCR3_LUM8_SHIFT 1
-#define DCMIPP_P1CTCR3_LUM7_SHIFT 9
-#define DCMIPP_P1CTCR3_LUM6_SHIFT 17
-#define DCMIPP_P1CTCR3_LUM5_SHIFT 25
-
-#define DCMIPP_P1CRSZR (0x908)
-#define DCMIPP_P1CRSZR_HSIZE_SHIFT 0
-#define DCMIPP_P1CRSZR_HSIZE_MASK GENMASK(11, 0)
-#define DCMIPP_P1CRSZR_VSIZE_SHIFT 16
-#define DCMIPP_P1CRSZR_VSIZE_MASK GENMASK(27, 16)
-#define DCMIPP_P1CRSZR_ENABLE BIT(31)
-
-#define DCMIPP_P1DSCR (0x910)
-#define DCMIPP_P1DSCR_HDIV_SHIFT 0
-#define DCMIPP_P1DSCR_HDIV_MASK GENMASK(9, 0)
-#define DCMIPP_P1DSCR_VDIV_SHIFT 16
-#define DCMIPP_P1DSCR_VDIV_MASK GENMASK(25, 16)
-#define DCMIPP_P1DSCR_ENABLE BIT(31)
-
 #define IS_SINK(pad) (!(pad))
 #define IS_SRC(pad)  ((pad))
 #define PAD_STR(pad) (IS_SRC((pad))) ? "src" : "sink"
@@ -243,22 +176,10 @@ struct dcmipp_isp_device {
 	struct v4l2_rect crop;
 	struct v4l2_rect compose;
 	bool streaming;
-	/* Protects the access of variables shared within the interrupt */
-	spinlock_t irqlock;
 	/* Protect this data structure */
 	struct mutex lock;
 
 	void __iomem *regs;
-
-	/* Exposure / Contrast control */
-	struct v4l2_ctrl_isp_exposure exposure;
-	bool exposure_needs_update;
-	struct v4l2_ctrl_isp_contrast contrast;
-	bool contrast_needs_update;
-	struct v4l2_ctrl_isp_color_conv color_conv;
-	bool color_conv_needs_update;
-
-	struct v4l2_ctrl_handler ctrls;
 };
 
 static const struct v4l2_mbus_framefmt fmt_default = {
@@ -272,196 +193,6 @@ static const struct v4l2_mbus_framefmt fmt_default = {
 	.xfer_func = V4L2_XFER_FUNC_DEFAULT,
 };
 
-/*
- * Functions handling controls
- */
-#define V4L2_CID_ISP_DEMOSAICING_PEAK	(V4L2_CID_USER_BASE | 0x1001)
-#define V4L2_CID_ISP_DEMOSAICING_LINEH	(V4L2_CID_USER_BASE | 0x1002)
-#define V4L2_CID_ISP_DEMOSAICING_LINEV	(V4L2_CID_USER_BASE | 0x1003)
-#define V4L2_CID_ISP_DEMOSAICING_EDGE	(V4L2_CID_USER_BASE | 0x1004)
-#define V4L2_CID_ISP_BLACKLEVEL		(V4L2_CID_USER_BASE | 0x1005)
-#define V4L2_CID_ISP_BAD_PIXEL		(V4L2_CID_USER_BASE | 0x1006)
-#define V4L2_CID_ISP_BAD_PIXEL_COUNT	(V4L2_CID_USER_BASE | 0x1007)
-
-static int dcmipp_isp_s_ctrl(struct v4l2_ctrl *ctrl)
-{
-	struct dcmipp_isp_device *isp =
-			container_of(ctrl->handler, struct dcmipp_isp_device, ctrls);
-
-	dev_dbg(isp->dev, ">> %s: ctrl->id = 0x%x\n", __func__, ctrl->id);
-
-	if (pm_runtime_get_if_in_use(isp->dev) == 0)
-		return 0;
-
-	spin_lock_irq(&isp->irqlock);
-
-	switch (ctrl->id) {
-	case V4L2_CID_ISP_DEMOSAICING_PEAK:
-		reg_clear(isp, DCMIPP_P1DMCR, DCMIPP_P1DMCR_PEAK_MASK);
-		reg_set(isp, DCMIPP_P1DMCR, ctrl->val << DCMIPP_P1DMCR_PEAK_SHIFT);
-		break;
-	case V4L2_CID_ISP_DEMOSAICING_LINEH:
-		reg_clear(isp, DCMIPP_P1DMCR, DCMIPP_P1DMCR_LINEH_MASK);
-		reg_set(isp, DCMIPP_P1DMCR, ctrl->val << DCMIPP_P1DMCR_LINEH_SHIFT);
-		break;
-	case V4L2_CID_ISP_DEMOSAICING_LINEV:
-		reg_clear(isp, DCMIPP_P1DMCR, DCMIPP_P1DMCR_LINEV_MASK);
-		reg_set(isp, DCMIPP_P1DMCR, ctrl->val << DCMIPP_P1DMCR_LINEV_SHIFT);
-		break;
-	case V4L2_CID_ISP_DEMOSAICING_EDGE:
-		reg_clear(isp, DCMIPP_P1DMCR, DCMIPP_P1DMCR_EDGE_MASK);
-		reg_set(isp, DCMIPP_P1DMCR, ctrl->val << DCMIPP_P1DMCR_EDGE_SHIFT);
-		break;
-	case V4L2_CID_ISP_BLACKLEVEL:
-		reg_write(isp, DCMIPP_P1BLCCR, ctrl->val ?
-			  ((ctrl->val << DCMIPP_P1BLCCR_BLCB_SHIFT) |
-			   (ctrl->val << DCMIPP_P1BLCCR_BLCG_SHIFT) |
-			   (ctrl->val << DCMIPP_P1BLCCR_BLCR_SHIFT) |
-			   DCMIPP_P1BLCCR_ENABLE) : 0);
-		break;
-	case V4L2_CID_ISP_BAD_PIXEL:
-		reg_write(isp, DCMIPP_P1BPRCR, ctrl->val ?
-			   ((ctrl->val - 1) << DCMIPP_P1BPRCR_STRENGTH_SHIFT) |
-			   DCMIPP_P1BPRCR_ENABLE : 0);
-		break;
-	case V4L2_CID_ISP_EXPOSURE:
-		isp->exposure = *(struct v4l2_ctrl_isp_exposure *)ctrl->p_new.p;
-		isp->exposure_needs_update = true;
-		break;
-	case V4L2_CID_ISP_CONTRAST:
-		isp->contrast = *(struct v4l2_ctrl_isp_contrast *)ctrl->p_new.p;
-		isp->contrast_needs_update = true;
-		break;
-	case V4L2_CID_ISP_COLOR_CONV:
-		isp->color_conv = *(struct v4l2_ctrl_isp_color_conv *)ctrl->p_new.p;
-		isp->color_conv_needs_update = true;
-		break;
-	}
-
-	spin_unlock_irq(&isp->irqlock);
-	pm_runtime_put(isp->dev);
-
-	return 0;
-};
-
-static int dcmipp_isp_g_ctrl(struct v4l2_ctrl *ctrl)
-{
-	struct dcmipp_isp_device *isp =
-			container_of(ctrl->handler, struct dcmipp_isp_device, ctrls);
-	int ret = 0;
-
-	if (pm_runtime_get_if_in_use(isp->dev) == 0)
-		return 0;
-
-	switch (ctrl->id) {
-	case V4L2_CID_ISP_BAD_PIXEL_COUNT:
-		ctrl->val = reg_read(isp, DCMIPP_P1BPRSR) &
-				     DCMIPP_P1BPRSR_BADCNT_MASK;
-		break;
-	}
-
-	pm_runtime_put(isp->dev);
-
-	return ret;
-};
-
-static const struct v4l2_ctrl_ops dcmipp_isp_ctrl_ops = {
-	.s_ctrl = dcmipp_isp_s_ctrl,
-};
-
-static const struct v4l2_ctrl_ops dcmipp_isp_get_ctrl_ops = {
-	.g_volatile_ctrl = dcmipp_isp_g_ctrl,
-};
-
-static const struct v4l2_ctrl_config dcmipp_isp_ctrls[] = {
-	{
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_DEMOSAICING_PEAK,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Demosaicing Peak",
-		.min		= 0,
-		.max		= 7,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_DEMOSAICING_LINEH,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Demosaicing Horizontal Line",
-		.min		= 0,
-		.max		= 7,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_DEMOSAICING_LINEV,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Demosaicing Vertical Line",
-		.min		= 0,
-		.max		= 7,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_DEMOSAICING_EDGE,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Demosaicing Edge",
-		.min		= 0,
-		.max		= 7,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_BLACKLEVEL,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "BlackLevel (RGB)",
-		.min		= 0,
-		.max		= 255,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_BAD_PIXEL,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Bad Pixel Control",
-		.min		= 0,
-		.max		= 8,
-		.step		= 1,
-		.def		= 0,
-		.flags		= 0,
-	}, {
-		.ops		= &dcmipp_isp_get_ctrl_ops,
-		.id		= V4L2_CID_ISP_BAD_PIXEL_COUNT,
-		.type		= V4L2_CTRL_TYPE_INTEGER,
-		.name		= "Bad Pixel Count",
-		.min		= 0,
-		.max		= 4095,
-		.step		= 1,
-		.def		= 0,
-		.flags		= V4L2_CTRL_FLAG_READ_ONLY | V4L2_CTRL_FLAG_VOLATILE,
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_EXPOSURE,
-		.type		= V4L2_CTRL_TYPE_ISP_EXPOSURE,
-		.name		= "ISP Exposure block control",
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_CONTRAST,
-		.type		= V4L2_CTRL_TYPE_ISP_CONTRAST,
-		.name		= "ISP Contrast block control",
-	}, {
-		.ops		= &dcmipp_isp_ctrl_ops,
-		.id		= V4L2_CID_ISP_COLOR_CONV,
-		.type		= V4L2_CTRL_TYPE_ISP_COLOR_CONV,
-		.name		= "ISP Color Conversion block control",
-	}
-};
-
 static inline unsigned int dcmipp_isp_compute_decimation(unsigned int orig,
 							 unsigned int req)
 {
@@ -908,25 +639,6 @@ static int dcmipp_isp_colorconv_auto(struct dcmipp_isp_device *isp)
 	return dcmipp_isp_colorconv_set(isp, &ccconf);
 }
 
-static int dcmipp_isp_colorconv_user(struct dcmipp_isp_device *isp)
-{
-	struct dcmipp_colorconv_config ccconf;
-
-	/* Get the color conversion matrix from the user control */
-	ccconf.conv_matrix[0] = isp->color_conv.coeff[0][1] << 16 | isp->color_conv.coeff[0][0];
-	ccconf.conv_matrix[1] = isp->color_conv.coeff[0][3] << 16 | isp->color_conv.coeff[0][2];
-	ccconf.conv_matrix[2] = isp->color_conv.coeff[1][1] << 16 | isp->color_conv.coeff[1][0];
-	ccconf.conv_matrix[3] = isp->color_conv.coeff[1][3] << 16 | isp->color_conv.coeff[1][2];
-	ccconf.conv_matrix[4] = isp->color_conv.coeff[2][1] << 16 | isp->color_conv.coeff[2][0];
-	ccconf.conv_matrix[5] = isp->color_conv.coeff[2][3] << 16 | isp->color_conv.coeff[2][2];
-
-	ccconf.enable = isp->color_conv.enable;
-	ccconf.clamping = isp->color_conv.clamping;
-	ccconf.clamping_as_rgb = isp->color_conv.clamping_as_rgb;
-
-	return dcmipp_isp_colorconv_set(isp, &ccconf);
-}
-
 static bool dcmipp_isp_is_aux_output_enabled(struct dcmipp_isp_device *isp)
 {
 	struct media_link *link;
@@ -967,7 +679,6 @@ static int dcmipp_isp_s_stream(struct v4l2_subdev *sd, int enable)
 		/* Configure Decimation */
 		reg_write(isp, DCMIPP_P1DECR, isp->decimation);
 
-		/* Configure Exposure */
 		/* Configure Demosaicing */
 		dcmipp_isp_config_demosaicing(isp);
 
@@ -979,89 +690,21 @@ static int dcmipp_isp_s_stream(struct v4l2_subdev *sd, int enable)
 
 	isp->streaming = enable;
 
-	mutex_unlock(&isp->lock);
-
-	return v4l2_ctrl_handler_setup(&isp->ctrls);
-
 out:
 	mutex_unlock(&isp->lock);
 
 	return ret;
 }
 
-static const struct v4l2_subdev_core_ops dcmipp_isp_core_ops = {
-	.subscribe_event = v4l2_ctrl_subdev_subscribe_event,
-	.unsubscribe_event = v4l2_event_subdev_unsubscribe,
-};
-
 static const struct v4l2_subdev_video_ops dcmipp_isp_video_ops = {
 	.s_stream = dcmipp_isp_s_stream,
 };
 
 static const struct v4l2_subdev_ops dcmipp_isp_ops = {
-	.core = &dcmipp_isp_core_ops,
 	.pad = &dcmipp_isp_pad_ops,
 	.video = &dcmipp_isp_video_ops,
 };
 
-/*
- * Thread handler of IT for the ISP subdev
- * Used for updating the ISP block shadow registers on the VSYNC
- * to ensure that they are properly all taken into account all at
- * once
- */
-static irqreturn_t dcmipp_isp_irq_thread(int irq, void *arg)
-{
-	struct dcmipp_isp_device *isp =
-			container_of(arg, struct dcmipp_isp_device, ved);
-	struct dcmipp_ent_device *ved = arg;
-
-	/* We are only interrested in VSYNC interrupts */
-	if (!(ved->cmsr2 & DCMIPP_CMSR2_P1VSYNCF))
-		return IRQ_HANDLED;
-
-	spin_lock_irq(&isp->irqlock);
-
-	if (isp->exposure_needs_update) {
-		reg_write(isp, DCMIPP_P1EXCR2,
-			  (isp->exposure.mult_B << DCMIPP_P1EXCR2_MULTB_SHIFT) |
-			  (isp->exposure.shift_B << DCMIPP_P1EXCR2_SHFB_SHIFT) |
-			  (isp->exposure.mult_G << DCMIPP_P1EXCR2_MULTG_SHIFT) |
-			  (isp->exposure.shift_G << DCMIPP_P1EXCR2_SHFG_SHIFT));
-		reg_write(isp, DCMIPP_P1EXCR1,
-			  (isp->exposure.mult_R << DCMIPP_P1EXCR1_MULTR_SHIFT) |
-			  (isp->exposure.shift_R << DCMIPP_P1EXCR1_SHFR_SHIFT) |
-			  (isp->exposure.enable ? DCMIPP_P1EXCR1_ENABLE : 0));
-		isp->exposure_needs_update = false;
-	}
-
-	if (isp->contrast_needs_update) {
-		reg_write(isp, DCMIPP_P1CTCR2,
-			  (isp->contrast.lum[1] << DCMIPP_P1CTCR2_LUM1_SHIFT) |
-			  (isp->contrast.lum[2] << DCMIPP_P1CTCR2_LUM2_SHIFT) |
-			  (isp->contrast.lum[3] << DCMIPP_P1CTCR2_LUM3_SHIFT) |
-			  (isp->contrast.lum[4] << DCMIPP_P1CTCR2_LUM4_SHIFT));
-		reg_write(isp, DCMIPP_P1CTCR3,
-			  (isp->contrast.lum[5] << DCMIPP_P1CTCR3_LUM5_SHIFT) |
-			  (isp->contrast.lum[6] << DCMIPP_P1CTCR3_LUM6_SHIFT) |
-			  (isp->contrast.lum[7] << DCMIPP_P1CTCR3_LUM7_SHIFT) |
-			  (isp->contrast.lum[8] << DCMIPP_P1CTCR3_LUM8_SHIFT));
-		reg_write(isp, DCMIPP_P1CTCR1,
-			  (isp->contrast.lum[0] << DCMIPP_P1CTCR1_LUM0_SHIFT) |
-			  (isp->contrast.enable ? DCMIPP_P1CTCR1_ENABLE : 0));
-		isp->contrast_needs_update = false;
-	}
-
-	if (isp->color_conv_needs_update) {
-		dcmipp_isp_colorconv_user(isp);
-		isp->color_conv_needs_update = false;
-	}
-
-	spin_unlock_irq(&isp->irqlock);
-
-	return IRQ_HANDLED;
-}
-
 /* FIXME */
 static void dcmipp_isp_release(struct v4l2_subdev *sd)
 {
@@ -1088,7 +731,7 @@ struct dcmipp_ent_device *dcmipp_isp_ent_init(struct device *dev,
 					      void __iomem *regs)
 {
 	struct dcmipp_isp_device *isp;
-	int ret, i;
+	int ret;
 
 	/* Allocate the isp struct */
 	isp = kzalloc(sizeof(*isp), GFP_KERNEL);
@@ -1107,30 +750,6 @@ struct dcmipp_ent_device *dcmipp_isp_ent_init(struct device *dev,
 	isp->src_fmt = fmt_default;
 	isp->src_fmt.code = ISP_MEDIA_BUS_SRC_FMT_DEFAULT;
 
-	/* Initialize controls */
-	v4l2_ctrl_handler_init(&isp->ctrls, ARRAY_SIZE(dcmipp_isp_ctrls));
-	isp->ctrls.lock = &isp->lock;
-
-	for (i = 0; i < ARRAY_SIZE(dcmipp_isp_ctrls); i++)
-		v4l2_ctrl_new_custom(&isp->ctrls, &dcmipp_isp_ctrls[i], NULL);
-
-	isp->sd.ctrl_handler = &isp->ctrls;
-	if (isp->ctrls.error) {
-		ret = isp->ctrls.error;
-		dev_err(isp->dev, "control initialization error %d\n", ret);
-		mutex_destroy(&isp->lock);
-		kfree(isp);
-		return ERR_PTR(ret);
-	}
-
-	ret = v4l2_ctrl_handler_setup(&isp->ctrls);
-	if (ret < 0) {
-		dev_err(isp->dev, "Failed to set up control handlers\n");
-		mutex_destroy(&isp->lock);
-		kfree(isp);
-		return ERR_PTR(ret);
-	}
-
 	/* Initialize ved and sd */
 	ret = dcmipp_ent_sd_register(&isp->ved, &isp->sd,
 				     v4l2_dev,
@@ -1143,7 +762,7 @@ struct dcmipp_ent_device *dcmipp_isp_ent_init(struct device *dev,
 				     MEDIA_PAD_FL_SOURCE,
 				     },
 				     &dcmipp_isp_int_ops, &dcmipp_isp_ops,
-				     NULL, dcmipp_isp_irq_thread);
+				     NULL, NULL);
 	if (ret) {
 		mutex_destroy(&isp->lock);
 		kfree(isp);
-- 
2.39.2

