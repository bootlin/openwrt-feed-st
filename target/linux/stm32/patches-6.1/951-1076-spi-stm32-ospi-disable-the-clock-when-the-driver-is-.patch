From dcd5eb0a24aeb0d8d1aeab6738c80864ded5e0fd Mon Sep 17 00:00:00 2001
From: Christophe Kerello <christophe.kerello@foss.st.com>
Date: Tue, 19 Mar 2024 18:42:43 +0100
Subject: [PATCH 1076/1141] spi: stm32-ospi: disable the clock when the driver
 is unbind

Disable the clock when the driver is unbind and manage error cases
at probe time.

Change-Id: I483c9f3ae0d0e3952b8deca1ee5d49c05ad3578f
Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/368091
Reviewed-by: Christophe KERELLO <christophe.kerello@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Tested-by: Christophe KERELLO <christophe.kerello@st.com>
Reviewed-by: Patrice CHOTARD <patrice.chotard@foss.st.com>
Domain-Review: Christophe KERELLO <christophe.kerello@st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/spi/spi-stm32-ospi.c | 25 +++++++++++++++----------
 1 file changed, 15 insertions(+), 10 deletions(-)

diff --git a/drivers/spi/spi-stm32-ospi.c b/drivers/spi/spi-stm32-ospi.c
index 7b90c31e333a..8a759c694fe4 100644
--- a/drivers/spi/spi-stm32-ospi.c
+++ b/drivers/spi/spi-stm32-ospi.c
@@ -1074,7 +1074,7 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 
 	ret = pm_runtime_resume_and_get(omi->dev);
 	if (ret < 0)
-		return ret;
+		goto err_pm_enable;
 
 	if (omi->rstc) {
 		reset_control_assert(omi->rstc);
@@ -1091,13 +1091,14 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 			dev_err(ospi->dev, "could not retrieve reg property: %d\n",
 				ret);
 			of_node_put(child);
-			return ret;
+			goto err_pm_resume;
 		}
 
 		if (cs >= STM32_OMI_MAX_NORCHIP) {
 			dev_err(ospi->dev, "invalid reg value: %d\n", cs);
 			of_node_put(child);
-			return -EINVAL;
+			ret = -EINVAL;
+			goto err_pm_resume;
 		}
 
 		if (of_device_is_compatible(child, "jedec,spi-nor")) {
@@ -1114,20 +1115,24 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 	}
 
 	ret = spi_register_master(ctrl);
-	if (ret)
-		goto err_spi_register;
+	if (ret) {
+		/* Disable ospi */
+		writel_relaxed(0, omi->regs_base + OSPI_CR);
+		goto err_pm_resume;
+	}
 
 	pm_runtime_mark_last_busy(omi->dev);
 	pm_runtime_put_autosuspend(omi->dev);
 
 	return 0;
 
-err_spi_register:
-	/* Disable ospi */
-	writel_relaxed(0, omi->regs_base + OSPI_CR);
-	mutex_destroy(&ospi->lock);
+err_pm_resume:
 	pm_runtime_put_sync_suspend(omi->dev);
 
+err_pm_enable:
+	pm_runtime_force_suspend(omi->dev);
+	mutex_destroy(&ospi->lock);
+
 	return ret;
 }
 
@@ -1147,7 +1152,7 @@ static int stm32_ospi_remove(struct platform_device *pdev)
 	stm32_omi_dlyb_stop(omi);
 	mutex_destroy(&ospi->lock);
 	pm_runtime_put_sync_suspend(omi->dev);
-	pm_runtime_disable(omi->dev);
+	pm_runtime_force_suspend(omi->dev);
 
 	return 0;
 }
-- 
2.39.2

