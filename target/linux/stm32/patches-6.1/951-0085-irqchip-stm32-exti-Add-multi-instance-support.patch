From 4f24b889aa553a922bf404fb7a4ddfca6354426b Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Mon, 27 Jun 2022 16:55:44 +0200
Subject: [PATCH 0085/1141] irqchip/stm32-exti: Add multi instance support

The functions in struct syscore_ops don't receive any argument, so
the driver has to keep locally the relevant data.
The global variable 'stm32_host_data' is currently used to keep
the driver data in case of single instance.

Replace the variable with a list in order to add multi instance
support.
Iterate within the list in the syscore_ops functions.
Register the syscore_ops only once per driver.
Remove the useless assignment in stm32_exti_host_init(), as it is
used only by STM32F4 and STM32H7 that do not implement PM.
While there, rework the driver to drop the #if on CONFIG_PM_SLEEP
in favor of using IS_ENABLED(CONFIG_PM_SLEEP).

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: Id92292f8aa9efc9fef0b448aa3519d7a622a5186
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/257941
Reviewed-by: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
Tested-by: Antonio Maria BORNEO <antonio.borneo@st.com>
---
 drivers/irqchip/irq-stm32-exti.c | 61 ++++++++++++++++++++------------
 1 file changed, 39 insertions(+), 22 deletions(-)

diff --git a/drivers/irqchip/irq-stm32-exti.c b/drivers/irqchip/irq-stm32-exti.c
index dc14895c04f5..849d1215fb03 100644
--- a/drivers/irqchip/irq-stm32-exti.c
+++ b/drivers/irqchip/irq-stm32-exti.c
@@ -14,6 +14,7 @@
 #include <linux/irqchip.h>
 #include <linux/irqchip/chained_irq.h>
 #include <linux/irqdomain.h>
+#include <linux/list.h>
 #include <linux/module.h>
 #include <linux/of_address.h>
 #include <linux/of_irq.h>
@@ -56,6 +57,7 @@ struct stm32_exti_chip_data {
 };
 
 struct stm32_exti_host_data {
+	struct list_head lh;
 	void __iomem *base;
 	struct stm32_exti_chip_data *chips_data;
 	const struct stm32_exti_drv_data *drv_data;
@@ -63,7 +65,7 @@ struct stm32_exti_host_data {
 	struct device_node *irq_map_node;
 };
 
-static struct stm32_exti_host_data *stm32_host_data;
+static LIST_HEAD(stm32_host_data_list);
 
 static const struct stm32_exti_bank stm32f4xx_exti_b1 = {
 	.imr_ofst	= 0x00,
@@ -634,50 +636,65 @@ static void stm32_exti_h_ack(struct irq_data *d)
 		irq_chip_ack_parent(d);
 }
 
-static int __maybe_unused stm32_exti_h_suspend(void)
+static int stm32_exti_h_suspend(void)
 {
 	struct stm32_exti_chip_data *chip_data;
+	struct stm32_exti_host_data *host_data;
 	int i;
 
-	for (i = 0; i < stm32_host_data->drv_data->bank_nr; i++) {
-		chip_data = &stm32_host_data->chips_data[i];
-		raw_spin_lock(&chip_data->rlock);
-		stm32_chip_suspend(chip_data, chip_data->wake_active);
-		raw_spin_unlock(&chip_data->rlock);
+	list_for_each_entry(host_data, &stm32_host_data_list, lh) {
+		for (i = 0; i < host_data->drv_data->bank_nr; i++) {
+			chip_data = &host_data->chips_data[i];
+			raw_spin_lock(&chip_data->rlock);
+			stm32_chip_suspend(chip_data, chip_data->wake_active);
+			raw_spin_unlock(&chip_data->rlock);
+		}
 	}
 
 	return 0;
 }
 
-static void __maybe_unused stm32_exti_h_resume(void)
+static void stm32_exti_h_resume(void)
 {
 	struct stm32_exti_chip_data *chip_data;
+	struct stm32_exti_host_data *host_data;
 	int i;
 
-	for (i = 0; i < stm32_host_data->drv_data->bank_nr; i++) {
-		chip_data = &stm32_host_data->chips_data[i];
-		raw_spin_lock(&chip_data->rlock);
-		stm32_chip_resume(chip_data, chip_data->mask_cache);
-		raw_spin_unlock(&chip_data->rlock);
+	list_for_each_entry(host_data, &stm32_host_data_list, lh) {
+		for (i = 0; i < host_data->drv_data->bank_nr; i++) {
+			chip_data = &host_data->chips_data[i];
+			raw_spin_lock(&chip_data->rlock);
+			stm32_chip_resume(chip_data, chip_data->mask_cache);
+			raw_spin_unlock(&chip_data->rlock);
+		}
 	}
 }
 
 static struct syscore_ops stm32_exti_h_syscore_ops = {
-#ifdef CONFIG_PM_SLEEP
 	.suspend	= stm32_exti_h_suspend,
 	.resume		= stm32_exti_h_resume,
-#endif
 };
 
 static void stm32_exti_h_syscore_init(struct stm32_exti_host_data *host_data)
 {
-	stm32_host_data = host_data;
-	register_syscore_ops(&stm32_exti_h_syscore_ops);
+	if (IS_ENABLED(CONFIG_PM_SLEEP)) {
+		if (list_empty(&stm32_host_data_list))
+			register_syscore_ops(&stm32_exti_h_syscore_ops);
+
+		list_add_tail(&host_data->lh, &stm32_host_data_list);
+	}
 }
 
-static void stm32_exti_h_syscore_deinit(void)
+static void stm32_exti_h_syscore_deinit(struct platform_device *pdev)
 {
-	unregister_syscore_ops(&stm32_exti_h_syscore_ops);
+	struct stm32_exti_host_data *host_data = platform_get_drvdata(pdev);
+
+	if (IS_ENABLED(CONFIG_PM_SLEEP)) {
+		list_del(&host_data->lh);
+
+		if (list_empty(&stm32_host_data_list))
+			unregister_syscore_ops(&stm32_exti_h_syscore_ops);
+	}
 }
 
 static int stm32_exti_h_retrigger(struct irq_data *d)
@@ -857,8 +874,6 @@ stm32_exti_host_data *stm32_exti_host_init(const struct stm32_exti_drv_data *dd,
 		goto free_chips_data;
 	}
 
-	stm32_host_data = host_data;
-
 	return host_data;
 
 free_chips_data:
@@ -992,7 +1007,7 @@ static void stm32_exti_remove_irq(void *data)
 
 static int stm32_exti_remove(struct platform_device *pdev)
 {
-	stm32_exti_h_syscore_deinit();
+	stm32_exti_h_syscore_deinit(pdev);
 	return 0;
 }
 
@@ -1011,6 +1026,8 @@ static int stm32_exti_probe(struct platform_device *pdev)
 	if (!host_data)
 		return -ENOMEM;
 
+	platform_set_drvdata(pdev, host_data);
+
 	/* check for optional hwspinlock which may be not available yet */
 	ret = of_hwspin_lock_get_id(np, 0);
 	if (ret == -EPROBE_DEFER)
-- 
2.39.2

