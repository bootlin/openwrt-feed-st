From 1d11860121f851f041ac3a24f9e0fae37f952cce Mon Sep 17 00:00:00 2001
From: Hugues Fruchet <hugues.fruchet@foss.st.com>
Date: Wed, 9 Aug 2023 11:44:47 +0200
Subject: [PATCH 0456/1141] media: hantro: h1: trace encode parameters

Add tracing of encode parameters.

Signed-off-by: Hugues Fruchet <hugues.fruchet@foss.st.com>
Change-Id: I720b70e5c25ad2f2a41b835d2a768e6374e1cbc1
---
 drivers/media/platform/verisilicon/hantro.h   |  4 ++
 .../platform/verisilicon/hantro_h1_vp8_enc.c  | 51 +++++++++++++++++++
 2 files changed, 55 insertions(+)

diff --git a/drivers/media/platform/verisilicon/hantro.h b/drivers/media/platform/verisilicon/hantro.h
index 614f84723502..d221989b3f95 100644
--- a/drivers/media/platform/verisilicon/hantro.h
+++ b/drivers/media/platform/verisilicon/hantro.h
@@ -221,6 +221,8 @@ struct hantro_dev {
  * @fh:			V4L2 file handler.
  * @is_encoder:		Decoder or encoder context?
  *
+ * @str:		Placeholder for debug string
+ *
  * @sequence_cap:       Sequence counter for capture queue
  * @sequence_out:       Sequence counter for output queue
  *
@@ -247,6 +249,8 @@ struct hantro_ctx {
 	struct v4l2_fh fh;
 	bool is_encoder;
 
+	char str[400];
+
 	u32 sequence_cap;
 	u32 sequence_out;
 
diff --git a/drivers/media/platform/verisilicon/hantro_h1_vp8_enc.c b/drivers/media/platform/verisilicon/hantro_h1_vp8_enc.c
index e5d29c473cfa..3de34c9043e1 100644
--- a/drivers/media/platform/verisilicon/hantro_h1_vp8_enc.c
+++ b/drivers/media/platform/verisilicon/hantro_h1_vp8_enc.c
@@ -1403,6 +1403,55 @@ static void hantro_h1_vp8_enc_set_params(struct hantro_dev *vpu, struct hantro_c
 	}
 }
 
+static char *encode_params_str(struct v4l2_ctrl_vp8_encode_params *p,
+			       char *str,
+			       unsigned int len)
+{
+	if (!p)
+		return NULL;
+
+	snprintf(str, len,
+		 "v4l2_ctrl_vp8_encode_params\n"
+		 " flags:\t\t\t %s %s %s %s %s %s\n"
+		 " frame_type:\t\t%s\n"
+		 " color_space:\t\t%s\n"
+		 " clamping_type:\t\t%s\n"
+		 " loop_filter_type:\t%s\n"
+		 " loop_filter_level:\t%d\n"
+		 " sharpness_level:\t%d\n"
+		 " log2_nbr_of_dct_parts:\t%s\n"
+		 " prob_intra:\t\t%d\n"
+		 " prob_last:\t\t%d\n"
+		 " prob_gf:\t\t%d\n"
+		 " copy_to_golden:\t\t%d\n"
+		 " copy_to_alternate:\t%d\n"
+		 " reference_type:\t\t%s\n",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_SHOWFRAME) ? "SHOW" : "",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_GOLDEN_REFRESH) ? "GOLDEN" : "",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_ALTREF_REFRESH) ? "ALTREF" : "",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_SEGMENT_ENABLED) ? "SEGMENT" : "",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_LOOP_FILTER_ADJ_ENABLED) ? "LOOPFILTER" : "",
+		 (p->flags & V4L2_VP8_FRAME_FLAG_REFRESH_ENTROPY_PROBS) ? "REFRESH_ENTROPY" : "",
+		 (p->frame_type == V4L2_VP8_FRAME_TYPE_KEYFRAME) ? "KEYFRAME" : "INTER",
+		 (p->color_space == V4L2_VP8_FRAME_COLOR_SPACE_YUV) ? "YUV" : "RESERVED",
+		 (p->clamping_type == V4L2_VP8_FRAME_CLAMPING_REQUIRED) ? "REQ" : "NO",
+		 (p->loop_filter_type == V4L2_VP8_FRAME_FILTER_TYPE_NORMAL) ? "NORMAL" : "SIMPLE",
+		 p->loop_filter_level,
+		 p->sharpness_level,
+		 (p->log2_nbr_of_dct_partitions == V4L2_VP8_FRAME_NBR_DCT_PARTITIONS_1) ? "1" :
+		 (p->log2_nbr_of_dct_partitions == V4L2_VP8_FRAME_NBR_DCT_PARTITIONS_2) ? "2" :
+		 (p->log2_nbr_of_dct_partitions == V4L2_VP8_FRAME_NBR_DCT_PARTITIONS_4) ? "4" : "8",
+		 p->prob_intra,
+		 p->prob_last,
+		 p->prob_gf,
+		 p->copy_buffer_to_golden,
+		 p->copy_buffer_to_alternate,
+		 (p->reference_type == V4L2_VP8_FRAME_REF_LAST) ? "LAST" :
+		 (p->reference_type == V4L2_VP8_FRAME_REF_GOLDEN) ? "GOLDEN" : "ALT");
+
+	return str;
+}
+
 int hantro_h1_vp8_enc_run(struct hantro_ctx *ctx)
 {
 	struct hantro_dev *vpu = ctx->dev;
@@ -1417,6 +1466,8 @@ int hantro_h1_vp8_enc_run(struct hantro_ctx *ctx)
 	if (WARN_ON(!params))
 		return -EINVAL;
 
+	vpu_debug(1, "%s\n", encode_params_str(params, ctx->str, sizeof(ctx->str)));
+
 	if (params->flags & V4L2_VP8_FRAME_FLAG_SEGMENT_ENABLED)
 		return -EINVAL;
 
-- 
2.39.2

