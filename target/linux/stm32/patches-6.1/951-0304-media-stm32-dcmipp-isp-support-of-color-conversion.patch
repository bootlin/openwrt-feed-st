From 8ae78b6c8cf896666dc3bb2be28436141218131e Mon Sep 17 00:00:00 2001
From: Hugues Fruchet <hugues.fruchet@foss.st.com>
Date: Thu, 23 Feb 2023 11:49:23 +0100
Subject: [PATCH 0304/1141] media: stm32: dcmipp: isp: support of color
 conversion

Implement a control that allows to control dynamically while
streaming the color conversion settings.
Note that these settings override the settings that the driver
may have been set at stream start based on sink/src formats:
foreseen use-cases are exclusive so it should not make any trouble
but this is user responsability to care about that.
Here are some examples of exclusive use-cases:
- RAW sensor -> ISP debayer -> ISP dynamic color correction -> RGB
- YUV sensor -> ISP static color conversion -> RGB

Signed-off-by: Fabien Dessenne <fabien.dessenne@foss.st.com>
Change-Id: I5c9fb66f61c688fa94f2dcf3f4140a5749655a21
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/292774
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Eric FOURMONT <eric.fourmont-ext@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-isp.c        | 71 +++++++++++++++----
 1 file changed, 57 insertions(+), 14 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
@@ -255,6 +255,8 @@ struct dcmipp_isp_device {
 	bool exposure_needs_update;
 	struct v4l2_ctrl_isp_contrast contrast;
 	bool contrast_needs_update;
+	struct v4l2_ctrl_isp_color_conv color_conv;
+	bool color_conv_needs_update;
 
 	struct v4l2_ctrl_handler ctrls;
 };
@@ -335,6 +337,10 @@ static int dcmipp_isp_s_ctrl(struct v4l2
 		isp->contrast = *(struct v4l2_ctrl_isp_contrast *)ctrl->p_new.p;
 		isp->contrast_needs_update = true;
 		break;
+	case V4L2_CID_ISP_COLOR_CONV:
+		isp->color_conv = *(struct v4l2_ctrl_isp_color_conv *)ctrl->p_new.p;
+		isp->color_conv_needs_update = true;
+		break;
 	}
 
 	spin_unlock_irq(&isp->irqlock);
@@ -450,6 +456,11 @@ static const struct v4l2_ctrl_config dcm
 		.id		= V4L2_CID_ISP_CONTRAST,
 		.type		= V4L2_CTRL_TYPE_ISP_CONTRAST,
 		.name		= "ISP Contrast block control",
+	}, {
+		.ops		= &dcmipp_isp_ctrl_ops,
+		.id		= V4L2_CID_ISP_COLOR_CONV,
+		.type		= V4L2_CTRL_TYPE_ISP_COLOR_CONV,
+		.name		= "ISP Color Conversion block control",
 	}
 };
 
@@ -851,25 +862,20 @@ static void dcmipp_isp_config_demosaicin
 		reg_set(isp, DCMIPP_P1DMCR, val);
 }
 
-static int dcmipp_isp_colorconv_config(struct dcmipp_isp_device *isp)
+static int dcmipp_isp_colorconv_set(struct dcmipp_isp_device *isp,
+				    struct dcmipp_colorconv_config *ccconf)
 {
-	struct dcmipp_colorconv_config ccconf = { 0 };
-	int i, ret = 0;
-	unsigned int val = 0;
-
-	ret = dcmipp_colorconv_configure(isp->dev, &isp->sink_fmt,
-					 &isp->src_fmt, &ccconf);
-	if (ret)
-		return ret;
+	u32 val = 0;
+	int i;
 
 	for (i = 0; i < 6; i++)
-		reg_write(isp, DCMIPP_P1CCRR1 + (4 * i), ccconf.conv_matrix[i]);
+		reg_write(isp, DCMIPP_P1CCRR1 + (4 * i), ccconf->conv_matrix[i]);
 
-	if (ccconf.clamping)
+	if (ccconf->clamping)
 		val |= DCMIPP_P1CCCR_CLAMP;
-	if (ccconf.clamping_as_rgb)
+	if (ccconf->clamping_as_rgb)
 		val |= DCMIPP_P1CCCR_TYPE_RGB;
-	if (ccconf.enable)
+	if (ccconf->enable)
 		val |= DCMIPP_P1CCCR_ENABLE;
 
 	reg_write(isp, DCMIPP_P1CCCR, val);
@@ -877,6 +883,38 @@ static int dcmipp_isp_colorconv_config(s
 	return 0;
 }
 
+static int dcmipp_isp_colorconv_auto(struct dcmipp_isp_device *isp)
+{
+	struct dcmipp_colorconv_config ccconf;
+	int ret;
+
+	/* Get the "src to sink" color conversion matrix */
+	ret = dcmipp_colorconv_configure(isp->dev, &isp->sink_fmt, &isp->src_fmt, &ccconf);
+	if (ret)
+		return ret;
+
+	return dcmipp_isp_colorconv_set(isp, &ccconf);
+}
+
+static int dcmipp_isp_colorconv_user(struct dcmipp_isp_device *isp)
+{
+	struct dcmipp_colorconv_config ccconf;
+
+	/* Get the color conversion matrix from the user control */
+	ccconf.conv_matrix[0] = isp->color_conv.coeff[0][1] << 16 | isp->color_conv.coeff[0][0];
+	ccconf.conv_matrix[1] = isp->color_conv.coeff[0][3] << 16 | isp->color_conv.coeff[0][2];
+	ccconf.conv_matrix[2] = isp->color_conv.coeff[1][1] << 16 | isp->color_conv.coeff[1][0];
+	ccconf.conv_matrix[3] = isp->color_conv.coeff[1][3] << 16 | isp->color_conv.coeff[1][2];
+	ccconf.conv_matrix[4] = isp->color_conv.coeff[2][1] << 16 | isp->color_conv.coeff[2][0];
+	ccconf.conv_matrix[5] = isp->color_conv.coeff[2][3] << 16 | isp->color_conv.coeff[2][2];
+
+	ccconf.enable = isp->color_conv.enable;
+	ccconf.clamping = isp->color_conv.clamping;
+	ccconf.clamping_as_rgb = isp->color_conv.clamping_as_rgb;
+
+	return dcmipp_isp_colorconv_set(isp, &ccconf);
+}
+
 static int dcmipp_isp_s_stream(struct v4l2_subdev *sd, int enable)
 {
 	struct dcmipp_isp_device *isp = v4l2_get_subdevdata(sd);
@@ -911,7 +949,7 @@ static int dcmipp_isp_s_stream(struct v4
 		dcmipp_isp_config_demosaicing(isp);
 
 		/* Configure ColorConversion */
-		ret = dcmipp_isp_colorconv_config(isp);
+		ret = dcmipp_isp_colorconv_auto(isp);
 		if (ret)
 			goto out;
 	}
@@ -985,6 +1023,11 @@ static irqreturn_t dcmipp_isp_irq_thread
 		isp->contrast_needs_update = false;
 	}
 
+	if (isp->color_conv_needs_update) {
+		dcmipp_isp_colorconv_user(isp);
+		isp->color_conv_needs_update = false;
+	}
+
 	spin_unlock_irq(&isp->irqlock);
 
 	return IRQ_HANDLED;
