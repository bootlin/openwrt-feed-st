From 0355c7890d1bf673ce2fc454508ac69ca9e0939b Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Fri, 15 Dec 2023 15:22:52 +0100
Subject: [PATCH 0747/1141] irqchip/stm32mp-exti: rename internal symbols

Rename all the internal symbols accordingly to the new name of the
driver.
Renaming done automatically through sed rules:
	s/stm32_exti_set_type/stm32mp_exti_convert_type/g
	s/stm32_exti_h_/stm32mp_exti_/g
	s/stm32_exti/stm32mp_exti/g
	s/stm32_bank/bank/g
	s/stm32_/stm32mp_/g
	s/STM32_/STM32MP_/g
	s/STM32MP1_/STM32MP_/g
	s/stm32mp1_exti_/stm32mp_exti_/g
	s/stm32-exti-h/stm32mp-exti/g

Manually fix some indentation after the rename.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: I38a02e89558843b852a767e5cc6be853d92ce504
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/347756
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
---
 drivers/irqchip/irq-stm32mp-exti.c | 382 ++++++++++++++---------------
 1 file changed, 191 insertions(+), 191 deletions(-)

--- a/drivers/irqchip/irq-stm32mp-exti.c
+++ b/drivers/irqchip/irq-stm32mp-exti.c
@@ -24,10 +24,10 @@
 
 #define IRQS_PER_BANK			32
 
-#define STM32_GPIO_IRQ_LINES		16
+#define STM32MP_GPIO_IRQ_LINES		16
 
 /* to receive bank_ioport_nr from GPIO in struct irq_fwspec::param[1] */
-#define STM32_GPIO_BANK_MASK		GENMASK(23, 16)
+#define STM32MP_GPIO_BANK_MASK		GENMASK(23, 16)
 
 #define HWSPNLCK_TIMEOUT		1000 /* usec */
 
@@ -48,7 +48,7 @@
 
 #define EXTI_CID1			1
 
-struct stm32_exti_bank {
+struct stm32mp_exti_bank {
 	u32 imr_ofst;
 	u32 rtsr_ofst;
 	u32 ftsr_ofst;
@@ -59,15 +59,15 @@ struct stm32_exti_bank {
 	u32 seccfgr_ofst;
 };
 
-struct stm32_exti_drv_data {
-	const struct stm32_exti_bank **exti_banks;
+struct stm32mp_exti_drv_data {
+	const struct stm32mp_exti_bank **exti_banks;
 	const u8 *desc_irqs;
 	u32 bank_nr;
 };
 
-struct stm32_exti_chip_data {
-	struct stm32_exti_host_data *host_data;
-	const struct stm32_exti_bank *reg_bank;
+struct stm32mp_exti_chip_data {
+	struct stm32mp_exti_host_data *host_data;
+	const struct stm32mp_exti_bank *reg_bank;
 	struct raw_spinlock rlock;
 	u32 wake_active;
 	u32 mask_cache;
@@ -76,22 +76,22 @@ struct stm32_exti_chip_data {
 	u32 event_reserved;
 };
 
-struct stm32_exti_host_data {
+struct stm32mp_exti_host_data {
 	struct list_head lh;
 	void __iomem *base;
 	struct device *dev;
-	struct stm32_exti_chip_data *chips_data;
-	const struct stm32_exti_drv_data *drv_data;
+	struct stm32mp_exti_chip_data *chips_data;
+	const struct stm32mp_exti_drv_data *drv_data;
 	struct hwspinlock *hwlock;
 	struct device_node *irq_map_node;
 	bool has_syscon; /* using old DT; keep backward compatibility */
-	DECLARE_BITMAP(gpio_mux_used, STM32_GPIO_IRQ_LINES);
-	u8 gpio_mux_pos[STM32_GPIO_IRQ_LINES];
+	DECLARE_BITMAP(gpio_mux_used, STM32MP_GPIO_IRQ_LINES);
+	u8 gpio_mux_pos[STM32MP_GPIO_IRQ_LINES];
 };
 
-static LIST_HEAD(stm32_host_data_list);
+static LIST_HEAD(stm32mp_host_data_list);
 
-static const struct stm32_exti_bank stm32mp1_exti_b1 = {
+static const struct stm32mp_exti_bank stm32mp_exti_b1 = {
 	.imr_ofst	= 0x80,
 	.rtsr_ofst	= 0x00,
 	.ftsr_ofst	= 0x04,
@@ -102,7 +102,7 @@ static const struct stm32_exti_bank stm3
 	.seccfgr_ofst	= 0x14,
 };
 
-static const struct stm32_exti_bank stm32mp1_exti_b2 = {
+static const struct stm32mp_exti_bank stm32mp_exti_b2 = {
 	.imr_ofst	= 0x90,
 	.rtsr_ofst	= 0x20,
 	.ftsr_ofst	= 0x24,
@@ -113,7 +113,7 @@ static const struct stm32_exti_bank stm3
 	.seccfgr_ofst	= 0x34,
 };
 
-static const struct stm32_exti_bank stm32mp1_exti_b3 = {
+static const struct stm32mp_exti_bank stm32mp_exti_b3 = {
 	.imr_ofst	= 0xA0,
 	.rtsr_ofst	= 0x40,
 	.ftsr_ofst	= 0x44,
@@ -124,17 +124,17 @@ static const struct stm32_exti_bank stm3
 	.seccfgr_ofst	= 0x54,
 };
 
-static const struct stm32_exti_bank *stm32mp1_exti_banks[] = {
-	&stm32mp1_exti_b1,
-	&stm32mp1_exti_b2,
-	&stm32mp1_exti_b3,
+static const struct stm32mp_exti_bank *stm32mp_exti_banks[] = {
+	&stm32mp_exti_b1,
+	&stm32mp_exti_b2,
+	&stm32mp_exti_b3,
 };
 
-static struct irq_chip stm32_exti_h_chip;
-static struct irq_chip stm32_exti_h_chip_direct;
+static struct irq_chip stm32mp_exti_chip;
+static struct irq_chip stm32mp_exti_chip_direct;
 
-#define EXTI_INVALID_IRQ       U8_MAX
-#define STM32MP1_DESC_IRQ_SIZE (ARRAY_SIZE(stm32mp1_exti_banks) * IRQS_PER_BANK)
+#define EXTI_INVALID_IRQ	U8_MAX
+#define STM32MP_DESC_IRQ_SIZE	(ARRAY_SIZE(stm32mp_exti_banks) * IRQS_PER_BANK)
 
 /*
  * Use some intentionally tricky logic here to initialize the whole array to
@@ -148,7 +148,7 @@ __diag_ignore_all("-Woverride-init",
 
 static const u8 stm32mp1_desc_irq[] = {
 	/* default value */
-	[0 ... (STM32MP1_DESC_IRQ_SIZE - 1)] = EXTI_INVALID_IRQ,
+	[0 ... (STM32MP_DESC_IRQ_SIZE - 1)] = EXTI_INVALID_IRQ,
 
 	[0] = 6,
 	[1] = 7,
@@ -196,7 +196,7 @@ static const u8 stm32mp1_desc_irq[] = {
 
 static const u8 stm32mp13_desc_irq[] = {
 	/* default value */
-	[0 ... (STM32MP1_DESC_IRQ_SIZE - 1)] = EXTI_INVALID_IRQ,
+	[0 ... (STM32MP_DESC_IRQ_SIZE - 1)] = EXTI_INVALID_IRQ,
 
 	[0] = 6,
 	[1] = 7,
@@ -241,20 +241,20 @@ static const u8 stm32mp13_desc_irq[] = {
 
 __diag_pop();
 
-static const struct stm32_exti_drv_data stm32mp1_drv_data = {
-	.exti_banks = stm32mp1_exti_banks,
-	.bank_nr = ARRAY_SIZE(stm32mp1_exti_banks),
+static const struct stm32mp_exti_drv_data stm32mp1_drv_data = {
+	.exti_banks = stm32mp_exti_banks,
+	.bank_nr = ARRAY_SIZE(stm32mp_exti_banks),
 	.desc_irqs = stm32mp1_desc_irq,
 };
 
-static const struct stm32_exti_drv_data stm32mp13_drv_data = {
-	.exti_banks = stm32mp1_exti_banks,
-	.bank_nr = ARRAY_SIZE(stm32mp1_exti_banks),
+static const struct stm32mp_exti_drv_data stm32mp13_drv_data = {
+	.exti_banks = stm32mp_exti_banks,
+	.bank_nr = ARRAY_SIZE(stm32mp_exti_banks),
 	.desc_irqs = stm32mp13_desc_irq,
 };
 
-static int stm32_exti_set_type(struct irq_data *d,
-			       unsigned int type, u32 *rtsr, u32 *ftsr)
+static int stm32mp_exti_convert_type(struct irq_data *d,
+				     unsigned int type, u32 *rtsr, u32 *ftsr)
 {
 	u32 mask = BIT(d->hwirq % IRQS_PER_BANK);
 
@@ -278,45 +278,45 @@ static int stm32_exti_set_type(struct ir
 	return 0;
 }
 
-static void stm32_chip_suspend(struct stm32_exti_chip_data *chip_data,
-			       u32 wake_active)
+static void stm32mp_chip_suspend(struct stm32mp_exti_chip_data *chip_data,
+				 u32 wake_active)
 {
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 	void __iomem *base = chip_data->host_data->base;
 
 	/* save rtsr, ftsr registers */
-	chip_data->rtsr_cache = readl_relaxed(base + stm32_bank->rtsr_ofst);
-	chip_data->ftsr_cache = readl_relaxed(base + stm32_bank->ftsr_ofst);
+	chip_data->rtsr_cache = readl_relaxed(base + bank->rtsr_ofst);
+	chip_data->ftsr_cache = readl_relaxed(base + bank->ftsr_ofst);
 
-	writel_relaxed(wake_active, base + stm32_bank->imr_ofst);
+	writel_relaxed(wake_active, base + bank->imr_ofst);
 }
 
-static void stm32_chip_resume(struct stm32_exti_chip_data *chip_data,
-			      u32 mask_cache)
+static void stm32mp_chip_resume(struct stm32mp_exti_chip_data *chip_data,
+				u32 mask_cache)
 {
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 	void __iomem *base = chip_data->host_data->base;
 
 	/* restore rtsr, ftsr, registers */
-	writel_relaxed(chip_data->rtsr_cache, base + stm32_bank->rtsr_ofst);
-	writel_relaxed(chip_data->ftsr_cache, base + stm32_bank->ftsr_ofst);
+	writel_relaxed(chip_data->rtsr_cache, base + bank->rtsr_ofst);
+	writel_relaxed(chip_data->ftsr_cache, base + bank->ftsr_ofst);
 
-	writel_relaxed(mask_cache, base + stm32_bank->imr_ofst);
+	writel_relaxed(mask_cache, base + bank->imr_ofst);
 }
 
 /* directly set the target bit without reading first. */
-static inline void stm32_exti_write_bit(struct irq_data *d, u32 reg)
+static inline void stm32mp_exti_write_bit(struct irq_data *d, u32 reg)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
 	void __iomem *base = chip_data->host_data->base;
 	u32 val = BIT(d->hwirq % IRQS_PER_BANK);
 
 	writel_relaxed(val, base + reg);
 }
 
-static inline u32 stm32_exti_set_bit(struct irq_data *d, u32 reg)
+static inline u32 stm32mp_exti_set_bit(struct irq_data *d, u32 reg)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
 	void __iomem *base = chip_data->host_data->base;
 	u32 val;
 
@@ -327,9 +327,9 @@ static inline u32 stm32_exti_set_bit(str
 	return val;
 }
 
-static inline u32 stm32_exti_clr_bit(struct irq_data *d, u32 reg)
+static inline u32 stm32mp_exti_clr_bit(struct irq_data *d, u32 reg)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
 	void __iomem *base = chip_data->host_data->base;
 	u32 val;
 
@@ -340,17 +340,17 @@ static inline u32 stm32_exti_clr_bit(str
 	return val;
 }
 
-static void stm32_exti_h_eoi(struct irq_data *d)
+static void stm32mp_exti_eoi(struct irq_data *d)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 
 	raw_spin_lock(&chip_data->rlock);
 
-	stm32_exti_write_bit(d, stm32_bank->rpr_ofst);
-	stm32_exti_write_bit(d, stm32_bank->fpr_ofst);
+	stm32mp_exti_write_bit(d, bank->rpr_ofst);
+	stm32mp_exti_write_bit(d, bank->fpr_ofst);
 
-	chip_data->mask_cache = stm32_exti_set_bit(d, stm32_bank->imr_ofst);
+	chip_data->mask_cache = stm32mp_exti_set_bit(d, bank->imr_ofst);
 
 	raw_spin_unlock(&chip_data->rlock);
 
@@ -358,36 +358,36 @@ static void stm32_exti_h_eoi(struct irq_
 		irq_chip_eoi_parent(d);
 }
 
-static void stm32_exti_h_mask(struct irq_data *d)
+static void stm32mp_exti_mask(struct irq_data *d)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 
 	raw_spin_lock(&chip_data->rlock);
-	chip_data->mask_cache = stm32_exti_clr_bit(d, stm32_bank->imr_ofst);
+	chip_data->mask_cache = stm32mp_exti_clr_bit(d, bank->imr_ofst);
 	raw_spin_unlock(&chip_data->rlock);
 
 	if (d->parent_data->chip)
 		irq_chip_mask_parent(d);
 }
 
-static void stm32_exti_h_unmask(struct irq_data *d)
+static void stm32mp_exti_unmask(struct irq_data *d)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 
 	raw_spin_lock(&chip_data->rlock);
-	chip_data->mask_cache = stm32_exti_set_bit(d, stm32_bank->imr_ofst);
+	chip_data->mask_cache = stm32mp_exti_set_bit(d, bank->imr_ofst);
 	raw_spin_unlock(&chip_data->rlock);
 
 	if (d->parent_data->chip)
 		irq_chip_unmask_parent(d);
 }
 
-static int stm32_exti_h_set_type(struct irq_data *d, unsigned int type)
+static int stm32mp_exti_set_type(struct irq_data *d, unsigned int type)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 	struct hwspinlock *hwlock = chip_data->host_data->hwlock;
 	void __iomem *base = chip_data->host_data->base;
 	u32 rtsr, ftsr;
@@ -403,15 +403,15 @@ static int stm32_exti_h_set_type(struct
 		}
 	}
 
-	rtsr = readl_relaxed(base + stm32_bank->rtsr_ofst);
-	ftsr = readl_relaxed(base + stm32_bank->ftsr_ofst);
+	rtsr = readl_relaxed(base + bank->rtsr_ofst);
+	ftsr = readl_relaxed(base + bank->ftsr_ofst);
 
-	err = stm32_exti_set_type(d, type, &rtsr, &ftsr);
+	err = stm32mp_exti_convert_type(d, type, &rtsr, &ftsr);
 	if (err)
 		goto unspinlock;
 
-	writel_relaxed(rtsr, base + stm32_bank->rtsr_ofst);
-	writel_relaxed(ftsr, base + stm32_bank->ftsr_ofst);
+	writel_relaxed(rtsr, base + bank->rtsr_ofst);
+	writel_relaxed(ftsr, base + bank->ftsr_ofst);
 
 unspinlock:
 	if (hwlock)
@@ -425,9 +425,9 @@ unlock:
 	return err;
 }
 
-static int stm32_exti_h_set_wake(struct irq_data *d, unsigned int on)
+static int stm32mp_exti_set_wake(struct irq_data *d, unsigned int on)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
 	u32 mask = BIT(d->hwirq % IRQS_PER_BANK);
 
 	raw_spin_lock(&chip_data->rlock);
@@ -445,7 +445,7 @@ static int stm32_exti_h_set_wake(struct
 	return 0;
 }
 
-static int stm32_exti_h_set_affinity(struct irq_data *d,
+static int stm32mp_exti_set_affinity(struct irq_data *d,
 				     const struct cpumask *dest, bool force)
 {
 	if (d->parent_data->chip)
@@ -454,23 +454,23 @@ static int stm32_exti_h_set_affinity(str
 	return IRQ_SET_MASK_OK_DONE;
 }
 
-static void stm32_exti_h_ack(struct irq_data *d)
+static void stm32mp_exti_ack(struct irq_data *d)
 {
 	if (d->parent_data->chip)
 		irq_chip_ack_parent(d);
 }
 
-static int stm32_exti_h_suspend(void)
+static int stm32mp_exti_suspend(void)
 {
-	struct stm32_exti_chip_data *chip_data;
-	struct stm32_exti_host_data *host_data;
+	struct stm32mp_exti_chip_data *chip_data;
+	struct stm32mp_exti_host_data *host_data;
 	int i;
 
-	list_for_each_entry(host_data, &stm32_host_data_list, lh) {
+	list_for_each_entry(host_data, &stm32mp_host_data_list, lh) {
 		for (i = 0; i < host_data->drv_data->bank_nr; i++) {
 			chip_data = &host_data->chips_data[i];
 			raw_spin_lock(&chip_data->rlock);
-			stm32_chip_suspend(chip_data, chip_data->wake_active);
+			stm32mp_chip_suspend(chip_data, chip_data->wake_active);
 			raw_spin_unlock(&chip_data->rlock);
 		}
 	}
@@ -478,13 +478,13 @@ static int stm32_exti_h_suspend(void)
 	return 0;
 }
 
-static void stm32_exti_h_resume_gpio_mux(struct stm32_exti_host_data *host_data)
+static void stm32mp_exti_resume_gpio_mux(struct stm32mp_exti_host_data *host_data)
 {
 	bool write_cr = false;
 	unsigned int i;
 	u32 cr = 0;
 
-	for (i = 0; i < STM32_GPIO_IRQ_LINES; i++) {
+	for (i = 0; i < STM32MP_GPIO_IRQ_LINES; i++) {
 		if (test_bit(i, host_data->gpio_mux_used)) {
 			write_cr = true;
 			cr |= (host_data->gpio_mux_pos[i] << EXTI_CR_SHIFT(i)) & EXTI_CR_MASK(i);
@@ -498,98 +498,98 @@ static void stm32_exti_h_resume_gpio_mux
 	}
 }
 
-static void stm32_exti_h_resume(void)
+static void stm32mp_exti_resume(void)
 {
-	struct stm32_exti_chip_data *chip_data;
-	struct stm32_exti_host_data *host_data;
+	struct stm32mp_exti_chip_data *chip_data;
+	struct stm32mp_exti_host_data *host_data;
 	int i;
 
-	list_for_each_entry(host_data, &stm32_host_data_list, lh) {
+	list_for_each_entry(host_data, &stm32mp_host_data_list, lh) {
 		for (i = 0; i < host_data->drv_data->bank_nr; i++) {
 			chip_data = &host_data->chips_data[i];
 			raw_spin_lock(&chip_data->rlock);
 			if (i == 0)
-				stm32_exti_h_resume_gpio_mux(host_data);
-			stm32_chip_resume(chip_data, chip_data->mask_cache);
+				stm32mp_exti_resume_gpio_mux(host_data);
+			stm32mp_chip_resume(chip_data, chip_data->mask_cache);
 			raw_spin_unlock(&chip_data->rlock);
 		}
 	}
 }
 
-static struct syscore_ops stm32_exti_h_syscore_ops = {
-	.suspend	= stm32_exti_h_suspend,
-	.resume		= stm32_exti_h_resume,
+static struct syscore_ops stm32mp_exti_syscore_ops = {
+	.suspend	= stm32mp_exti_suspend,
+	.resume		= stm32mp_exti_resume,
 };
 
-static void stm32_exti_h_syscore_init(struct stm32_exti_host_data *host_data)
+static void stm32mp_exti_syscore_init(struct stm32mp_exti_host_data *host_data)
 {
 	if (IS_ENABLED(CONFIG_PM_SLEEP)) {
-		if (list_empty(&stm32_host_data_list))
-			register_syscore_ops(&stm32_exti_h_syscore_ops);
+		if (list_empty(&stm32mp_host_data_list))
+			register_syscore_ops(&stm32mp_exti_syscore_ops);
 
-		list_add_tail(&host_data->lh, &stm32_host_data_list);
+		list_add_tail(&host_data->lh, &stm32mp_host_data_list);
 	}
 }
 
-static void stm32_exti_h_syscore_deinit(struct platform_device *pdev)
+static void stm32mp_exti_syscore_deinit(struct platform_device *pdev)
 {
-	struct stm32_exti_host_data *host_data = platform_get_drvdata(pdev);
+	struct stm32mp_exti_host_data *host_data = platform_get_drvdata(pdev);
 
 	if (IS_ENABLED(CONFIG_PM_SLEEP)) {
 		list_del(&host_data->lh);
 
-		if (list_empty(&stm32_host_data_list))
-			unregister_syscore_ops(&stm32_exti_h_syscore_ops);
+		if (list_empty(&stm32mp_host_data_list))
+			unregister_syscore_ops(&stm32mp_exti_syscore_ops);
 	}
 }
 
-static int stm32_exti_h_retrigger(struct irq_data *d)
+static int stm32mp_exti_retrigger(struct irq_data *d)
 {
-	struct stm32_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
-	const struct stm32_exti_bank *stm32_bank = chip_data->reg_bank;
+	struct stm32mp_exti_chip_data *chip_data = irq_data_get_irq_chip_data(d);
+	const struct stm32mp_exti_bank *bank = chip_data->reg_bank;
 	void __iomem *base = chip_data->host_data->base;
 	u32 mask = BIT(d->hwirq % IRQS_PER_BANK);
 
-	writel_relaxed(mask, base + stm32_bank->swier_ofst);
+	writel_relaxed(mask, base + bank->swier_ofst);
 
 	return 0;
 }
 
-static struct irq_chip stm32_exti_h_chip = {
-	.name			= "stm32-exti-h",
-	.irq_eoi		= stm32_exti_h_eoi,
-	.irq_ack		= stm32_exti_h_ack,
-	.irq_mask		= stm32_exti_h_mask,
-	.irq_unmask		= stm32_exti_h_unmask,
+static struct irq_chip stm32mp_exti_chip = {
+	.name			= "stm32mp-exti",
+	.irq_eoi		= stm32mp_exti_eoi,
+	.irq_ack		= stm32mp_exti_ack,
+	.irq_mask		= stm32mp_exti_mask,
+	.irq_unmask		= stm32mp_exti_unmask,
 	.irq_request_resources	= irq_chip_request_resources_parent,
 	.irq_release_resources	= irq_chip_release_resources_parent,
-	.irq_retrigger		= stm32_exti_h_retrigger,
-	.irq_set_type		= stm32_exti_h_set_type,
-	.irq_set_wake		= stm32_exti_h_set_wake,
+	.irq_retrigger		= stm32mp_exti_retrigger,
+	.irq_set_type		= stm32mp_exti_set_type,
+	.irq_set_wake		= stm32mp_exti_set_wake,
 	.flags			= IRQCHIP_MASK_ON_SUSPEND,
-	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? stm32_exti_h_set_affinity : NULL,
+	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? stm32mp_exti_set_affinity : NULL,
 };
 
-static struct irq_chip stm32_exti_h_chip_direct = {
-	.name			= "stm32-exti-h-direct",
+static struct irq_chip stm32mp_exti_chip_direct = {
+	.name			= "stm32mp-exti-direct",
 	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_ack		= irq_chip_ack_parent,
-	.irq_mask		= stm32_exti_h_mask,
-	.irq_unmask		= stm32_exti_h_unmask,
+	.irq_mask		= stm32mp_exti_mask,
+	.irq_unmask		= stm32mp_exti_unmask,
 	.irq_request_resources	= irq_chip_request_resources_parent,
 	.irq_release_resources	= irq_chip_release_resources_parent,
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_set_type		= irq_chip_set_type_parent,
-	.irq_set_wake		= stm32_exti_h_set_wake,
+	.irq_set_wake		= stm32mp_exti_set_wake,
 	.flags			= IRQCHIP_MASK_ON_SUSPEND,
 	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? irq_chip_set_affinity_parent : NULL,
 };
 
-static bool stm32_exti_h_test_gpio_mux_available(struct stm32_exti_host_data *host_data,
+static bool stm32mp_exti_test_gpio_mux_available(struct stm32mp_exti_host_data *host_data,
 						 unsigned int bank_nr,
 						 unsigned int gpio_nr)
 {
-	if (gpio_nr >= STM32_GPIO_IRQ_LINES)
+	if (gpio_nr >= STM32MP_GPIO_IRQ_LINES)
 		return false;
 
 	if (!test_bit(gpio_nr, host_data->gpio_mux_used) ||
@@ -599,11 +599,11 @@ static bool stm32_exti_h_test_gpio_mux_a
 	return false;
 }
 
-static int stm32_exti_h_domain_match(struct irq_domain *dm,
+static int stm32mp_exti_domain_match(struct irq_domain *dm,
 				     struct device_node *node,
 				     enum irq_domain_bus_token bus_token)
 {
-	struct stm32_exti_host_data *host_data = dm->host_data;
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
 
 	if (!node ||
 	    (bus_token != DOMAIN_BUS_ANY && dm->bus_token != bus_token))
@@ -619,12 +619,12 @@ static int stm32_exti_h_domain_match(str
 		of_irq_find_parent(host_data->irq_map_node->parent));
 }
 
-static int stm32_exti_h_domain_select(struct irq_domain *dm,
+static int stm32mp_exti_domain_select(struct irq_domain *dm,
 				      struct irq_fwspec *fwspec,
 				      enum irq_domain_bus_token bus_token)
 {
 	struct fwnode_handle *fwnode = fwspec->fwnode;
-	struct stm32_exti_host_data *host_data = dm->host_data;
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
 	irq_hw_number_t hwirq = fwspec->param[0];
 	struct of_phandle_args out_irq;
 	u32 gpio_bank;
@@ -640,11 +640,11 @@ static int stm32_exti_h_domain_select(st
 	if (fwnode != of_node_to_fwnode(host_data->irq_map_node->parent))
 		return 0;
 
-	gpio_bank = FIELD_GET(STM32_GPIO_BANK_MASK, fwspec->param[1]);
+	gpio_bank = FIELD_GET(STM32MP_GPIO_BANK_MASK, fwspec->param[1]);
 
-	if (hwirq < STM32_GPIO_IRQ_LINES && !host_data->has_syscon &&
+	if (hwirq < STM32MP_GPIO_IRQ_LINES && !host_data->has_syscon &&
 	    ((host_data->chips_data[0].event_reserved & BIT(hwirq)) ||
-	     !stm32_exti_h_test_gpio_mux_available(host_data, gpio_bank, hwirq)))
+	     !stm32mp_exti_test_gpio_mux_available(host_data, gpio_bank, hwirq)))
 		return 0;
 
 	out_irq.np = host_data->irq_map_node;
@@ -659,9 +659,9 @@ static int stm32_exti_h_domain_select(st
 	return (dm->parent->fwnode == of_node_to_fwnode(out_irq.np));
 }
 
-static int stm32_exti_h_gpio_bank_alloc(struct irq_domain *dm, struct irq_fwspec *fwspec)
+static int stm32mp_exti_gpio_bank_alloc(struct irq_domain *dm, struct irq_fwspec *fwspec)
 {
-	struct stm32_exti_host_data *host_data = dm->host_data;
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
 	struct hwspinlock *hwlock = host_data->hwlock;
 	irq_hw_number_t hwirq = fwspec->param[0];
 	void __iomem *base = host_data->base;
@@ -671,12 +671,12 @@ static int stm32_exti_h_gpio_bank_alloc(
 	if (host_data->has_syscon)
 		return 0;
 
-	if (hwirq >= STM32_GPIO_IRQ_LINES)
+	if (hwirq >= STM32MP_GPIO_IRQ_LINES)
 		return 0;
 
-	gpio_bank = FIELD_GET(STM32_GPIO_BANK_MASK, fwspec->param[1]);
+	gpio_bank = FIELD_GET(STM32MP_GPIO_BANK_MASK, fwspec->param[1]);
 
-	if (!stm32_exti_h_test_gpio_mux_available(host_data, gpio_bank, hwirq)) {
+	if (!stm32mp_exti_test_gpio_mux_available(host_data, gpio_bank, hwirq)) {
 		pr_debug("GPIO IRQ %ld already in use\n", hwirq);
 		return -EBUSY;
 	}
@@ -708,23 +708,23 @@ static int stm32_exti_h_gpio_bank_alloc(
 	return 0;
 }
 
-static void stm32_exti_h_gpio_bank_free(struct irq_domain *dm, irq_hw_number_t hwirq)
+static void stm32mp_exti_gpio_bank_free(struct irq_domain *dm, irq_hw_number_t hwirq)
 {
-	struct stm32_exti_host_data *host_data = dm->host_data;
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
 
 	if (host_data->has_syscon)
 		return;
 
-	if (hwirq < STM32_GPIO_IRQ_LINES)
+	if (hwirq < STM32MP_GPIO_IRQ_LINES)
 		clear_bit(hwirq, host_data->gpio_mux_used);
 }
 
-static int stm32_exti_h_domain_alloc(struct irq_domain *dm,
+static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 				     unsigned int virq,
 				     unsigned int nr_irqs, void *data)
 {
-	struct stm32_exti_host_data *host_data = dm->host_data;
-	struct stm32_exti_chip_data *chip_data;
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
+	struct stm32mp_exti_chip_data *chip_data;
 	u8 desc_irq;
 	struct irq_fwspec *fwspec = data;
 	struct irq_fwspec p_fwspec;
@@ -747,13 +747,13 @@ static int stm32_exti_h_domain_alloc(str
 		return -EPERM;
 	}
 
-	ret = stm32_exti_h_gpio_bank_alloc(dm, fwspec);
+	ret = stm32mp_exti_gpio_bank_alloc(dm, fwspec);
 	if (ret)
 		return ret;
 
 	event_trg = readl_relaxed(host_data->base + chip_data->reg_bank->trg_ofst);
 	chip = (event_trg & BIT(hwirq % IRQS_PER_BANK)) ?
-	       &stm32_exti_h_chip : &stm32_exti_h_chip_direct;
+	       &stm32mp_exti_chip : &stm32mp_exti_chip_direct;
 
 	irq_domain_set_hwirq_and_chip(dm, virq, hwirq, chip, chip_data);
 
@@ -765,7 +765,7 @@ static int stm32_exti_h_domain_alloc(str
 
 		ret = of_irq_parse_raw(NULL, &out_irq);
 		if (ret) {
-			stm32_exti_h_gpio_bank_free(dm, fwspec->param[0]);
+			stm32mp_exti_gpio_bank_free(dm, fwspec->param[0]);
 			return ret;
 		}
 
@@ -774,13 +774,13 @@ static int stm32_exti_h_domain_alloc(str
 
 		ret = irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
 		if (ret)
-			stm32_exti_h_gpio_bank_free(dm, fwspec->param[0]);
+			stm32mp_exti_gpio_bank_free(dm, fwspec->param[0]);
 
 		return ret;
 	}
 
 	if (!host_data->drv_data->desc_irqs) {
-		stm32_exti_h_gpio_bank_free(dm, fwspec->param[0]);
+		stm32mp_exti_gpio_bank_free(dm, fwspec->param[0]);
 		return -EINVAL;
 	}
 
@@ -794,7 +794,7 @@ static int stm32_exti_h_domain_alloc(str
 
 		ret = irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
 		if (ret)
-			stm32_exti_h_gpio_bank_free(dm, fwspec->param[0]);
+			stm32mp_exti_gpio_bank_free(dm, fwspec->param[0]);
 
 		return ret;
 	}
@@ -802,29 +802,29 @@ static int stm32_exti_h_domain_alloc(str
 	return 0;
 }
 
-static void stm32_exti_h_domain_free(struct irq_domain *dm, unsigned int virq,
+static void stm32mp_exti_domain_free(struct irq_domain *dm, unsigned int virq,
 				     unsigned int nr_irqs)
 {
 	struct irq_data *irq_data = irq_domain_get_irq_data(dm, virq);
 
-	stm32_exti_h_gpio_bank_free(dm, irq_data->hwirq);
+	stm32mp_exti_gpio_bank_free(dm, irq_data->hwirq);
 
 	irq_domain_free_irqs_common(dm, virq, nr_irqs);
 }
 
 static struct
-stm32_exti_chip_data *stm32_exti_chip_init(struct stm32_exti_host_data *h_data,
-					   u32 bank_idx,
-					   struct device_node *node)
+stm32mp_exti_chip_data *stm32mp_exti_chip_init(struct stm32mp_exti_host_data *h_data,
+					       u32 bank_idx,
+					       struct device_node *node)
 {
-	const struct stm32_exti_bank *stm32_bank;
-	struct stm32_exti_chip_data *chip_data;
+	const struct stm32mp_exti_bank *bank;
+	struct stm32mp_exti_chip_data *chip_data;
 	void __iomem *base = h_data->base;
 
-	stm32_bank = h_data->drv_data->exti_banks[bank_idx];
+	bank = h_data->drv_data->exti_banks[bank_idx];
 	chip_data = &h_data->chips_data[bank_idx];
 	chip_data->host_data = h_data;
-	chip_data->reg_bank = stm32_bank;
+	chip_data->reg_bank = bank;
 
 	raw_spin_lock_init(&chip_data->rlock);
 
@@ -832,25 +832,25 @@ stm32_exti_chip_data *stm32_exti_chip_in
 	 * This IP has no reset, so after hot reboot we should
 	 * clear registers to avoid residue
 	 */
-	writel_relaxed(0, base + stm32_bank->imr_ofst);
+	writel_relaxed(0, base + bank->imr_ofst);
 
 	/* reserve Secure events */
-	chip_data->event_reserved = readl_relaxed(base + stm32_bank->seccfgr_ofst);
+	chip_data->event_reserved = readl_relaxed(base + bank->seccfgr_ofst);
 
 	pr_info("%pOF: bank%d\n", node, bank_idx);
 
 	return chip_data;
 }
 
-static const struct irq_domain_ops stm32_exti_h_domain_ops = {
-	.match	= stm32_exti_h_domain_match,
-	.select = stm32_exti_h_domain_select,
-	.alloc	= stm32_exti_h_domain_alloc,
-	.free	= stm32_exti_h_domain_free,
+static const struct irq_domain_ops stm32mp_exti_domain_ops = {
+	.match	= stm32mp_exti_domain_match,
+	.select = stm32mp_exti_domain_select,
+	.alloc	= stm32mp_exti_domain_alloc,
+	.free	= stm32mp_exti_domain_free,
 	.xlate = irq_domain_xlate_twocell,
 };
 
-static void stm32_exti_check_rif(struct stm32_exti_host_data *host_data)
+static void stm32mp_exti_check_rif(struct stm32mp_exti_host_data *host_data)
 {
 	u32 cid, cidcfgr, hwcfgr1;
 	unsigned int bank, i, event;
@@ -871,7 +871,7 @@ static void stm32_exti_check_rif(struct
 	}
 }
 
-static void stm32_exti_remove_irq(void *data)
+static void stm32mp_exti_remove_irq(void *data)
 {
 	struct irq_domain *domain = data;
 	struct fwnode_handle *fwnode = domain->fwnode;
@@ -882,21 +882,21 @@ static void stm32_exti_remove_irq(void *
 		irq_domain_free_fwnode(fwnode);
 }
 
-static int stm32_exti_remove(struct platform_device *pdev)
+static int stm32mp_exti_remove(struct platform_device *pdev)
 {
-	stm32_exti_h_syscore_deinit(pdev);
+	stm32mp_exti_syscore_deinit(pdev);
 	return 0;
 }
 
-static int stm32_exti_probe(struct platform_device *pdev)
+static int stm32mp_exti_probe(struct platform_device *pdev)
 {
 	int ret, i;
 	struct device *dev = &pdev->dev;
 	struct device_node *child, *np = dev->of_node, *wakeup_np;
 	struct irq_domain *parent_domain, *domain, *wakeup_domain;
 	struct fwnode_handle *fwnode;
-	struct stm32_exti_host_data *host_data;
-	const struct stm32_exti_drv_data *drv_data;
+	struct stm32mp_exti_host_data *host_data;
+	const struct stm32mp_exti_drv_data *drv_data;
 	char *name;
 
 	host_data = devm_kzalloc(dev, sizeof(*host_data), GFP_KERNEL);
@@ -946,9 +946,9 @@ static int stm32_exti_probe(struct platf
 		return PTR_ERR(host_data->base);
 
 	for (i = 0; i < drv_data->bank_nr; i++)
-		stm32_exti_chip_init(host_data, i, np);
+		stm32mp_exti_chip_init(host_data, i, np);
 
-	stm32_exti_check_rif(host_data);
+	stm32mp_exti_check_rif(host_data);
 
 	parent_domain = irq_find_host(of_irq_find_parent(np));
 	if (!parent_domain) {
@@ -958,7 +958,7 @@ static int stm32_exti_probe(struct platf
 
 	domain = irq_domain_add_hierarchy(parent_domain, 0,
 					  drv_data->bank_nr * IRQS_PER_BANK,
-					  np, &stm32_exti_h_domain_ops,
+					  np, &stm32mp_exti_domain_ops,
 					  host_data);
 
 	if (!domain) {
@@ -966,7 +966,7 @@ static int stm32_exti_probe(struct platf
 		return -ENOMEM;
 	}
 
-	ret = devm_add_action_or_reset(dev, stm32_exti_remove_irq, domain);
+	ret = devm_add_action_or_reset(dev, stm32mp_exti_remove_irq, domain);
 	if (ret)
 		return ret;
 
@@ -999,7 +999,7 @@ static int stm32_exti_probe(struct platf
 
 		domain = irq_domain_create_hierarchy(wakeup_domain, 0,
 						     drv_data->bank_nr * IRQS_PER_BANK,
-						     fwnode, &stm32_exti_h_domain_ops,
+						     fwnode, &stm32mp_exti_domain_ops,
 						     host_data);
 		if (!domain) {
 			dev_err(dev, "Could not register exti domain\n");
@@ -1007,41 +1007,41 @@ static int stm32_exti_probe(struct platf
 			return -ENOMEM;
 		}
 
-		ret = devm_add_action_or_reset(dev, stm32_exti_remove_irq, domain);
+		ret = devm_add_action_or_reset(dev, stm32mp_exti_remove_irq, domain);
 		if (ret)
 			return ret;
 	}
 
-	stm32_exti_h_syscore_init(host_data);
+	stm32mp_exti_syscore_init(host_data);
 
 	return 0;
 }
 
-static const struct of_device_id stm32_exti_ids[] = {
+static const struct of_device_id stm32mp_exti_ids[] = {
 	{ .compatible = "st,stm32mp1-exti", .data = &stm32mp1_drv_data},
 	{ .compatible = "st,stm32mp13-exti", .data = &stm32mp13_drv_data},
 	{},
 };
-MODULE_DEVICE_TABLE(of, stm32_exti_ids);
+MODULE_DEVICE_TABLE(of, stm32mp_exti_ids);
 
-static struct platform_driver stm32_exti_driver = {
-	.probe		= stm32_exti_probe,
-	.remove		= stm32_exti_remove,
+static struct platform_driver stm32mp_exti_driver = {
+	.probe		= stm32mp_exti_probe,
+	.remove		= stm32mp_exti_remove,
 	.driver		= {
-		.name	= "stm32_exti",
-		.of_match_table = stm32_exti_ids,
+		.name	= "stm32mp_exti",
+		.of_match_table = stm32mp_exti_ids,
 	},
 };
 
-static int __init stm32_exti_arch_init(void)
+static int __init stm32mp_exti_arch_init(void)
 {
-	return platform_driver_register(&stm32_exti_driver);
+	return platform_driver_register(&stm32mp_exti_driver);
 }
 
-static void __exit stm32_exti_arch_exit(void)
+static void __exit stm32mp_exti_arch_exit(void)
 {
-	return platform_driver_unregister(&stm32_exti_driver);
+	return platform_driver_unregister(&stm32mp_exti_driver);
 }
 
-arch_initcall(stm32_exti_arch_init);
-module_exit(stm32_exti_arch_exit);
+arch_initcall(stm32mp_exti_arch_init);
+module_exit(stm32mp_exti_arch_exit);
