From a187959e94e2e0cf7b87299581a73913efe789ca Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Tue, 19 Mar 2024 15:02:39 +0100
Subject: [PATCH 1053/1141] drm/stm: ltdc: Check rotation buffer length

Size of the rotation buffer must be larger than the size
of two frames (format RGB24).

Change-Id: I6f2c03790b1ff4b98e6d09b518a5617f5e5bf860
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/368186
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 39 +++++++++++++++++++++++++++++++++++++-
 1 file changed, 38 insertions(+), 1 deletion(-)

--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -900,7 +900,19 @@ static void ltdc_crtc_atomic_enable(stru
 		}
 	}
 
-	if (ldev->caps.crtc_rotation) {
+	/* check that an output rotation is required */
+	if (ldev->caps.crtc_rotation &&
+	    (orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP ||
+	     orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP)) {
+		/*
+		 * Size of the rotation buffer must be larger than the size
+		 * of two frames (format RGB24).
+		 */
+		if (ldev->rot_mem->size < mode->hdisplay * mode->vdisplay * 2 * 3) {
+			DRM_WARN("Rotation buffer too small");
+			return;
+		}
+
 		rota0_buf = (u32)ldev->rot_mem->base;
 		rota1_buf = (u32)ldev->rot_mem->base + (ldev->rot_mem->size >> 1);
 
@@ -2064,6 +2076,9 @@ static enum drm_mode_status ltdc_encoder
 	struct drm_device *ddev = encoder->dev;
 	struct ltdc_device *ldev =  ddev->dev_private;
 	struct device *dev = ddev->dev;
+	struct drm_connector *connector = NULL;
+	struct drm_connector_list_iter iter;
+	int orientation = DRM_MODE_PANEL_ORIENTATION_UNKNOWN;
 	int target = mode->clock * 1000;
 	int target_min = target - CLK_TOLERANCE_HZ;
 	int target_max = target + CLK_TOLERANCE_HZ;
@@ -2080,6 +2095,28 @@ static enum drm_mode_status ltdc_encoder
 
 	DRM_DEBUG_DRIVER("clk rate target %d, available %d\n", target, result);
 
+	/* Get the connector from encoder */
+	drm_connector_list_iter_begin(ddev, &iter);
+	drm_for_each_connector_iter(connector, &iter)
+		if (connector->encoder == encoder)
+			break;
+	drm_connector_list_iter_end(&iter);
+
+	if (connector)
+		orientation = connector->display_info.panel_orientation;
+
+	/* check that an output rotation is required */
+	if (ldev->caps.crtc_rotation &&
+	    (orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP ||
+	     orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP)) {
+		/*
+		 * Size of the rotation buffer must be larger than the size
+		 * of two frames (format RGB24).
+		 */
+		if (ldev->rot_mem->size < mode->hdisplay * mode->vdisplay * 2 * 3)
+			return MODE_MEM;
+	}
+
 	/* Filter modes according to the max frequency supported by the pads */
 	if (result > ldev->caps.pad_max_freq_hz)
 		return MODE_CLOCK_HIGH;
