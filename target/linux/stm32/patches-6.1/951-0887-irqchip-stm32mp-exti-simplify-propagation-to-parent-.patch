From 90d7cd25789afe86de016068a5a08638ccb4718d Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Mon, 12 Feb 2024 09:41:52 +0100
Subject: [PATCH 0887/1141] irqchip/stm32mp-exti: simplify propagation to
 parent controller

The EXTI driver _must_ have a parent interrupt controller; probe
fails if the parent interrupt controller is missing.
Thus, there is no need to check if the current irq_data has a
parent chip as this check is always true.

Simplify the code by dropping the useless check for parent's chip.
While there, properly propagate the error on irq_set_type() and
irq_set_wake() on configurable events.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: I9e9b3a86d58cd8e52e80cbf41aa50a913a91a974
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/363285
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
---
 drivers/irqchip/irq-stm32mp-exti.c | 41 ++++++++----------------------
 1 file changed, 10 insertions(+), 31 deletions(-)

--- a/drivers/irqchip/irq-stm32mp-exti.c
+++ b/drivers/irqchip/irq-stm32mp-exti.c
@@ -351,8 +351,7 @@ static void stm32mp_exti_eoi(struct irq_
 
 	raw_spin_unlock(&chip_data->rlock);
 
-	if (d->parent_data->chip)
-		irq_chip_eoi_parent(d);
+	irq_chip_eoi_parent(d);
 }
 
 static void stm32mp_exti_mask(struct irq_data *d)
@@ -364,8 +363,7 @@ static void stm32mp_exti_mask(struct irq
 	chip_data->mask_cache = stm32mp_exti_clr_bit(d, bank->imr_ofst);
 	raw_spin_unlock(&chip_data->rlock);
 
-	if (d->parent_data->chip)
-		irq_chip_mask_parent(d);
+	irq_chip_mask_parent(d);
 }
 
 static void stm32mp_exti_unmask(struct irq_data *d)
@@ -377,8 +375,7 @@ static void stm32mp_exti_unmask(struct i
 	chip_data->mask_cache = stm32mp_exti_set_bit(d, bank->imr_ofst);
 	raw_spin_unlock(&chip_data->rlock);
 
-	if (d->parent_data->chip)
-		irq_chip_unmask_parent(d);
+	irq_chip_unmask_parent(d);
 }
 
 static int stm32mp_exti_set_type(struct irq_data *d, unsigned int type)
@@ -416,11 +413,11 @@ unspinlock:
 unlock:
 	raw_spin_unlock(&chip_data->rlock);
 
-	/* configurable events only propagate level high type to GIC */
-	if (d->parent_data->chip)
-		irq_chip_set_type_parent(d, IRQ_TYPE_LEVEL_HIGH);
+	if (err)
+		return err;
 
-	return err;
+	/* configurable events only propagate level high type to GIC */
+	return irq_chip_set_type_parent(d, IRQ_TYPE_LEVEL_HIGH);
 }
 
 static int stm32mp_exti_set_wake(struct irq_data *d, unsigned int on)
@@ -437,25 +434,7 @@ static int stm32mp_exti_set_wake(struct
 
 	raw_spin_unlock(&chip_data->rlock);
 
-	if (d->parent_data->chip)
-		irq_chip_set_wake_parent(d, on);
-
-	return 0;
-}
-
-static int stm32mp_exti_set_affinity(struct irq_data *d,
-				     const struct cpumask *dest, bool force)
-{
-	if (d->parent_data->chip)
-		return irq_chip_set_affinity_parent(d, dest, force);
-
-	return IRQ_SET_MASK_OK_DONE;
-}
-
-static void stm32mp_exti_ack(struct irq_data *d)
-{
-	if (d->parent_data->chip)
-		irq_chip_ack_parent(d);
+	return irq_chip_set_wake_parent(d, on);
 }
 
 static int stm32mp_exti_suspend(struct device *dev)
@@ -523,7 +502,7 @@ static int stm32mp_exti_retrigger(struct
 static struct irq_chip stm32mp_exti_chip = {
 	.name			= "stm32mp-exti",
 	.irq_eoi		= stm32mp_exti_eoi,
-	.irq_ack		= stm32mp_exti_ack,
+	.irq_ack		= irq_chip_ack_parent,
 	.irq_mask		= stm32mp_exti_mask,
 	.irq_unmask		= stm32mp_exti_unmask,
 	.irq_request_resources	= irq_chip_request_resources_parent,
@@ -532,7 +511,7 @@ static struct irq_chip stm32mp_exti_chip
 	.irq_set_type		= stm32mp_exti_set_type,
 	.irq_set_wake		= stm32mp_exti_set_wake,
 	.flags			= IRQCHIP_MASK_ON_SUSPEND,
-	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? stm32mp_exti_set_affinity : NULL,
+	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? irq_chip_set_affinity_parent : NULL,
 };
 
 static struct irq_chip stm32mp_exti_chip_direct = {
