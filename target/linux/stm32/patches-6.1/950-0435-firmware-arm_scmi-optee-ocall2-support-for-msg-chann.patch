From 109720b05051737d8b5dce7f8893128bd0a3ffec Mon Sep 17 00:00:00 2001
From: Etienne Carriere <etienne.carriere@foss.st.com>
Date: Mon, 3 Apr 2023 12:42:42 +0200
Subject: [PATCH 435/529] firmware: arm_scmi: optee: ocall2 support for msg
 channel

Implements Ocall2 sequence for MSG SCMI channels. An MSG SCMI channel is
an SCMI channel using OP-TEE native shared memory. Agent (Linux)
passes the SCM shm reference when invoking SCMI PTA to create an Ocall2
threaded context (PTA command PTA_SCMI_CMD_OCALL2_MSG_THREAD) instead
of using a statically allocated and mapped IOMEM shred memory buffer.

Change-Id: I15bf552b7fccac146c92066ac7443edd52f1716a
Signed-off-by: Etienne Carriere <etienne.carriere@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/298716
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Eric FOURMONT <eric.fourmont-ext@st.com>
---
 drivers/firmware/arm_scmi/optee.c | 50 ++++++++++++++++++++++---------
 1 file changed, 36 insertions(+), 14 deletions(-)

--- a/drivers/firmware/arm_scmi/optee.c
+++ b/drivers/firmware/arm_scmi/optee.c
@@ -207,6 +207,11 @@ enum scmi_optee_ocall_reply {
 	 * issue Ocall command PTA_SCMI_OCALL_CMD_THREAD_READY again.
 	 */
 	PTA_SCMI_OCALL_PROCESS_SMT_MESSAGE = 2,
+	/*
+	 * On return of Ocall, SCMI PTA shall process channel's MSG SCMI message
+	 * and issue Ocall command PTA_SCMI_OCALL_CMD_THREAD_READY again.
+	 */
+	PTA_SCMI_OCALL_PROCESS_MSG = 3,
 };
 
 /*
@@ -588,18 +593,9 @@ static int close_ocall_thread(struct scm
 	return ret;
 }
 
-static int invoke_ocall_thread(struct scmi_optee_channel *channel,
-			       size_t msg_size)
+static int invoke_ocall_thread(struct scmi_optee_channel *channel)
 {
-	struct ocall_ctx *ocall_ctx = channel->ocall_ctx;
-	int ret = -EPROTO;
-
-	ocall_ctx->ocall_arg.out_param1 = PTA_SCMI_OCALL_PROCESS_SMT_MESSAGE;
-	ocall_ctx->ocall_arg.out_param2 = msg_size;
-
-	ret = invoke_optee_ocall(channel);
-
-	if (!ret && ocall_thread_is_ready(channel))
+	if (!invoke_optee_ocall(channel) && ocall_thread_is_ready(channel))
 		return 0;
 
 	if (return_is_ocall(channel->ocall_ctx))
@@ -610,6 +606,32 @@ static int invoke_ocall_thread(struct sc
 	return -EPROTO;
 }
 
+static int invoke_ocall_msg_thread(struct scmi_optee_channel *channel,
+				   size_t msg_size)
+{
+	struct ocall_ctx *ocall_ctx = channel->ocall_ctx;
+	int ret;
+
+	ocall_ctx->ocall_arg.out_param1 = PTA_SCMI_OCALL_PROCESS_MSG;
+	ocall_ctx->ocall_arg.out_param2 = msg_size;
+
+	ret = invoke_ocall_thread(channel);
+	if (!ret)
+		channel->rx_len = ocall_ctx->ocall_arg.in_param2;
+
+	return ret;
+}
+
+static int invoke_ocall_smt_thread(struct scmi_optee_channel *channel)
+{
+	struct ocall_ctx *ocall_ctx = channel->ocall_ctx;
+
+	ocall_ctx->ocall_arg.out_param1 = PTA_SCMI_OCALL_PROCESS_SMT_MESSAGE;
+	ocall_ctx->ocall_arg.out_param2 = 0;
+
+	return invoke_ocall_thread(channel);
+}
+
 static int invoke_process_smt_channel(struct scmi_optee_channel *channel)
 {
 	struct tee_ioctl_invoke_arg arg = {
@@ -877,8 +899,8 @@ static int scmi_optee_send_message(struc
 		msg_tx_prepare(channel->req.msg, xfer);
 
 		if (channel->ocall_ctx)
-			ret = invoke_ocall_thread(channel,
-						  msg_command_size(xfer));
+			ret = invoke_ocall_msg_thread(channel,
+						      msg_command_size(xfer));
 		else
 			ret = invoke_process_msg_channel(channel,
 							 msg_command_size(xfer));
@@ -886,7 +908,7 @@ static int scmi_optee_send_message(struc
 		shmem_tx_prepare(channel->req.shmem, xfer, cinfo);
 
 		if (channel->ocall_ctx)
-			ret = invoke_ocall_thread(channel, 0);
+			ret = invoke_ocall_smt_thread(channel);
 		else
 			ret = invoke_process_smt_channel(channel);
 	}
