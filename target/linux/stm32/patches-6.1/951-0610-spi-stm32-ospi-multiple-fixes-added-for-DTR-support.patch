From 1af0a39b9c8e440a1676c36de11fb421939e0461 Mon Sep 17 00:00:00 2001
From: Christophe Kerello <christophe.kerello@foss.st.com>
Date: Tue, 10 Oct 2023 18:33:47 +0200
Subject: [PATCH 0610/1141] spi: stm32-ospi: multiple fixes added for DTR
 support

- Improves STR calibration (SPI NAND and SPI NOR has there own READID
command).
- Add DTR calibration (Octal Macronix SPI NOR devices only).
- Add DTR support in the driver (DQSE included).
- Handle unaligned DTR access.
- DMA is used if more than 8 bytes are requested on a command.

Change-Id: I58b0c2289c44962cb1a8c2900b271546388e27fc
Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/333816
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Patrice CHOTARD <patrice.chotard@foss.st.com>
Tested-by: Christophe KERELLO <christophe.kerello@st.com>
Domain-Review: Patrice CHOTARD <patrice.chotard@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Christophe KERELLO <christophe.kerello@st.com>
---
 drivers/spi/spi-stm32-ospi.c | 711 +++++++++++++++++++++++++----------
 1 file changed, 512 insertions(+), 199 deletions(-)

diff --git a/drivers/spi/spi-stm32-ospi.c b/drivers/spi/spi-stm32-ospi.c
index b9f71ee4cf32..4881dbeadc48 100644
--- a/drivers/spi/spi-stm32-ospi.c
+++ b/drivers/spi/spi-stm32-ospi.c
@@ -8,14 +8,20 @@
 
 #define STM32_AUTOSUSPEND_DELAY -1
 
+#define MACRONIX_ID		0xc2
+
 struct stm32_ospi_flash {
 	struct spi_device *spi;
-	u32 cs;
 	u32 presc;
 	u32 dlyb_cr;
 	u32 dcr_reg;
-	u64 idcode;
-	bool calibrated;
+	u64 str_idcode;
+	u64 dtr_idcode;
+	bool is_spi_nor;
+	bool octal_dtr;
+	bool is_str_calibration;
+	bool dtr_calibration_done_once;
+	bool is_calibrated;
 	bool sample_later;
 };
 
@@ -31,7 +37,7 @@ struct stm32_ospi {
 	unsigned long status_timeout;
 
 	/*
-	 * to protect device configuration, could be different between
+	 * To protect device configuration, could be different between
 	 * 2 flash access
 	 */
 	struct mutex lock;
@@ -52,13 +58,15 @@ static int stm32_ospi_tx_dma(struct stm32_ospi *ospi,
 {
 	struct dma_async_tx_descriptor *desc;
 	struct stm32_omi *omi = ospi->omi;
+	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
 	void __iomem *regs_base = omi->regs_base;
 	enum dma_transfer_direction dma_dir;
 	struct dma_chan *dma_ch;
 	struct sg_table sgt;
 	dma_cookie_t cookie;
 	u32 cr, t_out;
-	int err;
+	u8 dummy = 0xff;
+	int err, ret;
 
 	if (op->data.dir == SPI_MEM_DATA_IN) {
 		dma_dir = DMA_DEV_TO_MEM;
@@ -68,8 +76,16 @@ static int stm32_ospi_tx_dma(struct stm32_ospi *ospi,
 		dma_ch = omi->dma_chtx;
 	}
 
+	if (flash->octal_dtr && op->addr.val % 2) {
+		/* Read/write dummy byte */
+		ret = stm32_omi_tx_poll(omi, &dummy, 1,
+					op->data.dir == SPI_MEM_DATA_IN);
+		if (ret)
+			return ret;
+	}
+
 	/*
-	 * spi_map_buf return -EINVAL if the buffer is not DMA-able
+	 * Spi_map_buf return -EINVAL if the buffer is not DMA-able
 	 * (DMA-able: in vmalloc | kmap | virt_addr_valid)
 	 */
 	err = spi_controller_dma_map_mem_op_data(ospi->ctrl, op, &sgt);
@@ -110,13 +126,24 @@ static int stm32_ospi_tx_dma(struct stm32_ospi *ospi,
 out_unmap:
 	spi_controller_dma_unmap_mem_op_data(ospi->ctrl, op, &sgt);
 
+	if (flash->octal_dtr && !err && (op->addr.val + op->data.nbytes) % 2) {
+		/* Read/write dummy byte */
+		ret = stm32_omi_tx_poll(omi, &dummy, 1,
+					op->data.dir == SPI_MEM_DATA_IN);
+		if (ret)
+			return ret;
+	}
+
 	return err;
 }
 
 static int stm32_ospi_tx(struct stm32_ospi *ospi, const struct spi_mem_op *op)
 {
 	struct stm32_omi *omi = ospi->omi;
+	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
 	u8 *buf;
+	u8 dummy = 0xff;
+	int ret;
 
 	if (!op->data.nbytes)
 		return 0;
@@ -125,7 +152,7 @@ static int stm32_ospi_tx(struct stm32_ospi *ospi, const struct spi_mem_op *op)
 		return stm32_ospi_tx_mm(ospi, op);
 	else if (((op->data.dir == SPI_MEM_DATA_IN && omi->dma_chrx) ||
 		 (op->data.dir == SPI_MEM_DATA_OUT && omi->dma_chtx)) &&
-		  op->data.nbytes > 4)
+		  op->data.nbytes > 8)
 		if (!stm32_ospi_tx_dma(ospi, op))
 			return 0;
 
@@ -134,8 +161,28 @@ static int stm32_ospi_tx(struct stm32_ospi *ospi, const struct spi_mem_op *op)
 	else
 		buf = (u8 *)op->data.buf.out;
 
-	return stm32_omi_tx_poll(omi, buf, op->data.nbytes,
-				 op->data.dir == SPI_MEM_DATA_IN);
+	if (flash->octal_dtr && op->addr.val % 2) {
+		/* Read/write dummy byte */
+		ret = stm32_omi_tx_poll(omi, &dummy, 1,
+					op->data.dir == SPI_MEM_DATA_IN);
+		if (ret)
+			return ret;
+	}
+
+	ret = stm32_omi_tx_poll(omi, buf, op->data.nbytes,
+				op->data.dir == SPI_MEM_DATA_IN);
+	if (ret)
+		return ret;
+
+	if (flash->octal_dtr && (op->addr.val + op->data.nbytes) % 2) {
+		/* Read/write dummy byte */
+		ret = stm32_omi_tx_poll(omi, &dummy, 1,
+					op->data.dir == SPI_MEM_DATA_IN);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
 }
 
 static int stm32_ospi_wait_poll_status(struct stm32_ospi *ospi,
@@ -176,7 +223,7 @@ static void stm32_ospi_set_prescaler(struct stm32_ospi *ospi, u32 presc)
 	void __iomem *regs_base = omi->regs_base;
 	u32 dcr2;
 
-	/* set prescaler */
+	/* Set prescaler */
 	dcr2 = readl_relaxed(regs_base + OSPI_DCR2);
 	dcr2 &= ~DCR2_PRESC_MASK;
 	dcr2 |= FIELD_PREP(DCR2_PRESC_MASK, presc);
@@ -190,40 +237,60 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 	struct stm32_omi *omi = ospi->omi;
 	void __iomem *regs_base = omi->regs_base;
 	u32 ccr, cr, tcr = 0;
+	u64 addr = op->addr.val;
+	unsigned int nbytes = op->data.nbytes;
 	int timeout, err = 0, err_poll_status = 0;
-	int ret;
 
-	dev_dbg(ospi->dev, "cmd:%#x mode:%d.%d.%d.%d addr:%#llx len:%#x\n",
-		op->cmd.opcode, op->cmd.buswidth, op->addr.buswidth,
-		op->dummy.buswidth, op->data.buswidth,
+	dev_dbg(ospi->dev, "cmd:%#x dtr:%d mode:%d.%d.%d.%d addr:%#llx len:%#x\n",
+		op->cmd.opcode, op->cmd.dtr, op->cmd.buswidth,
+		op->addr.buswidth, op->dummy.buswidth, op->data.buswidth,
 		op->addr.val, op->data.nbytes);
 
-	if (ospi->last_cs != spi->chip_select) {
-		ospi->last_cs = spi->chip_select;
-
-		stm32_omi_dlyb_stop(omi);
-		writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
-
-		stm32_ospi_set_prescaler(ospi, flash->presc);
-
-		if (flash->calibrated) {
-			ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
-			if (ret)
-				return ret;
-		}
-	}
-
 	cr = readl_relaxed(regs_base + OSPI_CR);
 	cr &= ~CR_CSSEL;
-	cr |= FIELD_PREP(CR_CSSEL, flash->cs);
+	cr |= FIELD_PREP(CR_CSSEL, spi->chip_select);
 	cr &= ~CR_FMODE_MASK;
 	cr |= FIELD_PREP(CR_FMODE_MASK, omi->fmode);
 	writel_relaxed(cr, regs_base + OSPI_CR);
 
-	if (op->data.nbytes)
-		writel_relaxed(op->data.nbytes - 1, regs_base + OSPI_DLR);
+	/*
+	 * When DTR mode and indirect read/write mode are set, there is a
+	 * constraint on the address and the number of bytes read or write
+	 * that should be even.
+	 */
+	if (flash->octal_dtr && omi->fmode != CR_FMODE_MM && op->data.nbytes) {
+		if (op->addr.val % 2) {
+			addr--;
+			nbytes++;
+		}
+
+		if ((op->addr.val + op->data.nbytes) % 2)
+			nbytes++;
+	}
+
+	writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
+
+	if (op->data.nbytes && omi->fmode != CR_FMODE_MM)
+		writel_relaxed(nbytes - 1, regs_base + OSPI_DLR);
 
 	ccr = FIELD_PREP(CCR_IMODE_MASK, stm32_ospi_get_mode(op->cmd.buswidth));
+	ccr |= FIELD_PREP(CCR_ISIZE_MASK, op->cmd.nbytes - 1);
+
+	if (op->cmd.dtr) {
+		ccr |= CCR_IDTR;
+		ccr |= CCR_DQSE;
+	}
+
+	if (op->addr.dtr)
+		ccr |= CCR_ADDTR;
+
+	if (op->data.dtr)
+		ccr |= CCR_DDTR;
+
+	if (op->data.dtr_swab16)
+		writel_relaxed(flash->dcr_reg |
+			       FIELD_PREP(DCR1_MTYP_MASK, DCR1_MTYP_MX_MODE),
+			       regs_base + OSPI_DCR1);
 
 	if (op->addr.nbytes) {
 		ccr |= FIELD_PREP(CCR_ADMODE_MASK,
@@ -235,23 +302,26 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 		tcr |= TCR_SSHIFT;
 
 	if (op->dummy.buswidth && op->dummy.nbytes) {
-		tcr |= FIELD_PREP(TCR_DCYC_MASK,
-				  op->dummy.nbytes * 8 / op->dummy.buswidth);
+		u8 dcyc = op->dummy.nbytes * 8 / op->dummy.buswidth;
+
+		if (op->dummy.dtr)
+			dcyc /= 2;
+
+		tcr |= FIELD_PREP(TCR_DCYC_MASK, dcyc);
 	}
+
 	writel_relaxed(tcr, regs_base + OSPI_TCR);
 
-	if (op->data.nbytes) {
+	if (op->data.nbytes)
 		ccr |= FIELD_PREP(CCR_DMODE_MASK,
 				  stm32_ospi_get_mode(op->data.buswidth));
-	}
 
 	writel_relaxed(ccr, regs_base + OSPI_CCR);
 
-	/* set instruction, must be set after ccr register update */
 	writel_relaxed(op->cmd.opcode, regs_base + OSPI_IR);
 
 	if (op->addr.nbytes && omi->fmode != CR_FMODE_MM)
-		writel_relaxed(op->addr.val, regs_base + OSPI_AR);
+		writel_relaxed(addr, regs_base + OSPI_AR);
 
 	if (omi->fmode == CR_FMODE_APM)
 		err_poll_status = stm32_ospi_wait_poll_status(ospi, op);
@@ -268,7 +338,7 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 	if (err || err_poll_status || omi->fmode == CR_FMODE_MM)
 		goto abort;
 
-	/* wait end of tx in indirect mode */
+	/* Wait end of tx in indirect mode */
 	err = stm32_omi_wait_cmd(omi);
 	if (err)
 		goto abort;
@@ -279,13 +349,294 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 	timeout = stm32_omi_abort(omi);
 	writel_relaxed(FCR_CTCF | FCR_CSMF, regs_base + OSPI_FCR);
 
-	if (err || err_poll_status || timeout)
+	if (!omi->calibration && (err || err_poll_status || timeout))
 		dev_err(ospi->dev, "%s err:%d err_poll_status:%d abort timeout:%d\n",
 			__func__, err, err_poll_status, timeout);
 
 	return err;
 }
 
+static int stm32_ospi_readid(struct stm32_omi *omi)
+{
+	struct stm32_ospi *ospi = platform_get_drvdata(omi->vdev);
+	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
+	struct spi_device *spi = flash->spi;
+	u64 *rx_buf = &ospi->id_buf;
+	struct spi_mem_op readid_op;
+	int ret;
+
+	omi->fmode = CR_FMODE_INDR;
+
+	if (flash->is_str_calibration) {
+		u8 nb_dummy_bytes = flash->is_spi_nor ? 0 : 1;
+
+		readid_op = (struct spi_mem_op)
+			    SPI_MEM_OP(SPI_MEM_OP_CMD(0x9f, 1),
+				       SPI_MEM_OP_NO_ADDR,
+				       SPI_MEM_OP_DUMMY(nb_dummy_bytes, 1),
+				       SPI_MEM_OP_DATA_IN(sizeof(*rx_buf),
+							  (u8 *)rx_buf, 1));
+	} else {
+		if (flash->octal_dtr && flash->is_spi_nor) {
+			u16 opcode;
+			u8 nb_addr_bytes;
+			u8 nb_dummy_bytes;
+
+			if ((flash->dtr_idcode & 0xff) == MACRONIX_ID) {
+				opcode = 0x9f60;
+				nb_addr_bytes = 4;
+				nb_dummy_bytes = 8;
+			} else {
+				/*
+				 * All memory providers are not currently
+				 * supported, feel free to add them
+				 */
+				return -EOPNOTSUPP;
+			}
+
+			readid_op = (struct spi_mem_op)
+				    SPI_MEM_OP(SPI_MEM_OP_CMD(opcode, 8),
+					       SPI_MEM_OP_ADDR(nb_addr_bytes, 0, 8),
+					       SPI_MEM_OP_DUMMY(nb_dummy_bytes, 8),
+					       SPI_MEM_OP_DATA_IN(sizeof(*rx_buf),
+								  (u8 *)rx_buf, 8));
+			readid_op.cmd.dtr = true;
+			readid_op.addr.dtr = true;
+			readid_op.dummy.dtr = true;
+			readid_op.data.dtr = true;
+			readid_op.cmd.nbytes = 2;
+		} else {
+			/*
+			 * Only OCTAL DTR calibration on SPI NOR devices
+			 * is currently supported
+			 */
+			return -EOPNOTSUPP;
+		}
+	}
+
+	if (spi->cs_gpiod)
+		gpiod_set_value_cansleep(spi->cs_gpiod, true);
+
+	ret = stm32_ospi_send(spi, &readid_op);
+
+	if (spi->cs_gpiod)
+		gpiod_set_value_cansleep(spi->cs_gpiod, false);
+
+	if (ret)
+		return ret;
+
+	dev_dbg(ospi->dev, "Flash ID 0x%08llx\n", *rx_buf);
+
+	if (flash->is_str_calibration) {
+		/*
+		 * On stm32_ospi_readid() first execution, save the golden
+		 * read id
+		 */
+		if (!flash->str_idcode) {
+			flash->str_idcode = *rx_buf;
+
+			if (flash->is_spi_nor) {
+				/* Build DTR id code */
+				if ((*rx_buf & 0xff) == MACRONIX_ID) {
+					/*
+					 * Retrieve odd array and re-sort id
+					 * because of read id format will be
+					 * A-A-B-B-C-C after enter into octal
+					 * dtr mode for Macronix flashes.
+					 */
+					flash->dtr_idcode = *rx_buf & 0xff;
+					flash->dtr_idcode |= (*rx_buf & 0xff) << 8;
+					flash->dtr_idcode |= (*rx_buf & 0xff00) << 8;
+					flash->dtr_idcode |= (*rx_buf & 0xff00) << 16;
+					flash->dtr_idcode |= (*rx_buf & 0xff0000) << 16;
+					flash->dtr_idcode |= (*rx_buf & 0xff0000) << 24;
+					flash->dtr_idcode |= (*rx_buf & 0xff000000) << 24;
+					flash->dtr_idcode |= (*rx_buf & 0xff000000) << 32;
+				} else {
+					flash->dtr_idcode = *rx_buf;
+				}
+			}
+		}
+
+		if (*rx_buf == flash->str_idcode)
+			return 0;
+	} else if (*rx_buf == flash->dtr_idcode) {
+		return 0;
+	}
+
+	return -EIO;
+}
+
+static int stm32_ospi_str_calibration(struct stm32_ospi *ospi)
+{
+	struct stm32_omi *omi = ospi->omi;
+	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
+	struct spi_device *spi = flash->spi;
+	void __iomem *regs_base = omi->regs_base;
+	u32 bus_freq;
+	u8 window_len_tcr0 = 0, window_len_tcr1 = 0;
+	int ret, ret_tcr0, ret_tcr1;
+
+	/*
+	 * Set memory device at low frequency (50MHz) and sent
+	 * READID (0x9F) command, save the answer as golden answer
+	 */
+	flash->presc = DIV_ROUND_UP(omi->clk_rate,
+				    STM32_DLYB_FREQ_THRESHOLD) - 1;
+	stm32_ospi_set_prescaler(ospi, flash->presc);
+
+	ret = stm32_ospi_readid(omi);
+	if (ret)
+		return ret;
+
+	/*
+	 * Set memory device at expected frequency read from DT
+	 * prescaler should be set before locking the DLL
+	 */
+	flash->presc = DIV_ROUND_UP(omi->clk_rate, spi->max_speed_hz) - 1;
+	stm32_ospi_set_prescaler(ospi, flash->presc);
+	bus_freq = DIV_ROUND_UP(omi->clk_rate, flash->presc + 1);
+
+	/* Calibration needed above 50MHz */
+	if (bus_freq <= STM32_DLYB_FREQ_THRESHOLD)
+		return 0;
+
+	flash->dcr_reg &= ~DCR1_DLYBYP;
+	writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
+
+	ret = stm32_omi_dlyb_init(omi, false, 0);
+	if (ret)
+		return ret;
+
+	/*
+	 * Perform only Rx TAP selection
+	 * When DTR support will be added, Rx/Tx TAP selection will have to
+	 * be performed
+	 */
+	ret_tcr0 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr0);
+	if (!ret_tcr0)
+		/*
+		 * Save flash delay block configuration, will be restored
+		 * each time this flash is addressed
+		 */
+		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
+
+	stm32_omi_dlyb_stop(omi);
+	ret = stm32_omi_dlyb_init(omi, false, 0);
+	if (ret)
+		return ret;
+
+	flash->sample_later = true;
+	ret_tcr1 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr1);
+	if (ret_tcr0 && ret_tcr1) {
+		dev_info(ospi->dev, "Calibration phase failed\n");
+		return ret_tcr0;
+	}
+
+	if (window_len_tcr0 >= window_len_tcr1) {
+		flash->sample_later = false;
+		stm32_omi_dlyb_stop(omi);
+
+		ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
+		if (ret)
+			return ret;
+	} else {
+		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
+	}
+
+	flash->is_calibrated = true;
+
+	return 0;
+}
+
+static int stm32_ospi_dtr_calibration(struct stm32_ospi *ospi)
+{
+	struct stm32_omi *omi = ospi->omi;
+	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
+	void __iomem *regs_base = omi->regs_base;
+	u32 prescaler, bus_freq;
+	u16 period_ps = 0;
+	u8 window_len = 0;
+	int ret;
+	bool bypass_mode = false;
+
+	flash->dcr_reg &= ~DCR1_DLYBYP;
+	writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
+
+	prescaler = FIELD_GET(DCR2_PRESC_MASK,
+			      readl(regs_base + OSPI_DCR2));
+	bus_freq = DIV_ROUND_UP(omi->clk_rate, prescaler + 1);
+
+	if (prescaler)
+		writel_relaxed(TCR_DHQC, regs_base + OSPI_TCR);
+
+	if (bus_freq <= STM32_DLYB_FREQ_THRESHOLD) {
+		bypass_mode = true;
+		period_ps = NSEC_PER_SEC / (bus_freq / 1000);
+	}
+
+	ret = stm32_omi_dlyb_init(omi, bypass_mode, period_ps);
+	if (ret) {
+		dev_err(ospi->dev, "Can't enable delay block\n");
+		return 0;
+	}
+
+	if (bypass_mode || prescaler)
+		/* Perform only RX TAP selection */
+		ret = stm32_omi_dlyb_find_tap(omi, true, &window_len);
+	else
+		/* Perform RX/TX TAP selection */
+		ret = stm32_omi_dlyb_find_tap(omi, false, &window_len);
+
+	if (ret) {
+		dev_err(ospi->dev, "Calibration failed\n");
+		if (!bypass_mode)
+			/* Stop delay block when configured in lock mode */
+			stm32_omi_dlyb_stop(omi);
+	} else {
+		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
+		flash->is_calibrated = true;
+	}
+
+	return ret;
+}
+
+static int stm32_ospi_prepare_to_send(struct spi_device *spi,
+				      const struct spi_mem_op *op)
+{
+	struct stm32_ospi *ospi = spi_controller_get_devdata(spi->master);
+	struct stm32_ospi_flash *flash = &ospi->flash[spi->chip_select];
+	struct stm32_omi *omi = ospi->omi;
+	int ret = 0;
+
+	if (ospi->last_cs != spi->chip_select) {
+		ospi->last_cs = spi->chip_select;
+
+		stm32_omi_dlyb_stop(omi);
+		stm32_ospi_set_prescaler(ospi, flash->presc);
+
+		if (flash->is_calibrated) {
+			ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
+			if (ret)
+				return ret;
+		}
+	}
+
+	if (op->cmd.dtr && !flash->dtr_calibration_done_once) {
+		stm32_omi_dlyb_stop(omi);
+		flash->sample_later = false;
+		flash->octal_dtr = (op->cmd.nbytes == 2);
+
+		ret = stm32_ospi_dtr_calibration(ospi);
+		if (ret)
+			return ret;
+
+		flash->dtr_calibration_done_once = true;
+	}
+
+	return ret;
+}
+
 static int stm32_ospi_poll_status(struct spi_mem *mem,
 				  const struct spi_mem_op *op,
 				  u16 mask, u16 match,
@@ -303,15 +654,16 @@ static int stm32_ospi_poll_status(struct spi_mem *mem,
 		return ret;
 
 	mutex_lock(&ospi->lock);
-
 	writel_relaxed(mask, regs_base + OSPI_PSMKR);
 	writel_relaxed(match, regs_base + OSPI_PSMAR);
 	omi->fmode = CR_FMODE_APM;
 	ospi->status_timeout = timeout_ms;
 
-	ret = stm32_ospi_send(mem->spi, op);
-	mutex_unlock(&ospi->lock);
+	ret = stm32_ospi_prepare_to_send(mem->spi, op);
+	if (!ret)
+		ret = stm32_ospi_send(mem->spi, op);
 
+	mutex_unlock(&ospi->lock);
 	pm_runtime_mark_last_busy(omi->dev);
 	pm_runtime_put_autosuspend(omi->dev);
 
@@ -334,9 +686,11 @@ static int stm32_ospi_exec_op(struct spi_mem *mem, const struct spi_mem_op *op)
 	else
 		omi->fmode = CR_FMODE_INDW;
 
-	ret = stm32_ospi_send(mem->spi, op);
-	mutex_unlock(&ospi->lock);
+	ret = stm32_ospi_prepare_to_send(mem->spi, op);
+	if (!ret)
+		ret = stm32_ospi_send(mem->spi, op);
 
+	mutex_unlock(&ospi->lock);
 	pm_runtime_mark_last_busy(omi->dev);
 	pm_runtime_put_autosuspend(omi->dev);
 
@@ -351,7 +705,7 @@ static int stm32_ospi_dirmap_create(struct spi_mem_dirmap_desc *desc)
 	if (desc->info.op_tmpl.data.dir == SPI_MEM_DATA_OUT)
 		return -EOPNOTSUPP;
 
-	/* should never happen, as mm_base == null is an error probe exit condition */
+	/* Should never happen, as mm_base == null is an error probe exit condition */
 	if (!omi->mm_base && desc->info.op_tmpl.data.dir == SPI_MEM_DATA_IN)
 		return -EOPNOTSUPP;
 
@@ -375,7 +729,8 @@ static ssize_t stm32_ospi_dirmap_read(struct spi_mem_dirmap_desc *desc,
 		return ret;
 
 	mutex_lock(&ospi->lock);
-	/* make a local copy of desc op_tmpl and complete dirmap rdesc
+	/*
+	 * Make a local copy of desc op_tmpl and complete dirmap rdesc
 	 * spi_mem_op template with offs, len and *buf in  order to get
 	 * all needed transfer information into struct spi_mem_op
 	 */
@@ -392,9 +747,11 @@ static ssize_t stm32_ospi_dirmap_read(struct spi_mem_dirmap_desc *desc,
 	else
 		omi->fmode = CR_FMODE_INDR;
 
-	ret = stm32_ospi_send(desc->mem->spi, &op);
-	mutex_unlock(&ospi->lock);
+	ret = stm32_ospi_prepare_to_send(desc->mem->spi, &op);
+	if (!ret)
+		ret = stm32_ospi_send(desc->mem->spi, &op);
 
+	mutex_unlock(&ospi->lock);
 	pm_runtime_mark_last_busy(omi->dev);
 	pm_runtime_put_autosuspend(omi->dev);
 
@@ -442,7 +799,7 @@ static int stm32_ospi_transfer_one_message(struct spi_controller *ctrl,
 			op.dummy.nbytes = transfer->len;
 			dummy_bytes = transfer->len;
 
-			/* if happens, means that message is not correctly built */
+			/* If happens, means that message is not correctly built */
 			if (list_is_last(&transfer->transfer_list, &msg->transfers)) {
 				ret = -EINVAL;
 				goto end_of_transfer;
@@ -465,6 +822,10 @@ static int stm32_ospi_transfer_one_message(struct spi_controller *ctrl,
 			op.data.buf.out = transfer->tx_buf;
 		}
 
+		ret = stm32_ospi_prepare_to_send(spi, &op);
+		if (ret)
+			goto end_of_transfer;
+
 		ret = stm32_ospi_send(spi, &op);
 		if (ret)
 			goto end_of_transfer;
@@ -486,127 +847,6 @@ static int stm32_ospi_transfer_one_message(struct spi_controller *ctrl,
 	return ret;
 }
 
-static int stm32_ospi_readid(struct stm32_omi *omi)
-{
-	struct stm32_ospi *ospi = platform_get_drvdata(omi->vdev);
-	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
-	struct spi_device *spi = flash->spi;
-	u64 *rx_buf = &ospi->id_buf;
-	const struct spi_mem_op readid_op =
-		SPI_MEM_OP(SPI_MEM_OP_CMD(0x9F, 1),
-			   SPI_MEM_OP_NO_ADDR,
-			   SPI_MEM_OP_NO_DUMMY,
-			   SPI_MEM_OP_DATA_IN(sizeof(*rx_buf), (u8 *)rx_buf, 1));
-	int ret;
-
-	omi->fmode = CR_FMODE_INDR;
-
-	if (spi->cs_gpiod)
-		gpiod_set_value_cansleep(spi->cs_gpiod, true);
-
-	ret = stm32_ospi_send(spi, &readid_op);
-
-	if (spi->cs_gpiod)
-		gpiod_set_value_cansleep(spi->cs_gpiod, false);
-
-	if (ret)
-		return ret;
-
-	dev_dbg(ospi->dev, "Flash ID 0x%08llx\n", *rx_buf);
-
-	/*
-	 * In case of SNAND, the first byte is a dummy byte. Depending of
-	 * memory device, its value can be different in function of frequency.
-	 * Ignore this byte and force its value to 0.
-	 */
-	*rx_buf &= 0xffffffffffffff00;
-
-	/* On stm32_ospi_readid() first execution, save the golden READID command's answer */
-	if (!flash->idcode)
-		flash->idcode = *rx_buf;
-
-	if (*rx_buf == flash->idcode)
-		return 0;
-
-	return -EIO;
-}
-
-static int stm32_ospi_calibration(struct stm32_ospi *ospi)
-{
-	struct stm32_omi *omi = ospi->omi;
-	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
-	struct spi_device *spi = flash->spi;
-	void __iomem *regs_base = omi->regs_base;
-	u8 window_len_tcr0 = 0, window_len_tcr1 = 0;
-	int ret, ret_tcr0, ret_tcr1;
-
-	/*
-	 * set memory device at low frequency (50MHz) and sent
-	 * READID (0x9F) command, save the answer as golden answer
-	 */
-	flash->presc = DIV_ROUND_UP(omi->clk_rate,
-				    STM32_DLYB_FREQ_THRESHOLD) - 1;
-	stm32_ospi_set_prescaler(ospi, flash->presc);
-
-	ret = stm32_ospi_readid(omi);
-	if (ret)
-		return ret;
-
-	/*
-	 * set memory device at expected frequency read from DT
-	 * prescaler should be set befor locking the DLL
-	 */
-	flash->presc = DIV_ROUND_UP(omi->clk_rate, spi->max_speed_hz) - 1;
-	stm32_ospi_set_prescaler(ospi, flash->presc);
-
-	flash->dcr_reg &= ~DCR1_DLYBYP;
-	writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
-
-	ret = stm32_omi_dlyb_init(omi, false, 0);
-	if (ret)
-		return ret;
-
-	/*
-	 * perform only Rx TAP selection
-	 * when DTR support will be added, Rx/Tx TAP selection will have to
-	 * be performed
-	 */
-	ret_tcr0 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr0);
-	if (!ret_tcr0)
-		/*
-		 * save flash delay block configuration, will be restored
-		 * each time this flash is addressed
-		 */
-		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
-
-	stm32_omi_dlyb_stop(omi);
-	ret = stm32_omi_dlyb_init(omi, false, 0);
-	if (ret)
-		return ret;
-
-	flash->sample_later = true;
-	ret_tcr1 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr1);
-	if (ret_tcr0 && ret_tcr1) {
-		dev_info(ospi->dev, "Calibration phase failed\n");
-		return ret_tcr0;
-	}
-
-	if (window_len_tcr0 >= window_len_tcr1) {
-		flash->sample_later = false;
-		stm32_omi_dlyb_stop(omi);
-
-		ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
-		if (ret)
-			return ret;
-	} else {
-		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
-	}
-
-	flash->calibrated = true;
-
-	return 0;
-}
-
 static int stm32_ospi_setup(struct spi_device *spi)
 {
 	struct spi_controller *ctrl = spi->master;
@@ -614,7 +854,6 @@ static int stm32_ospi_setup(struct spi_device *spi)
 	struct stm32_omi *omi = ospi->omi;
 	struct stm32_ospi_flash *flash;
 	void __iomem *regs_base = omi->regs_base;
-	u32 bus_freq;
 	int ret;
 
 	if (ctrl->busy)
@@ -628,7 +867,6 @@ static int stm32_ospi_setup(struct spi_device *spi)
 		return ret;
 
 	flash = &ospi->flash[spi->chip_select];
-	flash->cs = spi->chip_select;
 	flash->presc = DIV_ROUND_UP(omi->clk_rate, spi->max_speed_hz) - 1;
 	flash->spi = spi;
 
@@ -637,54 +875,102 @@ static int stm32_ospi_setup(struct spi_device *spi)
 	ospi->cr_reg = CR_APMS | 3 << CR_FTHRES_SHIFT | CR_EN;
 	writel_relaxed(ospi->cr_reg, regs_base + OSPI_CR);
 
-	/* stop the DLL */
+	/* Stop the DLL */
 	stm32_omi_dlyb_stop(omi);
 
-	/* set dcr fsize to max address */
+	/* Set dcr fsize to max address */
 	flash->dcr_reg = DCR1_DEVSIZE_MASK | DCR1_DLYBYP;
 	writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
 
 	stm32_ospi_set_prescaler(ospi, flash->presc);
 
 	ospi->last_cs = spi->chip_select;
+	flash->is_str_calibration = true;
 
-	bus_freq = omi->clk_rate / (flash->presc + 1);
-	/* calibration needed above 50MHz*/
-	if (bus_freq > STM32_DLYB_FREQ_THRESHOLD) {
-		ret = stm32_ospi_calibration(ospi);
-		if (ret) {
-			dev_info(ospi->dev, "Set flash frequency to a safe value (%d Hz)\n",
-				 STM32_DLYB_FREQ_THRESHOLD);
+	ret = stm32_ospi_str_calibration(ospi);
+	if (ret) {
+		dev_info(ospi->dev, "Set flash frequency to a safe value (%d Hz)\n",
+			 STM32_DLYB_FREQ_THRESHOLD);
 
-			/* stop the DLL */
-			stm32_omi_dlyb_stop(omi);
-			flash->sample_later = false;
+		/* Stop the DLL */
+		stm32_omi_dlyb_stop(omi);
+		flash->sample_later = false;
 
-			flash->presc = DIV_ROUND_UP(omi->clk_rate,
-						    STM32_DLYB_FREQ_THRESHOLD) - 1;
-			stm32_ospi_set_prescaler(ospi, flash->presc);
+		flash->presc = DIV_ROUND_UP(omi->clk_rate,
+					    STM32_DLYB_FREQ_THRESHOLD) - 1;
+		stm32_ospi_set_prescaler(ospi, flash->presc);
 
-			flash->dcr_reg |= DCR1_DLYBYP;
-			writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
-		}
+		flash->dcr_reg |= DCR1_DLYBYP;
+		writel_relaxed(flash->dcr_reg, regs_base + OSPI_DCR1);
 	}
-	mutex_unlock(&ospi->lock);
 
+	flash->is_str_calibration = false;
+	mutex_unlock(&ospi->lock);
 	pm_runtime_mark_last_busy(omi->dev);
 	pm_runtime_put_autosuspend(omi->dev);
 
 	return 0;
 }
 
+static bool stm32_ospi_supports_mem_op(struct spi_mem *mem,
+				       const struct spi_mem_op *op)
+{
+	bool all_true, all_false;
+
+	/*
+	 * Op->dummy.dtr is required for converting nbytes into ncycles.
+	 * Also, don't check the dtr field of the op phase having zero nbytes.
+	 */
+	all_true = op->cmd.dtr &&
+		   (!op->addr.nbytes || op->addr.dtr) &&
+		   (!op->dummy.nbytes || op->dummy.dtr) &&
+		   (!op->data.nbytes || op->data.dtr);
+
+	all_false = !op->cmd.dtr && !op->addr.dtr && !op->dummy.dtr &&
+		    !op->data.dtr;
+
+	if (all_true) {
+		/* Right now we only support 8-8-8 DTR mode. */
+		if (op->cmd.nbytes && op->cmd.buswidth != 8)
+			return false;
+		if (op->addr.nbytes && op->addr.buswidth != 8)
+			return false;
+		if (op->data.nbytes && op->data.buswidth != 8)
+			return false;
+	} else if (!all_false) {
+		/* Mixed DTR modes are not supported. */
+		return false;
+	}
+
+	if (op->data.buswidth > 8 || op->addr.buswidth > 8 ||
+	    op->dummy.buswidth > 8 || op->cmd.buswidth > 8)
+		return false;
+
+	if (op->cmd.nbytes > 4 || op->addr.nbytes > 4)
+		return false;
+
+	if ((!op->dummy.dtr && op->dummy.nbytes > 32) ||
+	    (op->dummy.dtr && op->dummy.nbytes > 64))
+		return false;
+
+	return spi_mem_default_supports_op(mem, op);
+}
+
 /*
- * no special host constraint, so use default spi_mem_default_supports_op
+ * No special host constraint, so use default spi_mem_default_supports_op
  * to check supported mode.
  */
 static const struct spi_controller_mem_ops stm32_ospi_mem_ops = {
-	.exec_op	= stm32_ospi_exec_op,
-	.dirmap_create	= stm32_ospi_dirmap_create,
-	.dirmap_read	= stm32_ospi_dirmap_read,
-	.poll_status	= stm32_ospi_poll_status,
+	.exec_op = stm32_ospi_exec_op,
+	.dirmap_create = stm32_ospi_dirmap_create,
+	.dirmap_read = stm32_ospi_dirmap_read,
+	.poll_status = stm32_ospi_poll_status,
+	.supports_op = stm32_ospi_supports_mem_op,
+};
+
+static const struct spi_controller_mem_caps stm32_ospi_mem_caps = {
+	.dtr = true,
+	.dtr_swab16 = true,
 };
 
 static int stm32_ospi_probe(struct platform_device *pdev)
@@ -695,6 +981,7 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 	struct stm32_ospi *ospi;
 	struct stm32_omi *omi = dev_get_drvdata(parent);
 	struct dma_slave_config dma_cfg;
+	struct device_node *child;
 	int ret;
 
 	ctrl = devm_spi_alloc_master(dev, sizeof(*ospi));
@@ -726,6 +1013,7 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 	ctrl->setup = stm32_ospi_setup;
 	ctrl->bus_num = -1;
 	ctrl->mem_ops = &stm32_ospi_mem_ops;
+	ctrl->mem_caps = &stm32_ospi_mem_caps;
 	ctrl->use_gpio_descriptors = true;
 	ctrl->transfer_one_message = stm32_ospi_transfer_one_message;
 	ctrl->num_chipselect = STM32_OMI_MAX_NORCHIP;
@@ -745,6 +1033,31 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 		reset_control_deassert(omi->rstc);
 	}
 
+	/* Find memory model on each child node (SPI NOR or SPI NAND) */
+	for_each_available_child_of_node(omi->dev->of_node, child) {
+		u32 cs;
+
+		ret = of_property_read_u32(child, "reg", &cs);
+		if (ret) {
+			dev_err(ospi->dev, "could not retrieve reg property: %d\n",
+				ret);
+			of_node_put(child);
+			return ret;
+		}
+
+		if (cs >= STM32_OMI_MAX_NORCHIP) {
+			dev_err(ospi->dev, "invalid reg value: %d\n", cs);
+			of_node_put(child);
+			return -EINVAL;
+		}
+
+		if (of_device_is_compatible(child, "jedec,spi-nor")) {
+			struct stm32_ospi_flash *flash = &ospi->flash[cs];
+
+			flash->is_spi_nor = true;
+		}
+	}
+
 	ret = spi_register_master(ctrl);
 	if (ret)
 		goto err_spi_register;
@@ -755,7 +1068,7 @@ static int stm32_ospi_probe(struct platform_device *pdev)
 	return 0;
 
 err_spi_register:
-	/* disable ospi */
+	/* Disable ospi */
 	writel_relaxed(0, omi->regs_base + OSPI_CR);
 	mutex_destroy(&ospi->lock);
 	pm_runtime_put_sync_suspend(omi->dev);
@@ -774,7 +1087,7 @@ static int stm32_ospi_remove(struct platform_device *pdev)
 		return ret;
 
 	spi_unregister_master(ospi->ctrl);
-	/* disable ospi */
+	/* Disable ospi */
 	writel_relaxed(0, omi->regs_base + OSPI_CR);
 	stm32_omi_dlyb_stop(omi);
 	mutex_destroy(&ospi->lock);
-- 
2.39.2

