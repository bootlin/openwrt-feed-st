From 55836138bcd4640062d8324f69fa9631065c7fc9 Mon Sep 17 00:00:00 2001
From: Patrice Chotard <patrice.chotard@foss.st.com>
Date: Wed, 19 May 2021 10:22:42 +0200
Subject: [PATCH 0222/1141] memory: stm32: Add support of OSPI Memory Interface
 driver

Add the OSPI Memory Interface driver (OMI). It's the "back end"
driver providing APIs to the both "front end" HyperBus and OSPI drivers.
This driver registers either SPI or HyperFLash device depending on the
contents of the device tree subnode.

Signed-off-by: Patrice Chotard <patrice.chotard@foss.st.com>
Change-Id: I85acb1e48763d6f10c7438e8a2c227bf56fbd94e
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/207053
Reviewed-by: Christophe KERELLO <christophe.kerello@st.com>
---
 drivers/memory/Kconfig     |   8 +
 drivers/memory/Makefile    |   1 +
 drivers/memory/stm32-omi.c | 346 +++++++++++++++++++++++++++++++++++++
 include/memory/stm32-omi.h | 167 ++++++++++++++++++
 4 files changed, 522 insertions(+)
 create mode 100644 drivers/memory/stm32-omi.c
 create mode 100644 include/memory/stm32-omi.h

diff --git a/drivers/memory/Kconfig b/drivers/memory/Kconfig
index 91774e6ee624..bb77bb054e28 100644
--- a/drivers/memory/Kconfig
+++ b/drivers/memory/Kconfig
@@ -236,6 +236,14 @@ config STM32_FMC2_EBI
 	  devices (like SRAM, ethernet adapters, FPGAs, LCD displays, ...) on
 	  SOCs containing the FMC2 External Bus Interface.
 
+config STM32_OMI
+	tristate "Support for OSPI Memory Interface on STM32MP SoCs"
+	depends on ARCH_STM32 || COMPILE_TEST
+	help
+	  Select this option to enable the STM32 OSPI Memory Interface controller
+	  (OMI) which provides either SPI or HyperBus support. This allows to support
+	  sNOR, sNAND or HyperFlash devices.
+
 source "drivers/memory/samsung/Kconfig"
 source "drivers/memory/tegra/Kconfig"
 
diff --git a/drivers/memory/Makefile b/drivers/memory/Makefile
index e148f636c082..2653b59945b7 100644
--- a/drivers/memory/Makefile
+++ b/drivers/memory/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_DA8XX_DDRCTL)	+= da8xx-ddrctl.o
 obj-$(CONFIG_PL353_SMC)		+= pl353-smc.o
 obj-$(CONFIG_RENESAS_RPCIF)	+= renesas-rpc-if.o
 obj-$(CONFIG_STM32_FMC2_EBI)	+= stm32-fmc2-ebi.o
+obj-$(CONFIG_STM32_OMI)		+= stm32-omi.o
 
 obj-$(CONFIG_SAMSUNG_MC)	+= samsung/
 obj-$(CONFIG_TEGRA_MC)		+= tegra/
diff --git a/drivers/memory/stm32-omi.c b/drivers/memory/stm32-omi.c
new file mode 100644
index 000000000000..c8f861a80507
--- /dev/null
+++ b/drivers/memory/stm32-omi.c
@@ -0,0 +1,346 @@
+// SPDX-License-Identifier: GPL
+/*
+ * Copyright (C) 2022, STMicroelectronics - All Rights Reserved
+ * Author(s): Patrice Chotard <patrice.chotard@foss.st.com> for STMicroelectronics.
+ */
+
+#include <memory/stm32-omi.h>
+
+static void stm32_omi_read_fifo(u8 *val, void __iomem *addr)
+{
+	*val = readb_relaxed(addr);
+}
+
+static void stm32_omi_write_fifo(u8 *val, void __iomem *addr)
+{
+	writeb_relaxed(*val, addr);
+}
+
+int stm32_omi_abort(struct stm32_omi *omi)
+{
+	void __iomem *regs_base = omi->regs_base;
+	u32 cr;
+	int timeout;
+
+	cr = readl_relaxed(regs_base + OSPI_CR) | CR_ABORT;
+	writel_relaxed(cr, regs_base + OSPI_CR);
+
+	/* wait clear of abort bit by hw */
+	timeout = readl_relaxed_poll_timeout_atomic(regs_base + OSPI_CR,
+						    cr, !(cr & CR_ABORT), 1,
+						    STM32_ABT_TIMEOUT_US);
+
+	if (timeout)
+		dev_err(omi->dev, "%s abort timeout:%d\n", __func__, timeout);
+
+	return timeout;
+}
+EXPORT_SYMBOL(stm32_omi_abort);
+
+int stm32_omi_tx_poll(struct stm32_omi *omi, u8 *buf, u32 len, bool read)
+{
+	void __iomem *regs_base = omi->regs_base;
+	void (*tx_fifo)(u8 *val, void __iomem *addr);
+	u32 sr;
+	int ret;
+
+	if (read)
+		tx_fifo = stm32_omi_read_fifo;
+	else
+		tx_fifo = stm32_omi_write_fifo;
+
+	while (len--) {
+		ret = readl_relaxed_poll_timeout_atomic(regs_base + OSPI_SR,
+							sr, sr & SR_FTF, 1,
+							STM32_FIFO_TIMEOUT_US);
+		if (ret) {
+			dev_err(omi->dev, "fifo timeout (len:%d stat:%#x)\n",
+				len, sr);
+			return ret;
+		}
+		tx_fifo(buf++, regs_base + OSPI_DR);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(stm32_omi_tx_poll);
+
+int stm32_omi_wait_nobusy(struct stm32_omi *omi)
+{
+	u32 sr;
+
+	return readl_relaxed_poll_timeout_atomic(omi->regs_base + OSPI_SR,
+						 sr, !(sr & SR_BUSY), 1,
+						 STM32_BUSY_TIMEOUT_US);
+}
+EXPORT_SYMBOL(stm32_omi_wait_nobusy);
+
+int stm32_omi_wait_cmd(struct stm32_omi *omi)
+{
+	void __iomem *regs_base = omi->regs_base;
+	u32 cr, sr;
+	int err = 0;
+
+	if ((readl_relaxed(regs_base + OSPI_SR) & SR_TCF) ||
+	    omi->fmode == CR_FMODE_APM)
+		goto out;
+
+	reinit_completion(&omi->data_completion);
+	cr = readl_relaxed(regs_base + OSPI_CR);
+	writel_relaxed(cr | CR_TCIE | CR_TEIE, regs_base + OSPI_CR);
+
+	if (!wait_for_completion_timeout(&omi->data_completion,
+				msecs_to_jiffies(STM32_COMP_TIMEOUT_MS))) {
+		err = -ETIMEDOUT;
+	} else {
+		sr = readl_relaxed(regs_base + OSPI_SR);
+		if (sr & SR_TEF)
+			err = -EIO;
+	}
+
+out:
+	/* clear flags */
+	writel_relaxed(FCR_CTCF | FCR_CTEF, regs_base + OSPI_FCR);
+
+	if (!err)
+		err = stm32_omi_wait_nobusy(omi);
+
+	return err;
+}
+EXPORT_SYMBOL(stm32_omi_wait_cmd);
+
+irqreturn_t stm32_omi_irq(int irq, void *dev_id)
+{
+	struct stm32_omi *omi = (struct stm32_omi *)dev_id;
+	void __iomem *regs_base = omi->regs_base;
+	u32 cr, sr;
+
+	cr = readl_relaxed(regs_base + OSPI_CR);
+	sr = readl_relaxed(regs_base + OSPI_SR);
+
+	if (cr & CR_SMIE && sr & SR_SMF) {
+		/* disable irq */
+		cr &= ~CR_SMIE;
+		writel_relaxed(cr, regs_base + OSPI_CR);
+		complete(&omi->match_completion);
+
+		return IRQ_HANDLED;
+	}
+
+	if (sr & (SR_TEF | SR_TCF)) {
+		/* disable irq */
+		cr = readl_relaxed(regs_base + OSPI_CR);
+		cr &= ~CR_TCIE & ~CR_TEIE;
+		writel_relaxed(cr, regs_base + OSPI_CR);
+		complete(&omi->data_completion);
+	}
+
+	return IRQ_HANDLED;
+}
+EXPORT_SYMBOL(stm32_omi_irq);
+
+void stm32_omi_dma_callback(void *arg)
+{
+	struct completion *dma_completion = arg;
+
+	complete(dma_completion);
+}
+EXPORT_SYMBOL(stm32_omi_dma_callback);
+
+void stm32_omi_dma_free(struct stm32_omi *omi)
+{
+	if (omi->dma_chtx)
+		dma_release_channel(omi->dma_chtx);
+	if (omi->dma_chrx)
+		dma_release_channel(omi->dma_chrx);
+}
+EXPORT_SYMBOL(stm32_omi_dma_free);
+
+int stm32_omi_dma_setup(struct stm32_omi *omi, struct device *dev,
+			       struct dma_slave_config *dma_cfg)
+{
+	int ret = 0;
+
+	omi->dma_chrx = dma_request_chan(dev, "rx");
+	if (IS_ERR(omi->dma_chrx)) {
+		ret = PTR_ERR(omi->dma_chrx);
+		omi->dma_chrx = NULL;
+		if (ret == -EPROBE_DEFER)
+			goto out;
+	} else if (dma_cfg) {
+		if (dmaengine_slave_config(omi->dma_chrx, dma_cfg)) {
+			dev_err(dev, "dma rx config failed\n");
+			dma_release_channel(omi->dma_chrx);
+			omi->dma_chrx = NULL;
+		}
+	}
+
+	omi->dma_chtx = dma_request_chan(dev, "tx");
+	if (IS_ERR(omi->dma_chtx)) {
+		ret = PTR_ERR(omi->dma_chtx);
+		omi->dma_chtx = NULL;
+	} else if (dma_cfg) {
+		if (dmaengine_slave_config(omi->dma_chtx, dma_cfg)) {
+			dev_err(dev, "dma tx config failed\n");
+			dma_release_channel(omi->dma_chtx);
+			omi->dma_chtx = NULL;
+		}
+	}
+
+	init_completion(&omi->dma_completion);
+out:
+	if (ret != -EPROBE_DEFER)
+		ret = 0;
+
+	return ret;
+}
+EXPORT_SYMBOL(stm32_omi_dma_setup);
+
+int stm32_omi_get_resources(struct stm32_omi *omi, struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct device_node *np = dev->of_node;
+	struct resource res;
+	struct reserved_mem *rmem = NULL;
+	struct device_node *node;
+	int ret = 0;
+
+	omi->clk = devm_clk_get(dev, NULL);
+	if (IS_ERR(omi->clk))
+		return dev_err_probe(dev, PTR_ERR(omi->clk),
+				     "Can't get clock\n");
+
+	omi->irq = platform_get_irq(pdev, 0);
+	if (omi->irq < 0) {
+		dev_err(dev, "Can't get irq %d\n", omi->irq);
+		return omi->irq;
+	}
+
+	omi->rstc = devm_reset_control_array_get(dev, false, true);
+	if (IS_ERR(omi->rstc))
+		return dev_err_probe(dev, PTR_ERR(omi->rstc),
+				     "Can't get reset\n");
+
+	ret = of_address_to_resource(np, 0, &res);
+	if (ret)
+		return ret;
+
+	omi->regs_base = ioremap(res.start, resource_size(&res));
+	if (IS_ERR(omi->regs_base))
+		return PTR_ERR(omi->regs_base);
+
+	omi->regs_phys_base = res.start;
+
+	node = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (node)
+		rmem = of_reserved_mem_lookup(node);
+
+	of_node_put(node);
+	if (rmem) {
+		omi->mm_phys_base = rmem->base;
+		omi->mm_size = rmem->size;
+		omi->mm_base = devm_ioremap(dev, rmem->base, rmem->size);
+		if (IS_ERR(omi->mm_base)) {
+			dev_err(dev, "unable to map memory region: %pa+%pa\n",
+				&rmem->base, &rmem->size);
+			ret = PTR_ERR(omi->mm_base);
+		}
+
+		if (omi->mm_size > STM32_OMI_MAX_MMAP_SZ) {
+			dev_err(dev, "Memory map size outsize bounds\n");
+			ret = -EINVAL;
+		}
+	} else {
+		dev_info(dev, "No memory-map region found\n");
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL(stm32_omi_get_resources);
+
+static int stm32_omi_probe(struct platform_device *pdev)
+{
+	struct platform_device *vdev;
+	struct device *dev = &pdev->dev;
+	struct device_node *child;
+	const char *name;
+	u8 hyperflash_count = 0;
+	u8 spi_flash_count = 0;
+	u8 child_count = 0;
+
+	/*
+	 * Flash subnodes sanity check:
+	 *        2 spi-nand/spi-nor flashes			=> supported
+	 *        1 HyperFlash					=> supported
+	 *	  All other flash node configuration		=> not supported
+	 */
+	for_each_available_child_of_node(dev->of_node, child) {
+		if (of_device_is_compatible(child, "cfi-flash"))
+			hyperflash_count++;
+
+		if (of_device_is_compatible(child, "jedec,spi-nor") ||
+		    of_device_is_compatible(child, "spi-nand"))
+			spi_flash_count++;
+
+		child_count++;
+	}
+
+	if (!child_count) {
+		dev_err(dev, "Missing flash node\n");
+		return -ENODEV;
+	}
+
+	if ((!hyperflash_count && !spi_flash_count) ||
+	    child_count != (hyperflash_count + spi_flash_count)) {
+		dev_err(dev, "Unknown flash type\n");
+		return -ENODEV;
+	}
+
+	if ((hyperflash_count && spi_flash_count) ||
+	     hyperflash_count > 1) {
+		dev_err(dev, "Flash node configuration not supported\n");
+		return -EINVAL;
+	}
+
+	if (spi_flash_count)
+		name = "stm32-ospi";
+	else
+		name = "stm32-hyperflash";
+
+	vdev = platform_device_alloc(name, PLATFORM_DEVID_AUTO);
+	if (!vdev)
+		return -ENOMEM;
+
+	vdev->dev.parent = dev;
+	platform_set_drvdata(pdev, vdev);
+
+	return platform_device_add(vdev);
+}
+
+static int stm32_omi_remove(struct platform_device *pdev)
+{
+	struct platform_device *vdev = platform_get_drvdata(pdev);
+
+	platform_device_unregister(vdev);
+
+	return 0;
+}
+
+static const struct of_device_id stm32_omi_of_match[] = {
+	{ .compatible = "st,stm32mp25-omi", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, stm32_omi_of_match);
+
+static struct platform_driver stm32_omi_driver = {
+	.probe	= stm32_omi_probe,
+	.remove	= stm32_omi_remove,
+	.driver = {
+		.name =	"stm32-omi",
+		.of_match_table = stm32_omi_of_match,
+	},
+};
+module_platform_driver(stm32_omi_driver);
+
+MODULE_DESCRIPTION("STMicroelectronics STM32 OSPI Memory Interface driver");
+MODULE_LICENSE("GPL");
diff --git a/include/memory/stm32-omi.h b/include/memory/stm32-omi.h
new file mode 100644
index 000000000000..0f392729b7e2
--- /dev/null
+++ b/include/memory/stm32-omi.h
@@ -0,0 +1,167 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (C) 2022, STMicroelectronics - All Rights Reserved
+ * Author(s): Patrice Chotard <patrice.chotard@foss.st.com> for STMicroelectronics.
+ */
+
+#ifndef __STM32_OMI_H
+#define __STM32_OMI_H
+
+#include <linux/bitfield.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/dma-mapping.h>
+#include <linux/dmaengine.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/iopoll.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/mtd/hyperbus.h>
+#include <linux/mutex.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/of_reserved_mem.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/reset.h>
+#include <linux/sizes.h>
+#include <linux/spi/spi-mem.h>
+#include <linux/types.h>
+
+#define OSPI_CR			0x00
+#define CR_EN			BIT(0)
+#define CR_ABORT		BIT(1)
+#define CR_DMAEN		BIT(2)
+#define CR_TCEN			BIT(3)
+#define CR_FTHRES_SHIFT		8
+#define CR_TEIE			BIT(16)
+#define CR_TCIE			BIT(17)
+#define CR_SMIE			BIT(19)
+#define CR_APMS			BIT(22)
+#define CR_CSSEL		BIT(24)
+#define CR_FMODE_MASK		GENMASK(29, 28)
+#define CR_FMODE_INDW		(0U)
+#define CR_FMODE_INDR		(1U)
+#define CR_FMODE_APM		(2U)
+#define CR_FMODE_MM		(3U)
+
+#define OSPI_DCR1		0x08
+#define DCR1_FRCK		BIT(1)
+#define DCR1_DLYBYP		BIT(3)
+#define DCR1_DEVSIZE_MASK	GENMASK(20, 16)
+#define DCR1_MTYP_MASK		GENMASK(26, 24)
+#define DCR1_MTYP_HP_MEMMODE	4
+
+#define OSPI_DCR2		0x0c
+#define DCR2_PRESC_MASK		GENMASK(7, 0)
+
+#define OSPI_SR			0x20
+#define SR_TEF			BIT(0)
+#define SR_TCF			BIT(1)
+#define SR_FTF			BIT(2)
+#define SR_SMF			BIT(3)
+#define SR_BUSY			BIT(5)
+
+#define OSPI_FCR		0x24
+#define FCR_CTEF		BIT(0)
+#define FCR_CTCF		BIT(1)
+#define FCR_CSMF		BIT(3)
+
+#define OSPI_DLR		0x40
+#define OSPI_AR			0x48
+#define OSPI_DR			0x50
+#define OSPI_PSMKR		0x80
+#define OSPI_PSMAR		0x88
+
+#define OSPI_CCR		0x100
+#define CCR_IMODE_MASK		GENMASK(2, 0)
+#define CCR_ADMODE_MASK		GENMASK(10, 8)
+#define CCR_ADMODE_8LINES	4
+#define CCR_ADDTR		BIT(11)
+#define CCR_ADSIZE_MASK		GENMASK(13, 12)
+#define CCR_ADSIZE_32BITS	3
+#define CCR_DMODE_MASK		GENMASK(26, 24)
+#define CCR_DMODE_8LINES	4
+#define CCR_DQSE		BIT(29)
+#define CCR_DDTR		BIT(27)
+#define CCR_BUSWIDTH_0		0x0
+#define CCR_BUSWIDTH_1		0x1
+#define CCR_BUSWIDTH_2		0x2
+#define CCR_BUSWIDTH_4		0x3
+#define CCR_BUSWIDTH_8		0x4
+
+#define OSPI_TCR		0x108
+#define TCR_DCYC_MASK		GENMASK(4, 0)
+#define TCR_DHQC		BIT(28)
+#define TCR_SSHIFT		BIT(30)
+
+#define OSPI_IR			0x110
+
+#define OSPI_LPTR		0x130
+#define LPTR_TIMEOUT_MASK	GENMASK(15, 0)
+
+#define OSPI_WCCR		0x180
+#define WCCR_DQSE		BIT(29)
+#define WCCR_DDTR		BIT(27)
+#define WCCR_DMODE_MASK		GENMASK(26, 24)
+#define WCCR_DMODE_8LINES	4
+#define WCCR_ADSIZE_MASK	GENMASK(13, 12)
+#define WCCR_ADSIZE_32BITS	3
+#define WCCR_ADDTR		BIT(11)
+#define WCCR_ADMODE_MASK	GENMASK(10, 8)
+#define WCCR_ADMODE_8LINES	4
+
+#define OSPI_HLCR		0x200
+#define HLCR_WZL		BIT(1)
+#define HLCR_TACC_MASK		GENMASK(15, 8)
+
+#define STM32_OMI_MAX_MMAP_SZ	SZ_256M
+#define STM32_OMI_MAX_NORCHIP	2
+
+#define STM32_FIFO_TIMEOUT_US		30000
+#define STM32_ABT_TIMEOUT_US		100000
+#define STM32_COMP_TIMEOUT_MS		5000
+#define STM32_BUSY_TIMEOUT_US		100000
+
+struct stm32_omi {
+	struct device *dev;
+	struct clk *clk;
+	struct reset_control *rstc;
+	struct regmap *regmap;
+
+	struct completion data_completion;
+	struct completion match_completion;
+
+	struct dma_chan *dma_chtx;
+	struct dma_chan *dma_chrx;
+	struct completion dma_completion;
+
+	void __iomem *regs_base;
+	void __iomem *mm_base;
+	phys_addr_t mm_phys_base;
+	phys_addr_t regs_phys_base;
+	resource_size_t mm_size;
+	u32 clk_rate;
+	u32 fmode;
+	int irq;
+};
+
+int stm32_omi_abort(struct stm32_omi *omi);
+void stm32_omi_dma_callback(void *arg);
+void stm32_omi_dma_free(struct stm32_omi *omi);
+int stm32_omi_dma_setup(struct stm32_omi *omi, struct device *dev,
+			struct dma_slave_config *dma_cfg);
+int stm32_omi_get_resources(struct stm32_omi *omi, struct device *dev);
+irqreturn_t stm32_omi_irq(int irq, void *dev_id);
+int stm32_omi_tx_poll(struct stm32_omi *omi, u8 *buf, u32 len, bool read);
+int stm32_omi_wait_cmd(struct stm32_omi *omi);
+int stm32_omi_wait_nobusy(struct stm32_omi *omi);
+
+#endif /* __STM32_OMI_H */
-- 
2.39.2

