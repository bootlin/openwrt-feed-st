From 8719d4818d7046ba03df5e189a8d13fb9b8e7633 Mon Sep 17 00:00:00 2001
From: Christophe Kerello <christophe.kerello@foss.st.com>
Date: Tue, 11 Jul 2023 17:00:21 +0200
Subject: [PATCH 0418/1141] spi: stm32-ospi: allow to sample later the data

Allow the data to be sampled later in order to consider
the external signal delays.
The calibration is done with and without TCR_SSHIFT and the best
configuration found is applied.
The patch also renames APIs used for the calibration.

Change-Id: Idc0d2beef9f9d2442709d8ecdf80ecbccc9f9e19
Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
---
 drivers/memory/stm32-omi.c            | 11 +++---
 drivers/mtd/hyperbus/hyperbus-stm32.c |  5 +--
 drivers/spi/spi-stm32-ospi.c          | 49 ++++++++++++++++++++-------
 include/memory/stm32-omi.h            |  7 ++--
 4 files changed, 50 insertions(+), 22 deletions(-)

diff --git a/drivers/memory/stm32-omi.c b/drivers/memory/stm32-omi.c
index 199e6d872ac5..d402eef48c7c 100644
--- a/drivers/memory/stm32-omi.c
+++ b/drivers/memory/stm32-omi.c
@@ -305,7 +305,7 @@ static int stm32_omi_dlyb_set_tap(struct stm32_omi *omi, u8 tap, bool rx_tap)
 	return ret;
 }
 
-int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only)
+int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only, u8 *window_len)
 {
 	struct stm32_tap_window rx_tap_w[DLYBOS_TAPSEL_NB];
 	int ret = 0;
@@ -371,6 +371,7 @@ int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only)
 		}
 
 		rx_tap = rx_window_end - rx_window_len / 2;
+		*window_len = rx_window_len;
 		dev_dbg(omi->dev, "RX_TAP_SEL set to %d\n", rx_tap);
 
 		return stm32_omi_dlyb_set_tap(omi, rx_tap, true);
@@ -402,7 +403,7 @@ int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only)
 }
 EXPORT_SYMBOL(stm32_omi_dlyb_find_tap);
 
-int stm32_omi_dlyb_restore(struct stm32_omi *omi, u32 dlyb_cr)
+int stm32_omi_dlyb_set_cr(struct stm32_omi *omi, u32 dlyb_cr)
 {
 	bool bypass_mode = false;
 	int ret;
@@ -426,13 +427,13 @@ int stm32_omi_dlyb_restore(struct stm32_omi *omi, u32 dlyb_cr)
 	tx_tap = FIELD_GET(DLYBOS_CR_TXTAPSEL_MASK, dlyb_cr);
 	return stm32_omi_dlyb_set_tap(omi, tx_tap, false);
 }
-EXPORT_SYMBOL(stm32_omi_dlyb_restore);
+EXPORT_SYMBOL(stm32_omi_dlyb_set_cr);
 
-void stm32_omi_dlyb_save(struct stm32_omi *omi, u32 *dlyb_cr)
+void stm32_omi_dlyb_get_cr(struct stm32_omi *omi, u32 *dlyb_cr)
 {
 	regmap_read(omi->regmap, omi->dlyb_base + SYSCFG_DLYBOS_CR, dlyb_cr);
 }
-EXPORT_SYMBOL(stm32_omi_dlyb_save);
+EXPORT_SYMBOL(stm32_omi_dlyb_get_cr);
 
 /* Â½ memory clock period in pico second */
 static const u16 dlybos_delay_ps[STM32_DLYBOS_DELAY_NB] = {
diff --git a/drivers/mtd/hyperbus/hyperbus-stm32.c b/drivers/mtd/hyperbus/hyperbus-stm32.c
index 8650dff953a1..ffa854520db1 100644
--- a/drivers/mtd/hyperbus/hyperbus-stm32.c
+++ b/drivers/mtd/hyperbus/hyperbus-stm32.c
@@ -115,6 +115,7 @@ static int stm32_hyperbus_calibrate(struct hyperbus_device *hbdev)
 	void __iomem *regs_base = omi->regs_base;
 	u32 prescaler;
 	u16 period_ps = 0;
+	u8 window_len = 0;
 	int ret;
 	bool bypass_mode = false;
 
@@ -136,10 +137,10 @@ static int stm32_hyperbus_calibrate(struct hyperbus_device *hbdev)
 
 	if (bypass_mode || prescaler)
 		/* perform only RX TAP selection */
-		ret = stm32_omi_dlyb_find_tap(omi, true);
+		ret = stm32_omi_dlyb_find_tap(omi, true, &window_len);
 	else
 		/* perform RX/TX TAP selection */
-		ret = stm32_omi_dlyb_find_tap(omi, false);
+		ret = stm32_omi_dlyb_find_tap(omi, false, &window_len);
 
 	if (ret) {
 		dev_err(omi->dev, "Calibration failed\n");
diff --git a/drivers/spi/spi-stm32-ospi.c b/drivers/spi/spi-stm32-ospi.c
index 10229b354b4b..eed6615820a8 100644
--- a/drivers/spi/spi-stm32-ospi.c
+++ b/drivers/spi/spi-stm32-ospi.c
@@ -16,6 +16,7 @@ struct stm32_ospi_flash {
 	u32 dcr_reg;
 	u64 idcode;
 	bool calibrated;
+	bool sample_later;
 };
 
 struct stm32_ospi {
@@ -185,7 +186,7 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 	struct stm32_ospi_flash *flash = &ospi->flash[spi->chip_select];
 	void __iomem *regs_base = ospi->omi.regs_base;
 	struct stm32_omi *omi = &ospi->omi;
-	u32 ccr, cr, tcr;
+	u32 ccr, cr, tcr = 0;
 	int timeout, err = 0, err_poll_status = 0;
 	int ret;
 
@@ -203,7 +204,7 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 		stm32_ospi_set_prescaler(ospi, flash->presc);
 
 		if (flash->calibrated) {
-			ret = stm32_omi_dlyb_restore(omi, flash->dlyb_cr);
+			ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
 			if (ret)
 				return ret;
 		}
@@ -227,7 +228,9 @@ static int stm32_ospi_send(struct spi_device *spi, const struct spi_mem_op *op)
 		ccr |= FIELD_PREP(CCR_ADSIZE_MASK, op->addr.nbytes - 1);
 	}
 
-	tcr = TCR_SSHIFT;
+	if (flash->sample_later)
+		tcr |= TCR_SSHIFT;
+
 	if (op->dummy.buswidth && op->dummy.nbytes) {
 		tcr |= FIELD_PREP(TCR_DCYC_MASK,
 				  op->dummy.nbytes * 8 / op->dummy.buswidth);
@@ -534,7 +537,8 @@ static int stm32_ospi_calibration(struct stm32_ospi *ospi)
 	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
 	struct spi_device *spi = flash->spi;
 	void __iomem *regs_base = ospi->omi.regs_base;
-	int ret;
+	u8 window_len_tcr0 = 0, window_len_tcr1 = 0;
+	int ret, ret_tcr0, ret_tcr1;
 
 	/*
 	 * set memory device at low frequency (50MHz) and sent
@@ -567,18 +571,38 @@ static int stm32_ospi_calibration(struct stm32_ospi *ospi)
 	 * when DTR support will be added, Rx/Tx TAP selection will have to
 	 * be performed
 	 */
-	ret = stm32_omi_dlyb_find_tap(omi, true);
-	if (ret) {
-		dev_info(ospi->dev, "Calibration phase failed\n");
+	ret_tcr0 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr0);
+	if (!ret_tcr0)
+		/*
+		 * save flash delay block configuration, will be restored
+		 * each time this flash is addressed
+		 */
+		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
+
+	stm32_omi_dlyb_stop(omi);
+	ret = stm32_omi_dlyb_init(omi, false, 0);
+	if (ret)
 		return ret;
+
+	flash->sample_later = true;
+	ret_tcr1 = stm32_omi_dlyb_find_tap(omi, true, &window_len_tcr1);
+	if (ret_tcr0 && ret_tcr1) {
+		dev_info(ospi->dev, "Calibration phase failed\n");
+		return ret_tcr0;
+	}
+
+	if (window_len_tcr0 >= window_len_tcr1) {
+		flash->sample_later = false;
+		stm32_omi_dlyb_stop(omi);
+
+		ret = stm32_omi_dlyb_set_cr(omi, flash->dlyb_cr);
+		if (ret)
+			return ret;
+	} else {
+		stm32_omi_dlyb_get_cr(omi, &flash->dlyb_cr);
 	}
 
-	/*
-	 * save flash delay block configuration, will be restored
-	 * each time this flash is addressed
-	 */
 	flash->calibrated = true;
-	stm32_omi_dlyb_save(omi, &flash->dlyb_cr);
 
 	return 0;
 }
@@ -636,6 +660,7 @@ static int stm32_ospi_setup(struct spi_device *spi)
 
 			/* stop the DLL */
 			stm32_omi_dlyb_stop(omi);
+			flash->sample_later = false;
 
 			flash->presc = DIV_ROUND_UP(omi->clk_rate,
 						    STM32_DLYB_FREQ_THRESHOLD) - 1;
diff --git a/include/memory/stm32-omi.h b/include/memory/stm32-omi.h
index c9dae4a440d8..b1c9ab9ed9ae 100644
--- a/include/memory/stm32-omi.h
+++ b/include/memory/stm32-omi.h
@@ -183,9 +183,10 @@ struct stm32_tap_window {
 int stm32_omi_abort(struct stm32_omi *omi);
 int stm32_omi_dlyb_init(struct stm32_omi *omi, bool bypass_mode,
 			u16 period_ps);
-int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only);
-int stm32_omi_dlyb_restore(struct stm32_omi *omi, u32 dlyb_cr);
-void stm32_omi_dlyb_save(struct stm32_omi *omi, u32 *dlyb_cr);
+int stm32_omi_dlyb_find_tap(struct stm32_omi *omi, bool rx_only,
+			    u8 *window_len);
+int stm32_omi_dlyb_set_cr(struct stm32_omi *omi, u32 dlyb_cr);
+void stm32_omi_dlyb_get_cr(struct stm32_omi *omi, u32 *dlyb_cr);
 void stm32_omi_dlyb_stop(struct stm32_omi *omi);
 void stm32_omi_dma_callback(void *arg);
 void stm32_omi_dma_free(struct stm32_omi *omi);
-- 
2.39.2

