From 8a14d2b13057a292f8f170d065ebc93d31c77a7d Mon Sep 17 00:00:00 2001
From: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Date: Fri, 30 Jun 2023 12:45:15 +0200
Subject: [PATCH 0523/1141] clk: stm32mp25: implement suspend / resume of RCC
 driver

Save and restore clock for suspend and resume management.

Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Change-Id: I3e7c7e8633c95a9168c74d4b0e6ada5253721117
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/327147
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
---
 drivers/clk/stm32/clk-stm32-core.c | 58 ++++++++++++++++++++++++++++++
 drivers/clk/stm32/clk-stm32mp25.c  | 21 +++++++++++
 2 files changed, 79 insertions(+)

diff --git a/drivers/clk/stm32/clk-stm32-core.c b/drivers/clk/stm32/clk-stm32-core.c
index 3933649337d9..5379543b63d1 100644
--- a/drivers/clk/stm32/clk-stm32-core.c
+++ b/drivers/clk/stm32/clk-stm32-core.c
@@ -141,6 +141,29 @@ static int stm32_mux_set_parent(void __iomem *base,
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static void stm32_gate_force_endisable(void __iomem *base,
+				       struct clk_stm32_clock_data *data,
+				       u16 gate_id,
+				       int enable)
+{
+	const struct stm32_gate_cfg *gate = &data->gates[gate_id];
+	void __iomem *addr = base + gate->offset;
+
+	if (enable) {
+		if (gate->set_clr != 0)
+			writel(BIT(gate->bit_idx), addr);
+		else
+			writel(readl(addr) | BIT(gate->bit_idx), addr);
+	} else {
+		if (gate->set_clr != 0)
+			writel(BIT(gate->bit_idx), addr + gate->set_clr);
+		else
+			writel(readl(addr) & ~BIT(gate->bit_idx), addr);
+	}
+}
+#endif
+
 static void stm32_gate_endisable(void __iomem *base,
 				 struct clk_stm32_clock_data *data,
 				 u16 gate_id, int enable)
@@ -335,11 +358,28 @@ static void clk_stm32_gate_disable_unused(struct clk_hw *hw)
 	spin_unlock_irqrestore(gate->lock, flags);
 }
 
+#ifdef CONFIG_PM_SLEEP
+static void clk_stm32_pm_gate_restore(struct clk_hw *hw)
+{
+	struct clk_stm32_gate *gate = to_clk_stm32_gate(hw);
+	unsigned long flags = 0;
+
+	if (__clk_get_enable_count(hw->clk)) {
+		spin_lock_irqsave(gate->lock, flags);
+		stm32_gate_force_endisable(gate->base, gate->clock_data, gate->gate_id, 1);
+		spin_unlock_irqrestore(gate->lock, flags);
+	}
+}
+#endif
+
 const struct clk_ops clk_stm32_gate_ops = {
 	.enable		= clk_stm32_gate_enable,
 	.disable	= clk_stm32_gate_disable,
 	.is_enabled	= clk_stm32_gate_is_enabled,
 	.disable_unused	= clk_stm32_gate_disable_unused,
+#ifdef CONFIG_PM_SLEEP
+	.restore_context = clk_stm32_pm_gate_restore,
+#endif
 };
 
 static int clk_stm32_divider_set_rate(struct clk_hw *hw, unsigned long rate,
@@ -611,6 +651,21 @@ static void clk_stm32_composite_disable_unused(struct clk_hw *hw)
 	spin_unlock_irqrestore(composite->lock, flags);
 }
 
+#ifdef CONFIG_PM_SLEEP
+static void clk_stm32_pm_composite_restore(struct clk_hw *hw)
+{
+	struct clk_stm32_composite *composite = to_clk_stm32_composite(hw);
+	unsigned long flags = 0;
+
+	if (__clk_get_enable_count(hw->clk)) {
+		spin_lock_irqsave(composite->lock, flags);
+		stm32_gate_force_endisable(composite->base, composite->clock_data,
+					   composite->gate_id, 1);
+		spin_unlock_irqrestore(composite->lock, flags);
+	}
+}
+#endif
+
 const struct clk_ops clk_stm32_composite_ops = {
 	.set_rate	= clk_stm32_composite_set_rate,
 	.recalc_rate	= clk_stm32_composite_recalc_rate,
@@ -621,6 +676,9 @@ const struct clk_ops clk_stm32_composite_ops = {
 	.disable	= clk_stm32_composite_gate_disable,
 	.is_enabled	= clk_stm32_composite_is_enabled,
 	.disable_unused	= clk_stm32_composite_disable_unused,
+#ifdef CONFIG_PM_SLEEP
+	.restore_context = clk_stm32_pm_composite_restore,
+#endif
 };
 
 struct clk_hw *clk_stm32_mux_register(struct device *dev,
diff --git a/drivers/clk/stm32/clk-stm32mp25.c b/drivers/clk/stm32/clk-stm32mp25.c
index ee601b5020f0..b419f522d537 100644
--- a/drivers/clk/stm32/clk-stm32mp25.c
+++ b/drivers/clk/stm32/clk-stm32mp25.c
@@ -1313,10 +1313,31 @@ static int stm32mp25_rcc_clocks_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static int stm32_rcc_suspend(struct device *dev)
+{
+	clk_save_context();
+
+	return 0;
+}
+
+static int stm32_rcc_resume(struct device *dev)
+{
+	clk_restore_context();
+
+	return 0;
+}
+#endif /* CONFIG_PM_SLEEP */
+
+static const struct dev_pm_ops stm32_rcc_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(stm32_rcc_suspend, stm32_rcc_resume)
+};
+
 static struct platform_driver stm32mp25_rcc_clocks_driver = {
 	.driver	= {
 		.name = "stm32mp25_rcc",
 		.of_match_table = stm32mp25_match_data,
+		.pm = &stm32_rcc_pm_ops,
 	},
 	.probe = stm32mp25_rcc_clocks_probe,
 	.remove = stm32mp25_rcc_clocks_remove,
-- 
2.39.2

