From c3e06e6ace64232f05033803330c17efd43bf3cb Mon Sep 17 00:00:00 2001
From: Etienne Carriere <etienne.carriere@foss.st.com>
Date: Thu, 25 Jan 2024 17:42:58 +0100
Subject: [PATCH 0901/1141] tee: optee: fix percpu interrupt setup for async
 notif

Back port the modifications made at upstream when OP-TEE async notif
over GIC PPI interrupt was reviewed on the LKML. This fixes issues
where the PPI was enabled only on the core that executed optee driver
initialization. Upstream OP-TEE async notif over GIC PPI is brought by
commit b3b4ced12c1b ("optee: add per cpu asynchronous notification").

Change-Id: I8a1607c4f5b7a3d8898c5d3640662d9fb27f007d
Signed-off-by: Etienne Carriere <etienne.carriere@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/354536
Domain-Review: Yann GAUTIER <yann.gautier@foss.st.com>
Tested-by: Clement LE GOFFIC <clement.legoffic@foss.st.com>
Reviewed-by: Clement LE GOFFIC <clement.legoffic@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Yann GAUTIER <yann.gautier@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/tee/optee/optee_private.h |   2 +
 drivers/tee/optee/smc_abi.c       | 104 ++++++++++++++++++------------
 2 files changed, 63 insertions(+), 43 deletions(-)

diff --git a/drivers/tee/optee/optee_private.h b/drivers/tee/optee/optee_private.h
index c19cb413aa5a..fa50377669de 100644
--- a/drivers/tee/optee/optee_private.h
+++ b/drivers/tee/optee/optee_private.h
@@ -116,6 +116,7 @@ struct optee_pcpu {
  * @optee_pcpu		per_cpu optee instance for per cpu work or NULL
  * @notif_pcpu_wq	workqueue for per cpu aynchronous notification or NULL
  * @notif_pcpu_work	work for per cpu asynchronous notification
+ * @notif_cpuhp_state   CPU hotplug state assigned for pcpu interrupt management
  * @domain		interrupt domain registered by OP-TEE driver
  */
 struct optee_smc {
@@ -126,6 +127,7 @@ struct optee_smc {
 	struct optee_pcpu __percpu *optee_pcpu;
 	struct workqueue_struct *notif_pcpu_wq;
 	struct work_struct notif_pcpu_work;
+	unsigned int notif_cpuhp_state;
 	struct irq_domain *domain;
 };
 
diff --git a/drivers/tee/optee/smc_abi.c b/drivers/tee/optee/smc_abi.c
index e598751ecd42..f19692ea6fac 100644
--- a/drivers/tee/optee/smc_abi.c
+++ b/drivers/tee/optee/smc_abi.c
@@ -52,6 +52,23 @@
  */
 #define OPTEE_MIN_STATIC_POOL_ALIGN    9 /* 512 bytes aligned */
 
+/* SMC ABI considers at most a single TEE firmware */
+static unsigned int pcpu_irq_num;
+
+static int optee_cpuhp_enable_pcpu_irq(unsigned int cpu)
+{
+	enable_percpu_irq(pcpu_irq_num, IRQ_TYPE_NONE);
+
+	return 0;
+}
+
+static int optee_cpuhp_disable_pcpu_irq(unsigned int cpu)
+{
+	disable_percpu_irq(pcpu_irq_num);
+
+	return 0;
+}
+
 /*
  * 1. Convert between struct tee_param and struct optee_msg_param
  *
@@ -1257,22 +1274,13 @@ static u32 get_async_notif_value(optee_invoke_fn *invoke_fn, bool *value_valid,
 	return res.a1;
 }
 
-static irqreturn_t notif_irq_handler(int irq, void *dev_id)
+static irqreturn_t irq_handler(struct optee *optee)
 {
-	struct optee *optee;
 	bool do_bottom_half = false;
 	bool value_valid;
 	bool value_pending;
 	u32 value;
 
-	if (irq_is_percpu_devid(irq)) {
-		struct optee_pcpu *pcpu = (struct optee_pcpu *)dev_id;
-
-		optee = pcpu->optee;
-	} else {
-		optee = dev_id;
-	}
-
 	do {
 		value = get_async_notif_value(optee->smc.invoke_fn, &value_valid, &value_pending);
 		if (!value_valid)
@@ -1286,16 +1294,18 @@ static irqreturn_t notif_irq_handler(int irq, void *dev_id)
 			optee_notif_send(optee, value);
 	} while (value_pending);
 
-	if (do_bottom_half) {
-		if (irq_is_percpu_devid(irq))
-			queue_work(optee->smc.notif_pcpu_wq, &optee->smc.notif_pcpu_work);
-		else
-			return IRQ_WAKE_THREAD;
-	}
-
+	if (do_bottom_half)
+		return IRQ_WAKE_THREAD;
 	return IRQ_HANDLED;
 }
 
+static irqreturn_t notif_irq_handler(int irq, void *dev_id)
+{
+	struct optee *optee = dev_id;
+
+	return irq_handler(optee);
+}
+
 static irqreturn_t notif_irq_thread_fn(int irq, void *dev_id)
 {
 	struct optee *optee = dev_id;
@@ -1309,7 +1319,8 @@ static int init_irq(struct optee *optee, u_int irq)
 {
 	int rc;
 
-	rc = request_threaded_irq(irq, notif_irq_handler, notif_irq_thread_fn,
+	rc = request_threaded_irq(irq, notif_irq_handler,
+				  notif_irq_thread_fn,
 				  0, "optee_notification", optee);
 	if (rc)
 		return rc;
@@ -1319,9 +1330,22 @@ static int init_irq(struct optee *optee, u_int irq)
 	return 0;
 }
 
+static irqreturn_t notif_pcpu_irq_handler(int irq, void *dev_id)
+{
+	struct optee_pcpu *pcpu = dev_id;
+	struct optee *optee = pcpu->optee;
+
+	if (irq_handler(optee) == IRQ_WAKE_THREAD)
+		queue_work(optee->smc.notif_pcpu_wq,
+			   &optee->smc.notif_pcpu_work);
+
+	return IRQ_HANDLED;
+}
+
 static void notif_pcpu_irq_work_fn(struct work_struct *work)
 {
-	struct optee_smc *optee_smc = container_of(work, struct optee_smc, notif_pcpu_work);
+	struct optee_smc *optee_smc = container_of(work, struct optee_smc,
+						   notif_pcpu_work);
 	struct optee *optee = container_of(optee_smc, struct optee, smc);
 
 	optee_smc_do_bottom_half(optee->ctx);
@@ -1329,32 +1353,21 @@ static void notif_pcpu_irq_work_fn(struct work_struct *work)
 
 static int init_pcpu_irq(struct optee *optee, u_int irq)
 {
-	struct optee_pcpu *optee_pcpu;
-	spinlock_t lock;
-	int cpu;
-	int rc;
+	struct optee_pcpu __percpu *optee_pcpu;
+	int cpu, rc;
 
 	optee_pcpu = alloc_percpu(struct optee_pcpu);
 	if (!optee_pcpu)
 		return -ENOMEM;
 
-	for_each_present_cpu(cpu) {
-		struct optee_pcpu *p = per_cpu_ptr(optee_pcpu, cpu);
-
-		p->optee = optee;
-	}
+	for_each_present_cpu(cpu)
+		per_cpu_ptr(optee_pcpu, cpu)->optee = optee;
 
-	rc = request_percpu_irq(irq, notif_irq_handler,
+	rc = request_percpu_irq(irq, notif_pcpu_irq_handler,
 				"optee_pcpu_notification", optee_pcpu);
 	if (rc)
 		goto err_free_pcpu;
 
-	spin_lock_init(&lock);
-
-	spin_lock(&lock);
-	enable_percpu_irq(irq, 0);
-	spin_unlock(&lock);
-
 	INIT_WORK(&optee->smc.notif_pcpu_work, notif_pcpu_irq_work_fn);
 	optee->smc.notif_pcpu_wq = create_workqueue("optee_pcpu_notification");
 	if (!optee->smc.notif_pcpu_wq) {
@@ -1365,12 +1378,20 @@ static int init_pcpu_irq(struct optee *optee, u_int irq)
 	optee->smc.optee_pcpu = optee_pcpu;
 	optee->smc.notif_irq = irq;
 
+	pcpu_irq_num = irq;
+	rc = cpuhp_setup_state(CPUHP_AP_ONLINE_DYN, "optee/pcpu-notif:starting",
+			       optee_cpuhp_enable_pcpu_irq,
+			       optee_cpuhp_disable_pcpu_irq);
+	if (!rc)
+		rc = -EINVAL;
+	if (rc < 0)
+		goto err_free_pcpu_irq;
+
+	optee->smc.notif_cpuhp_state = rc;
+
 	return 0;
 
 err_free_pcpu_irq:
-	spin_lock(&lock);
-	disable_percpu_irq(irq);
-	spin_unlock(&lock);
 	free_percpu_irq(irq, optee_pcpu);
 err_free_pcpu:
 	free_percpu(optee_pcpu);
@@ -1388,12 +1409,9 @@ static int optee_smc_notif_init_irq(struct optee *optee, u_int irq)
 
 static void uninit_pcpu_irq(struct optee *optee)
 {
-	spinlock_t lock;
+	cpuhp_remove_state(optee->smc.notif_cpuhp_state);
 
-	spin_lock_init(&lock);
-	spin_lock(&lock);
-	disable_percpu_irq(optee->smc.notif_irq);
-	spin_unlock(&lock);
+	destroy_workqueue(optee->smc.notif_pcpu_wq);
 
 	free_percpu_irq(optee->smc.notif_irq, optee->smc.optee_pcpu);
 	free_percpu(optee->smc.optee_pcpu);
-- 
2.39.2

