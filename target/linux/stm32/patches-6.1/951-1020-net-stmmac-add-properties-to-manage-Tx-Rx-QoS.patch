From f7699e17c5bf7c99a1c750eec54483dd91c3bf37 Mon Sep 17 00:00:00 2001
From: Christophe Roullier <christophe.roullier@foss.st.com>
Date: Thu, 21 Mar 2024 08:24:16 +0100
Subject: [PATCH 1020/1141] net: stmmac: add properties to manage Tx/Rx QoS

Add 2 new properties to manage Tx/Rx Qos transactions of DMA Channel.
In SNPS IP, in registers Channel transmit/receive control, there are a
bitfield TQOS and RQOS, these fields are used to drive priority of output
signals for all transactions of DMA Tx/Rx Channel.
Value of Transmit and Receive QoS is value between 0 and 15.
(15 is best priority)

Signed-off-by: Christophe Roullier <christophe.roullier@foss.st.com>
Change-Id: Ib3121d2072535f2e0a207467e31f709456df400e
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/368138
Reviewed-by: Gwenael TREUVEUR <gwenael.treuveur@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c      | 11 +++++++++++
 drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h      |  5 +++++
 drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c |  2 ++
 include/linux/stmmac.h                                |  2 ++
 4 files changed, 20 insertions(+)

--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.c
@@ -77,6 +77,12 @@ static void dwmac4_dma_init_rx_chan(void
 
 	value = readl(ioaddr + DMA_CHAN_RX_CONTROL(chan));
 	value = value | (rxpbl << DMA_BUS_MODE_RPBL_SHIFT);
+
+	/* Set Receive QOS */
+	value &= ~DMA_CONTROL_RQOS;
+	value |= (dma_cfg->rxqos & DMA_CONTROL_XQOS_MAX) <<
+		 DMA_CONTROL_RQOS_SHIFT;
+
 	writel(value, ioaddr + DMA_CHAN_RX_CONTROL(chan));
 
 	if (IS_ENABLED(CONFIG_ARCH_DMA_ADDR_T_64BIT) && likely(dma_cfg->eame))
@@ -99,6 +105,11 @@ static void dwmac4_dma_init_tx_chan(void
 	/* Enable OSP to get best performance */
 	value |= DMA_CONTROL_OSP;
 
+	/* Set Transmit QOS */
+	value &= ~DMA_CONTROL_TQOS;
+	value |= (dma_cfg->txqos & DMA_CONTROL_XQOS_MAX) <<
+		 DMA_CONTROL_TQOS_SHIFT;
+
 	writel(value, ioaddr + DMA_CHAN_TX_CONTROL(chan));
 
 	if (IS_ENABLED(CONFIG_ARCH_DMA_ADDR_T_64BIT) && likely(dma_cfg->eame))
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_dma.h
@@ -125,11 +125,16 @@
 
 /* DMA Tx Channel X Control register defines */
 #define DMA_CONTROL_EDSE		BIT(28)
+#define DMA_CONTROL_TQOS		GENMASK(27, 24)
+#define DMA_CONTROL_TQOS_SHIFT		24
+#define DMA_CONTROL_XQOS_MAX		0xf
 #define DMA_CONTROL_TSE			BIT(12)
 #define DMA_CONTROL_OSP			BIT(4)
 #define DMA_CONTROL_ST			BIT(0)
 
 /* DMA Rx Channel X Control register defines */
+#define DMA_CONTROL_RQOS		GENMASK(27, 24)
+#define DMA_CONTROL_RQOS_SHIFT		24
 #define DMA_CONTROL_SR			BIT(0)
 #define DMA_RBSZ_MASK			GENMASK(14, 1)
 #define DMA_RBSZ_SHIFT			1
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
@@ -553,6 +553,8 @@ stmmac_probe_config_dt(struct platform_d
 	of_property_read_u32(np, "snps,txpbl", &dma_cfg->txpbl);
 	of_property_read_u32(np, "snps,rxpbl", &dma_cfg->rxpbl);
 	dma_cfg->pblx8 = !of_property_read_bool(np, "snps,no-pbl-x8");
+	of_property_read_u32(np, "snps,txqos", &dma_cfg->txqos);
+	of_property_read_u32(np, "snps,rxqos", &dma_cfg->rxqos);
 
 	dma_cfg->aal = of_property_read_bool(np, "snps,aal");
 	dma_cfg->fixed_burst = of_property_read_bool(np, "snps,fixed-burst");
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -91,6 +91,8 @@ struct stmmac_dma_cfg {
 	int pbl;
 	int txpbl;
 	int rxpbl;
+	int txqos;
+	int rxqos;
 	bool pblx8;
 	int fixed_burst;
 	int mixed_burst;
