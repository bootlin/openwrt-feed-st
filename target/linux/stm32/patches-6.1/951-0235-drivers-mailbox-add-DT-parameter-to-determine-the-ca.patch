From ef682c347b7d86940b5572b68e2f1a67c271e8a8 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Tue, 17 Jan 2023 16:12:45 +0100
Subject: [PATCH 0235/1141] drivers: mailbox: add DT parameter to determine the
 callback context

The mailboxes client callback can be called under interrupt context or in
normal context. The need depends on the client.
For instance a virtio I2C client needs to be called under interrupt
context. Indeed the associated bus controller should allows an I2C drivers
to access to the hardware during the probe (atomic context).
In such case the remote device "Ack" reception have to be treated under
interrupt context.
On the other hand a virtio rpmsg should not work in interrupt context. It
mix several services in one virtio.

This patch add the capability to call the mailbox client under interrupt
or normal context depending on the mailbox channel ID.
- if mailbox channel ID is from 0 to 0xFF the client is called in normal
  context
- if mailbox channel ID is from 0x100 to 0x1FF the client is called
  in interrupt context

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Change-Id: I7baa246a050c8204ee61add492641791e984fd17
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/286892
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/mailbox/stm32-ipcc.c | 89 ++++++++++++++++++++++++++++++++++--
 1 file changed, 84 insertions(+), 5 deletions(-)

diff --git a/drivers/mailbox/stm32-ipcc.c b/drivers/mailbox/stm32-ipcc.c
index 15d538fe2113..42698088161d 100644
--- a/drivers/mailbox/stm32-ipcc.c
+++ b/drivers/mailbox/stm32-ipcc.c
@@ -13,6 +13,7 @@
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/pm_wakeirq.h>
+#include <linux/workqueue.h>
 
 #define IPCC_XCR		0x000
 #define XCR_RXOIE		BIT(0)
@@ -39,17 +40,30 @@
 
 #define STM32_MAX_PROCS		2
 
+/* Use virtual ID by setting bit 8 of a channel ID to keep interrupt context for client */
+#define STM32_IPCC_CH_ID_MASK		GENMASK(7, 0)
+#define STM32_IPCC_CH_HIGH_PRIO_MASK	GENMASK(8, 8)
+
 enum {
 	IPCC_IRQ_RX,
 	IPCC_IRQ_TX,
 	IPCC_IRQ_NUM,
 };
 
+struct stm32_ipcc_ch {
+	struct mbox_chan   *mbox;
+	struct work_struct rx_work;
+	unsigned long      chan;
+	bool               irq_ctx;
+};
+
 struct stm32_ipcc {
 	struct mbox_controller controller;
 	void __iomem *reg_base;
 	void __iomem *reg_proc;
 	struct clk *clk;
+	struct stm32_ipcc_ch *chnl;
+	struct workqueue_struct *workqueue;
 	spinlock_t lock; /* protect access to IPCC registers */
 	int irqs[IPCC_IRQ_NUM];
 	u32 proc_id;
@@ -78,10 +92,21 @@ static inline void stm32_ipcc_clr_bits(spinlock_t *lock, void __iomem *reg,
 	spin_unlock_irqrestore(lock, flags);
 }
 
+/*
+ * Message receiver(workqueue)
+ */
+static void stm32_ipcc_rx_work(struct work_struct *work)
+{
+	struct stm32_ipcc_ch *chnl = container_of(work, struct stm32_ipcc_ch, rx_work);
+
+	mbox_chan_received_data(chnl->mbox, NULL);
+};
+
 static irqreturn_t stm32_ipcc_rx_irq(int irq, void *data)
 {
 	struct stm32_ipcc *ipcc = data;
 	struct device *dev = ipcc->controller.dev;
+	struct stm32_ipcc_ch *chnl;
 	u32 status, mr, tosr, chan;
 	irqreturn_t ret = IRQ_NONE;
 	int proc_offset;
@@ -100,7 +125,17 @@ static irqreturn_t stm32_ipcc_rx_irq(int irq, void *data)
 
 		dev_dbg(dev, "%s: chan:%d rx\n", __func__, chan);
 
-		mbox_chan_received_data(&ipcc->controller.chans[chan], NULL);
+		chnl = &ipcc->chnl[chan];
+
+		/*
+		 * Depending on the DT parameter,call the client under interrupt context
+		 * or use workqueue to call the callback in normal context
+		 */
+
+		if (chnl->irq_ctx)
+			mbox_chan_received_data(chnl->mbox, NULL);
+		else
+			queue_work(ipcc->workqueue, &chnl->rx_work);
 
 		stm32_ipcc_set_bits(&ipcc->lock, ipcc->reg_proc + IPCC_XSCR,
 				    RX_BIT_CHAN(chan));
@@ -144,7 +179,8 @@ static irqreturn_t stm32_ipcc_tx_irq(int irq, void *data)
 
 static int stm32_ipcc_send_data(struct mbox_chan *link, void *data)
 {
-	unsigned long chan = (unsigned long)link->con_priv;
+	struct stm32_ipcc_ch *chnl = (struct stm32_ipcc_ch *)link->con_priv;
+	unsigned long chan = chnl->chan;
 	struct stm32_ipcc *ipcc = container_of(link->mbox, struct stm32_ipcc,
 					       controller);
 
@@ -163,7 +199,8 @@ static int stm32_ipcc_send_data(struct mbox_chan *link, void *data)
 
 static int stm32_ipcc_startup(struct mbox_chan *link)
 {
-	unsigned long chan = (unsigned long)link->con_priv;
+	struct stm32_ipcc_ch *chnl = (struct stm32_ipcc_ch *)link->con_priv;
+	unsigned long chan = chnl->chan;
 	struct stm32_ipcc *ipcc = container_of(link->mbox, struct stm32_ipcc,
 					       controller);
 	int ret;
@@ -183,7 +220,8 @@ static int stm32_ipcc_startup(struct mbox_chan *link)
 
 static void stm32_ipcc_shutdown(struct mbox_chan *link)
 {
-	unsigned long chan = (unsigned long)link->con_priv;
+	struct stm32_ipcc_ch *chnl = (struct stm32_ipcc_ch *)link->con_priv;
+	unsigned long chan = chnl->chan;
 	struct stm32_ipcc *ipcc = container_of(link->mbox, struct stm32_ipcc,
 					       controller);
 
@@ -191,6 +229,9 @@ static void stm32_ipcc_shutdown(struct mbox_chan *link)
 	stm32_ipcc_set_bits(&ipcc->lock, ipcc->reg_proc + IPCC_XMR,
 			    RX_BIT_CHAN(chan) | TX_BIT_CHAN(chan));
 
+	if (!chnl->irq_ctx)
+		flush_work(&chnl->rx_work);
+
 	clk_disable_unprepare(ipcc->clk);
 }
 
@@ -200,6 +241,26 @@ static const struct mbox_chan_ops stm32_ipcc_ops = {
 	.shutdown	= stm32_ipcc_shutdown,
 };
 
+static struct mbox_chan *stm32_ipcc_xlate(struct mbox_controller *mbox,
+					  const struct of_phandle_args *sp)
+{
+	int ind = sp->args[0] & STM32_IPCC_CH_ID_MASK;
+	struct stm32_ipcc_ch *chnl;
+
+	if (ind >= mbox->num_chans)
+		return ERR_PTR(-EINVAL);
+
+	chnl = (struct stm32_ipcc_ch *)mbox->chans[ind].con_priv;
+	chnl->mbox = &mbox->chans[ind];
+	chnl->chan = ind;
+	chnl->irq_ctx = !!(sp->args[0] & STM32_IPCC_CH_HIGH_PRIO_MASK);
+
+	if (!chnl->irq_ctx)
+		INIT_WORK(&chnl->rx_work, stm32_ipcc_rx_work);
+
+	return &mbox->chans[ind];
+}
+
 static int stm32_ipcc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -292,6 +353,7 @@ static int stm32_ipcc_probe(struct platform_device *pdev)
 	ipcc->controller.dev = dev;
 	ipcc->controller.txdone_irq = true;
 	ipcc->controller.ops = &stm32_ipcc_ops;
+	ipcc->controller.of_xlate = &stm32_ipcc_xlate;
 	ipcc->controller.num_chans = ipcc->n_chans;
 	ipcc->controller.chans = devm_kcalloc(dev, ipcc->controller.num_chans,
 					      sizeof(*ipcc->controller.chans),
@@ -301,13 +363,27 @@ static int stm32_ipcc_probe(struct platform_device *pdev)
 		goto err_irq_wkp;
 	}
 
+	ipcc->chnl = devm_kcalloc(dev, ipcc->controller.num_chans,
+				  sizeof(*ipcc->chnl), GFP_KERNEL);
+	if (!ipcc->chnl) {
+		ret = -ENOMEM;
+		goto err_irq_wkp;
+	}
+
 	for (i = 0; i < ipcc->controller.num_chans; i++)
-		ipcc->controller.chans[i].con_priv = (void *)i;
+		ipcc->controller.chans[i].con_priv = (void *)&ipcc->chnl[i];
 
 	ret = devm_mbox_controller_register(dev, &ipcc->controller);
 	if (ret)
 		goto err_irq_wkp;
 
+	ipcc->workqueue = create_workqueue(dev_name(dev));
+	if (!ipcc->workqueue) {
+		dev_err(dev, "cannot create workqueue\n");
+		ret = -ENOMEM;
+		goto err_irq_wkp;
+	}
+
 	platform_set_drvdata(pdev, ipcc);
 
 	ip_ver = readl_relaxed(ipcc->reg_base + IPCC_VER);
@@ -333,10 +409,13 @@ static int stm32_ipcc_probe(struct platform_device *pdev)
 static int stm32_ipcc_remove(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
+	struct stm32_ipcc *ipcc = dev_get_drvdata(dev);
 
 	if (of_property_read_bool(dev->of_node, "wakeup-source"))
 		dev_pm_clear_wake_irq(&pdev->dev);
 
+	destroy_workqueue(ipcc->workqueue);
+
 	device_set_wakeup_capable(dev, false);
 
 	return 0;
-- 
2.39.2

