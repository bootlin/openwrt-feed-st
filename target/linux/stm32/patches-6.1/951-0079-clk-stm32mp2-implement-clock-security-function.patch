From 0bdb488b35a8edebda61cff855737e10b84b44c1 Mon Sep 17 00:00:00 2001
From: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Date: Fri, 21 Apr 2023 16:41:32 +0200
Subject: [PATCH 0079/1141] clk: stm32mp2: implement clock security function

Check clock security to avoid access at boot time.

Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Change-Id: Iad5350e71a8d760d9e3c8e153c418aec8e03a36a
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/294225
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Eric FOURMONT <eric.fourmont-ext@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/301076
Reviewed-by: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
Domain-Review: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
---
 drivers/clk/stm32/clk-stm32mp25.c | 518 +++++++++++++++++-------------
 1 file changed, 298 insertions(+), 220 deletions(-)

--- a/drivers/clk/stm32/clk-stm32mp25.c
+++ b/drivers/clk/stm32/clk-stm32mp25.c
@@ -19,10 +19,43 @@
 
 #include "clk-stm32-core.h"
 
+#include <dt-bindings/bus/stm32mp25_sys_bus.h>
 #include <dt-bindings/clock/stm32mp25-clks.h>
 
 #include "stm32mp25_rcc.h"
 
+/* Temporary */
+#include "../../bus/stm32_sys_bus.h"
+
+/* Clock security definition */
+#define SECF_NONE		-1
+
+#define RCC_REG_SIZE	32
+#define RCC_SECCFGR(x)	(((x) / RCC_REG_SIZE) * 0x4 + RCC_SECCFGR0)
+#define RCC_CIDCFGR(x)	((x) * 0x8 + RCC_R0CIDCFGR)
+#define RCC_SEMCR(x)	((x) * 0x8 + RCC_R0SEMCR)
+#define RCC_CID1	1
+
+/* Register: RIFSC_CIDCFGR */
+#define RCC_CIDCFGR_CFEN	BIT(0)
+#define RCC_CIDCFGR_SEM_EN	BIT(1)
+#define RCC_CIDCFGR_SEMWLC1_EN	BIT(17)
+#define RCC_CIDCFGR_SCID_MASK	GENMASK(6, 4)
+
+/* Register: RIFSC_SEMCR */
+#define RCC_SEMCR_SEMCID_MASK	GENMASK(6, 4)
+
+#define STM32MP25_RIFRCC_DBG_ID		73
+#define STM32MP25_RIFRCC_IS2M_ID	107
+#define STM32MP25_RIFRCC_MCO1_ID	108
+#define STM32MP25_RIFRCC_MCO2_ID	109
+#define STM32MP25_RIFRCC_OSPI1_ID	110
+#define STM32MP25_RIFRCC_OSPI2_ID	111
+
+#define SEC_RIFSC_FLAG		BIT(31)
+#define SEC_RIFRCC(_id)		(STM32MP25_RIFRCC_##_id##_ID)
+#define SEC_RIFSC(_name)	(STM32MP25_RIFSC_##_name##_ID | SEC_RIFSC_FLAG)
+
 static const char * const adc12_src[] = {
 	"ck_flexgen_46", "ck_icn_ls_mcu"
 };
@@ -821,10 +854,6 @@ static CLK_STM32_GATE(ck_ker_spi6, "ck_f
 static CLK_STM32_GATE(ck_ker_spi7, "ck_flexgen_18", 0, GATE_SPI7);
 static CLK_STM32_GATE(ck_ker_spi8, "ck_flexgen_37", 0, GATE_SPI8);
 
-/* STGEN */
-static CLK_STM32_GATE(ck_icn_p_stgen, "ck_icn_apb4", 0, GATE_STGEN);
-static CLK_STM32_GATE(ck_ker_stgen, "ck_flexgen_33", 0, GATE_STGEN);
-
 /* STM500 */
 static CLK_STM32_GATE(ck_icn_s_stm500, "ck_icn_ls_mcu", 0, GATE_STM500);
 
@@ -925,224 +954,272 @@ static CLK_STM32_GATE(ck_icn_p_vref, "ck
 static CLK_STM32_GATE(ck_icn_p_wwdg1, "ck_icn_apb3", 0, GATE_WWDG1);
 static CLK_STM32_GATE(ck_icn_p_wwdg2, "ck_icn_ls_mcu", 0, GATE_WWDG2);
 
-enum security_clk {
-	SECF_NONE,
-};
+static int stm32_rcc_get_access(void __iomem *base, u32 index)
+{
+	u32 seccfgr, cidcfgr, semcr;
+	int bit, cid;
+
+	bit = index % RCC_REG_SIZE;
+
+	seccfgr = readl(base + RCC_SECCFGR(index));
+	if (seccfgr & BIT(bit))
+		return -EACCES;
+
+	cidcfgr = readl(base + RCC_CIDCFGR(index));
+	if (!(cidcfgr & RCC_CIDCFGR_CFEN))
+		/* CID filtering is turned off: access granted */
+		return 0;
+
+	if (!(cidcfgr & RCC_CIDCFGR_SEM_EN)) {
+		/* Static CID mode */
+		cid = FIELD_GET(RCC_CIDCFGR_SCID_MASK, cidcfgr);
+		if (cid != RCC_CID1)
+			return -EACCES;
+		return 0;
+	}
+
+	/* Pass-list with semaphore mode */
+	if (!(cidcfgr & RCC_CIDCFGR_SEMWLC1_EN))
+		return -EACCES;
+
+	semcr = readl(base + RCC_SEMCR(index));
+
+	cid = FIELD_GET(RCC_SEMCR_SEMCID_MASK, semcr);
+	if (cid != RCC_CID1)
+		return -EACCES;
+
+	return 0;
+}
+
+static int stm32mp25_check_security(void __iomem *base,
+				    const struct clock_config *cfg)
+{
+	int ret = 0;
+
+	if (cfg->sec_id != SECF_NONE) {
+		u32 index = (u32)cfg->sec_id;
+
+		if (index & SEC_RIFSC_FLAG)
+			ret = stm32_rifsc_get_access_by_id(index & ~SEC_RIFSC_FLAG);
+		else
+			ret = stm32_rcc_get_access(base, cfg->sec_id & ~SEC_RIFSC_FLAG);
+	}
+
+	return ret;
+}
 
 static const struct clock_config stm32mp25_clock_cfg[] = {
-	STM32_GATE_CFG(CK_BUS_OSPI1, ck_icn_s_ospi1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_OSPI2, ck_icn_s_ospi2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_OTFD1, ck_icn_p_otfd1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_OTFD2, ck_icn_p_otfd2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_STM500, ck_icn_s_stm500, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETH1, ck_icn_p_eth1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETH2, ck_icn_p_eth2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_PCIE, ck_icn_p_pcie, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETHSW, ck_icn_p_ethsw, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ADC12, ck_icn_p_adc12, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ADC3, ck_icn_p_adc3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_CCI, ck_icn_p_cci, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_CRC, ck_icn_p_crc, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_MDF1, ck_icn_p_mdf1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_OSPIIOM, ck_icn_p_ospiiom, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_HASH, ck_icn_p_hash, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_RNG, ck_icn_p_rng, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_CRYP1, ck_icn_p_cryp1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_CRYP2, ck_icn_p_cryp2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SAES, ck_icn_p_saes, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_PKA, ck_icn_p_pka, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ADF1, ck_icn_p_adf1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI8, ck_icn_p_spi8, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPUART1, ck_icn_p_lpuart1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C8, ck_icn_p_i2c8, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPTIM3, ck_icn_p_lptim3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPTIM4, ck_icn_p_lptim4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPTIM5, ck_icn_p_lptim5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IWDG5, ck_icn_p_iwdg5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_WWDG2, ck_icn_p_wwdg2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I3C4, ck_icn_p_i3c4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SDMMC1, ck_icn_m_sdmmc1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SDMMC2, ck_icn_m_sdmmc2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SDMMC3, ck_icn_m_sdmmc3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USB2OHCI, ck_icn_m_usb2ohci, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USB2EHCI, ck_icn_m_usb2ehci, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USB3DR, ck_icn_m_usb3dr, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM2, ck_icn_p_tim2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM3, ck_icn_p_tim3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM4, ck_icn_p_tim4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM5, ck_icn_p_tim5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM6, ck_icn_p_tim6, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM7, ck_icn_p_tim7, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM10, ck_icn_p_tim10, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM11, ck_icn_p_tim11, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM12, ck_icn_p_tim12, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM13, ck_icn_p_tim13, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM14, ck_icn_p_tim14, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPTIM1, ck_icn_p_lptim1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LPTIM2, ck_icn_p_lptim2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI2, ck_icn_p_spi2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI3, ck_icn_p_spi3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPDIFRX, ck_icn_p_spdifrx, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USART2, ck_icn_p_usart2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USART3, ck_icn_p_usart3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_UART4, ck_icn_p_uart4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_UART5, ck_icn_p_uart5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C1, ck_icn_p_i2c1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C2, ck_icn_p_i2c2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C3, ck_icn_p_i2c3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C4, ck_icn_p_i2c4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C5, ck_icn_p_i2c5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C6, ck_icn_p_i2c6, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I2C7, ck_icn_p_i2c7, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I3C1, ck_icn_p_i3c1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I3C2, ck_icn_p_i3c2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_I3C3, ck_icn_p_i3c3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM1, ck_icn_p_tim1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM8, ck_icn_p_tim8, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM15, ck_icn_p_tim15, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM16, ck_icn_p_tim16, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM17, ck_icn_p_tim17, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_TIM20, ck_icn_p_tim20, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SAI1, ck_icn_p_sai1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SAI2, ck_icn_p_sai2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SAI3, ck_icn_p_sai3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SAI4, ck_icn_p_sai4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USART1, ck_icn_p_usart1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USART6, ck_icn_p_usart6, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_UART7, ck_icn_p_uart7, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_UART8, ck_icn_p_uart8, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_UART9, ck_icn_p_uart9, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_FDCAN, ck_icn_p_fdcan, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI1, ck_icn_p_spi1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI4, ck_icn_p_spi4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI5, ck_icn_p_spi5, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI6, ck_icn_p_spi6, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SPI7, ck_icn_p_spi7, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IWDG1, ck_icn_p_iwdg1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IWDG2, ck_icn_p_iwdg2, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IWDG3, ck_icn_p_iwdg3, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IWDG4, ck_icn_p_iwdg4, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_WWDG1, ck_icn_p_wwdg1, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_VREF, ck_icn_p_vref, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SERC, ck_icn_p_serc, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_HDP, ck_icn_p_hdp, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_IS2M, ck_icn_p_is2m, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_DSI, ck_icn_p_dsi, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LTDC, ck_icn_p_ltdc, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_CSI, ck_icn_p_csi, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_DCMIPP, ck_icn_p_dcmipp, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_LVDS, ck_icn_p_lvds, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_GICV2M, ck_icn_p_gicv2m, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USBTC, ck_icn_p_usbtc, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_USB3PCIEPHY, ck_icn_p_usb3pciephy, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_STGEN, ck_icn_p_stgen, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_VDEC, ck_icn_p_vdec, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_VENC, ck_icn_p_venc, SECF_NONE),
-	STM32_GATE_CFG(CK_SYSDBG, ck_sys_dbg, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM2, ck_ker_tim2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM3, ck_ker_tim3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM4, ck_ker_tim4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM5, ck_ker_tim5, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM6, ck_ker_tim6, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM7, ck_ker_tim7, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM10, ck_ker_tim10, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM11, ck_ker_tim11, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM12, ck_ker_tim12, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM13, ck_ker_tim13, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM14, ck_ker_tim14, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM1, ck_ker_tim1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM8, ck_ker_tim8, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM15, ck_ker_tim15, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM16, ck_ker_tim16, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM17, ck_ker_tim17, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TIM20, ck_ker_tim20, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPTIM1, ck_ker_lptim1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPTIM2, ck_ker_lptim2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USART2, ck_ker_usart2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_UART4, ck_ker_uart4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USART3, ck_ker_usart3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_UART5, ck_ker_uart5, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI2, ck_ker_spi2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI3, ck_ker_spi3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPDIFRX, ck_ker_spdifrx, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C1, ck_ker_i2c1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C2, ck_ker_i2c2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I3C1, ck_ker_i3c1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I3C2, ck_ker_i3c2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C3, ck_ker_i2c3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C5, ck_ker_i2c5, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I3C3, ck_ker_i3c3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C4, ck_ker_i2c4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C6, ck_ker_i2c6, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C7, ck_ker_i2c7, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI1, ck_ker_spi1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI4, ck_ker_spi4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI5, ck_ker_spi5, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI6, ck_ker_spi6, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI7, ck_ker_spi7, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USART1, ck_ker_usart1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USART6, ck_ker_usart6, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_UART7, ck_ker_uart7, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_UART8, ck_ker_uart8, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_UART9, ck_ker_uart9, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_MDF1, ck_ker_mdf1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SAI1, ck_ker_sai1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SAI2, ck_ker_sai2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SAI3, ck_ker_sai3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SAI4, ck_ker_sai4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_FDCAN, ck_ker_fdcan, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_CSI, ck_ker_csi, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_CSITXESC, ck_ker_csitxesc, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_CSIPHY, ck_ker_csiphy, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_STGEN, ck_ker_stgen, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USBTC, ck_ker_usbtc, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I3C4, ck_ker_i3c4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SPI8, ck_ker_spi8, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_I2C8, ck_ker_i2c8, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPUART1, ck_ker_lpuart1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPTIM3, ck_ker_lptim3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPTIM4, ck_ker_lptim4, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LPTIM5, ck_ker_lptim5, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ADF1, ck_ker_adf1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TSDBG, ck_ker_tsdbg, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_TPIU, ck_ker_tpiu, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETR, ck_icn_m_etr, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_SYSATB, ck_sys_atb, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_OSPI1, ck_ker_ospi1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_OSPI2, ck_ker_ospi2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SDMMC1, ck_ker_sdmmc1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SDMMC2, ck_ker_sdmmc2, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_SDMMC3, ck_ker_sdmmc3, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETH1, ck_ker_eth1, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH1_STP, ck_ker_eth1stp, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETHSW, ck_ker_ethsw, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETH2, ck_ker_eth2, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH2_STP, ck_ker_eth2stp, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETH1PTP, ck_ker_eth1ptp, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETH2PTP, ck_ker_eth2ptp, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_GPU, ck_icn_m_gpu, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_ETHSWREF, ck_ker_ethswref, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETHSWACMCFG, ck_icn_p_ethsw_acm_cfg, SECF_NONE),
-	STM32_GATE_CFG(CK_BUS_ETHSWACMMSG, ck_icn_p_ethsw_acm_msg, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH1_MAC, ck_ker_eth1mac, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH1_TX, ck_ker_eth1tx, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH1_RX, ck_ker_eth1rx, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH2_MAC, ck_ker_eth2mac, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH2_TX, ck_ker_eth2tx, SECF_NONE),
-	STM32_GATE_CFG(CK_ETH2_RX, ck_ker_eth2rx, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_MCO1, ck_mco1, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_MCO2, ck_mco2, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_ADC12, ck_ker_adc12, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_ADC3, ck_ker_adc3, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_USB2PHY1, ck_ker_usb2phy1, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_USB2PHY2, ck_ker_usb2phy2, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_USB2PHY2EN, ck_ker_usb2phy2_en, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_USB3PCIEPHY, ck_ker_usb3pciephy, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_DSIBLANE, clk_lanebyte, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_DSIPHY, ck_ker_dsiphy, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_LVDSPHY, ck_ker_lvdsphy, SECF_NONE),
-	STM32_COMPOSITE_CFG(CK_KER_DTS, ck_ker_dts, SECF_NONE),
-	STM32_GATE_CFG(CK_KER_LTDC, ck_ker_ltdc, SECF_NONE),
+	STM32_GATE_CFG(CK_BUS_OSPI1, ck_icn_s_ospi1, SEC_RIFRCC(OSPI1)),
+	STM32_GATE_CFG(CK_BUS_OSPI2, ck_icn_s_ospi2, SEC_RIFRCC(OSPI2)),
+	STM32_GATE_CFG(CK_BUS_OTFD1, ck_icn_p_otfd1, SEC_RIFRCC(OSPI1)),
+	STM32_GATE_CFG(CK_BUS_OTFD2, ck_icn_p_otfd2, SEC_RIFRCC(OSPI2)),
+	STM32_GATE_CFG(CK_BUS_STM500, ck_icn_s_stm500, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_BUS_ETH1, ck_icn_p_eth1, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_BUS_ETH2, ck_icn_p_eth2, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_BUS_PCIE, ck_icn_p_pcie, SEC_RIFSC(PCIE)),
+	STM32_GATE_CFG(CK_BUS_ETHSW, ck_icn_p_ethsw, SEC_RIFSC(ETHSW_DEIP)),
+	STM32_GATE_CFG(CK_BUS_ADC12, ck_icn_p_adc12, SEC_RIFSC(ADC12)),
+	STM32_GATE_CFG(CK_BUS_ADC3, ck_icn_p_adc3, SEC_RIFSC(ADC3)),
+	STM32_GATE_CFG(CK_BUS_CCI, ck_icn_p_cci, SEC_RIFSC(DCMI_PSSI)),
+	STM32_GATE_CFG(CK_BUS_CRC, ck_icn_p_crc, SEC_RIFSC(CRC)),
+	STM32_GATE_CFG(CK_BUS_MDF1, ck_icn_p_mdf1, SEC_RIFSC(MDF1)),
+	STM32_GATE_CFG(CK_BUS_OSPIIOM, ck_icn_p_ospiiom, SEC_RIFSC(OCTOSPIM)),
+	STM32_GATE_CFG(CK_BUS_HASH, ck_icn_p_hash, SEC_RIFSC(HASH)),
+	STM32_GATE_CFG(CK_BUS_RNG, ck_icn_p_rng, SEC_RIFSC(RNG)),
+	STM32_GATE_CFG(CK_BUS_CRYP1, ck_icn_p_cryp1, SEC_RIFSC(CRYP1)),
+	STM32_GATE_CFG(CK_BUS_CRYP2, ck_icn_p_cryp2, SEC_RIFSC(CRYP2)),
+	STM32_GATE_CFG(CK_BUS_SAES, ck_icn_p_saes, SEC_RIFSC(SAES)),
+	STM32_GATE_CFG(CK_BUS_PKA, ck_icn_p_pka, SEC_RIFSC(PKA)),
+	STM32_GATE_CFG(CK_BUS_ADF1, ck_icn_p_adf1, SEC_RIFSC(ADF1)),
+	STM32_GATE_CFG(CK_BUS_SPI8, ck_icn_p_spi8, SEC_RIFSC(SPI8)),
+	STM32_GATE_CFG(CK_BUS_LPUART1, ck_icn_p_lpuart1, SEC_RIFSC(LPUART1)),
+	STM32_GATE_CFG(CK_BUS_I2C8, ck_icn_p_i2c8, SEC_RIFSC(I2C8)),
+	STM32_GATE_CFG(CK_BUS_LPTIM3, ck_icn_p_lptim3, SEC_RIFSC(LPTIM3)),
+	STM32_GATE_CFG(CK_BUS_LPTIM4, ck_icn_p_lptim4, SEC_RIFSC(LPTIM4)),
+	STM32_GATE_CFG(CK_BUS_LPTIM5, ck_icn_p_lptim5, SEC_RIFSC(LPTIM5)),
+	STM32_GATE_CFG(CK_BUS_IWDG5, ck_icn_p_iwdg5, SEC_RIFSC(IWDG5)),
+	STM32_GATE_CFG(CK_BUS_WWDG2, ck_icn_p_wwdg2, SEC_RIFSC(WWDG2)),
+	STM32_GATE_CFG(CK_BUS_I3C4, ck_icn_p_i3c4, SEC_RIFSC(I3C4)),
+	STM32_GATE_CFG(CK_BUS_SDMMC1, ck_icn_m_sdmmc1, SEC_RIFSC(SDMMC1)),
+	STM32_GATE_CFG(CK_BUS_SDMMC2, ck_icn_m_sdmmc2, SEC_RIFSC(SDMMC2)),
+	STM32_GATE_CFG(CK_BUS_SDMMC3, ck_icn_m_sdmmc3, SEC_RIFSC(SDMMC3)),
+	STM32_GATE_CFG(CK_BUS_USB2OHCI, ck_icn_m_usb2ohci, SEC_RIFSC(USBH)),
+	STM32_GATE_CFG(CK_BUS_USB2EHCI, ck_icn_m_usb2ehci, SEC_RIFSC(USBH)),
+	STM32_GATE_CFG(CK_BUS_USB3DR, ck_icn_m_usb3dr, SEC_RIFSC(USB3DR)),
+	STM32_GATE_CFG(CK_BUS_TIM2, ck_icn_p_tim2, SEC_RIFSC(TIM2)),
+	STM32_GATE_CFG(CK_BUS_TIM3, ck_icn_p_tim3, SEC_RIFSC(TIM3)),
+	STM32_GATE_CFG(CK_BUS_TIM4, ck_icn_p_tim4, SEC_RIFSC(TIM4)),
+	STM32_GATE_CFG(CK_BUS_TIM5, ck_icn_p_tim5, SEC_RIFSC(TIM5)),
+	STM32_GATE_CFG(CK_BUS_TIM6, ck_icn_p_tim6, SEC_RIFSC(TIM6)),
+	STM32_GATE_CFG(CK_BUS_TIM7, ck_icn_p_tim7, SEC_RIFSC(TIM7)),
+	STM32_GATE_CFG(CK_BUS_TIM10, ck_icn_p_tim10, SEC_RIFSC(TIM10)),
+	STM32_GATE_CFG(CK_BUS_TIM11, ck_icn_p_tim11, SEC_RIFSC(TIM11)),
+	STM32_GATE_CFG(CK_BUS_TIM12, ck_icn_p_tim12, SEC_RIFSC(TIM12)),
+	STM32_GATE_CFG(CK_BUS_TIM13, ck_icn_p_tim13, SEC_RIFSC(TIM13)),
+	STM32_GATE_CFG(CK_BUS_TIM14, ck_icn_p_tim14, SEC_RIFSC(TIM14)),
+	STM32_GATE_CFG(CK_BUS_LPTIM1, ck_icn_p_lptim1, SEC_RIFSC(LPTIM1)),
+	STM32_GATE_CFG(CK_BUS_LPTIM2, ck_icn_p_lptim2, SEC_RIFSC(LPTIM2)),
+	STM32_GATE_CFG(CK_BUS_SPI2, ck_icn_p_spi2, SEC_RIFSC(SPI2)),
+	STM32_GATE_CFG(CK_BUS_SPI3, ck_icn_p_spi3, SEC_RIFSC(SPI3)),
+	STM32_GATE_CFG(CK_BUS_SPDIFRX, ck_icn_p_spdifrx, SEC_RIFSC(SPDIFRX)),
+	STM32_GATE_CFG(CK_BUS_USART2, ck_icn_p_usart2, SEC_RIFSC(USART2)),
+	STM32_GATE_CFG(CK_BUS_USART3, ck_icn_p_usart3, SEC_RIFSC(USART3)),
+	STM32_GATE_CFG(CK_BUS_UART4, ck_icn_p_uart4, SEC_RIFSC(UART4)),
+	STM32_GATE_CFG(CK_BUS_UART5, ck_icn_p_uart5, SEC_RIFSC(UART5)),
+	STM32_GATE_CFG(CK_BUS_I2C1, ck_icn_p_i2c1, SEC_RIFSC(I2C1)),
+	STM32_GATE_CFG(CK_BUS_I2C2, ck_icn_p_i2c2, SEC_RIFSC(I2C2)),
+	STM32_GATE_CFG(CK_BUS_I2C3, ck_icn_p_i2c3, SEC_RIFSC(I2C3)),
+	STM32_GATE_CFG(CK_BUS_I2C4, ck_icn_p_i2c4, SEC_RIFSC(I2C4)),
+	STM32_GATE_CFG(CK_BUS_I2C5, ck_icn_p_i2c5, SEC_RIFSC(I2C5)),
+	STM32_GATE_CFG(CK_BUS_I2C6, ck_icn_p_i2c6, SEC_RIFSC(I2C6)),
+	STM32_GATE_CFG(CK_BUS_I2C7, ck_icn_p_i2c7, SEC_RIFSC(I2C7)),
+	STM32_GATE_CFG(CK_BUS_I3C1, ck_icn_p_i3c1, SEC_RIFSC(I3C1)),
+	STM32_GATE_CFG(CK_BUS_I3C2, ck_icn_p_i3c2, SEC_RIFSC(I3C2)),
+	STM32_GATE_CFG(CK_BUS_I3C3, ck_icn_p_i3c3, SEC_RIFSC(I3C3)),
+	STM32_GATE_CFG(CK_BUS_TIM1, ck_icn_p_tim1, SEC_RIFSC(TIM1)),
+	STM32_GATE_CFG(CK_BUS_TIM8, ck_icn_p_tim8, SEC_RIFSC(TIM8)),
+	STM32_GATE_CFG(CK_BUS_TIM15, ck_icn_p_tim15, SEC_RIFSC(TIM15)),
+	STM32_GATE_CFG(CK_BUS_TIM16, ck_icn_p_tim16, SEC_RIFSC(TIM16)),
+	STM32_GATE_CFG(CK_BUS_TIM17, ck_icn_p_tim17, SEC_RIFSC(TIM17)),
+	STM32_GATE_CFG(CK_BUS_TIM20, ck_icn_p_tim20, SEC_RIFSC(TIM20)),
+	STM32_GATE_CFG(CK_BUS_SAI1, ck_icn_p_sai1, SEC_RIFSC(SAI1)),
+	STM32_GATE_CFG(CK_BUS_SAI2, ck_icn_p_sai2, SEC_RIFSC(SAI2)),
+	STM32_GATE_CFG(CK_BUS_SAI3, ck_icn_p_sai3, SEC_RIFSC(SAI3)),
+	STM32_GATE_CFG(CK_BUS_SAI4, ck_icn_p_sai4, SEC_RIFSC(SAI4)),
+	STM32_GATE_CFG(CK_BUS_USART1, ck_icn_p_usart1, SEC_RIFSC(USART1)),
+	STM32_GATE_CFG(CK_BUS_USART6, ck_icn_p_usart6, SEC_RIFSC(USART6)),
+	STM32_GATE_CFG(CK_BUS_UART7, ck_icn_p_uart7, SEC_RIFSC(UART7)),
+	STM32_GATE_CFG(CK_BUS_UART8, ck_icn_p_uart8, SEC_RIFSC(UART8)),
+	STM32_GATE_CFG(CK_BUS_UART9, ck_icn_p_uart9, SEC_RIFSC(UART9)),
+	STM32_GATE_CFG(CK_BUS_FDCAN, ck_icn_p_fdcan, SEC_RIFSC(FDCAN)),
+	STM32_GATE_CFG(CK_BUS_SPI1, ck_icn_p_spi1, SEC_RIFSC(SPI1)),
+	STM32_GATE_CFG(CK_BUS_SPI4, ck_icn_p_spi4, SEC_RIFSC(SPI4)),
+	STM32_GATE_CFG(CK_BUS_SPI5, ck_icn_p_spi5, SEC_RIFSC(SPI5)),
+	STM32_GATE_CFG(CK_BUS_SPI6, ck_icn_p_spi6, SEC_RIFSC(SPI6)),
+	STM32_GATE_CFG(CK_BUS_SPI7, ck_icn_p_spi7, SEC_RIFSC(SPI7)),
+	STM32_GATE_CFG(CK_BUS_IWDG1, ck_icn_p_iwdg1, SEC_RIFSC(IWDG1)),
+	STM32_GATE_CFG(CK_BUS_IWDG2, ck_icn_p_iwdg2, SEC_RIFSC(IWDG2)),
+	STM32_GATE_CFG(CK_BUS_IWDG3, ck_icn_p_iwdg3, SEC_RIFSC(IWDG3)),
+	STM32_GATE_CFG(CK_BUS_IWDG4, ck_icn_p_iwdg4, SEC_RIFSC(IWDG4)),
+	STM32_GATE_CFG(CK_BUS_WWDG1, ck_icn_p_wwdg1, SEC_RIFSC(WWDG1)),
+	STM32_GATE_CFG(CK_BUS_VREF, ck_icn_p_vref, SEC_RIFSC(VREFBUF)),
+	STM32_GATE_CFG(CK_BUS_SERC, ck_icn_p_serc, SEC_RIFSC(SERC)),
+	STM32_GATE_CFG(CK_BUS_HDP, ck_icn_p_hdp, SEC_RIFSC(HDP)),
+	STM32_GATE_CFG(CK_BUS_IS2M, ck_icn_p_is2m, SEC_RIFRCC(IS2M)),
+	STM32_GATE_CFG(CK_BUS_DSI, ck_icn_p_dsi, SEC_RIFSC(DSI_CMN)),
+	STM32_GATE_CFG(CK_BUS_LTDC, ck_icn_p_ltdc, SEC_RIFSC(LTDC_CMN)),
+	STM32_GATE_CFG(CK_BUS_CSI, ck_icn_p_csi, SEC_RIFSC(CSI)),
+	STM32_GATE_CFG(CK_BUS_DCMIPP, ck_icn_p_dcmipp, SEC_RIFSC(DCMIPP)),
+	STM32_GATE_CFG(CK_BUS_LVDS, ck_icn_p_lvds, SEC_RIFSC(LVDS)),
+	STM32_GATE_CFG(CK_BUS_GICV2M, ck_icn_p_gicv2m, SEC_RIFSC(GICV2M)),
+	STM32_GATE_CFG(CK_BUS_USBTC, ck_icn_p_usbtc, SEC_RIFSC(UCPD1)),
+	STM32_GATE_CFG(CK_BUS_USB3PCIEPHY, ck_icn_p_usb3pciephy, SEC_RIFSC(USB3DR)),
+	STM32_GATE_CFG(CK_BUS_VDEC, ck_icn_p_vdec, SEC_RIFSC(VDEC)),
+	STM32_GATE_CFG(CK_BUS_VENC, ck_icn_p_venc, SEC_RIFSC(VENC)),
+	STM32_GATE_CFG(CK_SYSDBG, ck_sys_dbg, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_KER_TIM2, ck_ker_tim2, SEC_RIFSC(TIM2)),
+	STM32_GATE_CFG(CK_KER_TIM3, ck_ker_tim3, SEC_RIFSC(TIM3)),
+	STM32_GATE_CFG(CK_KER_TIM4, ck_ker_tim4, SEC_RIFSC(TIM4)),
+	STM32_GATE_CFG(CK_KER_TIM5, ck_ker_tim5, SEC_RIFSC(TIM5)),
+	STM32_GATE_CFG(CK_KER_TIM6, ck_ker_tim6, SEC_RIFSC(TIM6)),
+	STM32_GATE_CFG(CK_KER_TIM7, ck_ker_tim7, SEC_RIFSC(TIM7)),
+	STM32_GATE_CFG(CK_KER_TIM10, ck_ker_tim10, SEC_RIFSC(TIM10)),
+	STM32_GATE_CFG(CK_KER_TIM11, ck_ker_tim11, SEC_RIFSC(TIM11)),
+	STM32_GATE_CFG(CK_KER_TIM12, ck_ker_tim12, SEC_RIFSC(TIM12)),
+	STM32_GATE_CFG(CK_KER_TIM13, ck_ker_tim13, SEC_RIFSC(TIM13)),
+	STM32_GATE_CFG(CK_KER_TIM14, ck_ker_tim14, SEC_RIFSC(TIM14)),
+	STM32_GATE_CFG(CK_KER_TIM1, ck_ker_tim1, SEC_RIFSC(TIM1)),
+	STM32_GATE_CFG(CK_KER_TIM8, ck_ker_tim8, SEC_RIFSC(TIM8)),
+	STM32_GATE_CFG(CK_KER_TIM15, ck_ker_tim15, SEC_RIFSC(TIM15)),
+	STM32_GATE_CFG(CK_KER_TIM16, ck_ker_tim16, SEC_RIFSC(TIM16)),
+	STM32_GATE_CFG(CK_KER_TIM17, ck_ker_tim17, SEC_RIFSC(TIM17)),
+	STM32_GATE_CFG(CK_KER_TIM20, ck_ker_tim20, SEC_RIFSC(TIM20)),
+	STM32_GATE_CFG(CK_KER_LPTIM1, ck_ker_lptim1, SEC_RIFSC(LPTIM1)),
+	STM32_GATE_CFG(CK_KER_LPTIM2, ck_ker_lptim2, SEC_RIFSC(LPTIM2)),
+	STM32_GATE_CFG(CK_KER_USART2, ck_ker_usart2, SEC_RIFSC(USART2)),
+	STM32_GATE_CFG(CK_KER_UART4, ck_ker_uart4, SEC_RIFSC(UART4)),
+	STM32_GATE_CFG(CK_KER_USART3, ck_ker_usart3, SEC_RIFSC(USART3)),
+	STM32_GATE_CFG(CK_KER_UART5, ck_ker_uart5, SEC_RIFSC(UART5)),
+	STM32_GATE_CFG(CK_KER_SPI2, ck_ker_spi2, SEC_RIFSC(SPI2)),
+	STM32_GATE_CFG(CK_KER_SPI3, ck_ker_spi3, SEC_RIFSC(SPI3)),
+	STM32_GATE_CFG(CK_KER_SPDIFRX, ck_ker_spdifrx, SEC_RIFSC(SPDIFRX)),
+	STM32_GATE_CFG(CK_KER_I2C1, ck_ker_i2c1, SEC_RIFSC(I2C1)),
+	STM32_GATE_CFG(CK_KER_I2C2, ck_ker_i2c2, SEC_RIFSC(I2C2)),
+	STM32_GATE_CFG(CK_KER_I3C1, ck_ker_i3c1, SEC_RIFSC(I3C1)),
+	STM32_GATE_CFG(CK_KER_I3C2, ck_ker_i3c2, SEC_RIFSC(I3C2)),
+	STM32_GATE_CFG(CK_KER_I2C3, ck_ker_i2c3, SEC_RIFSC(I2C3)),
+	STM32_GATE_CFG(CK_KER_I2C5, ck_ker_i2c5, SEC_RIFSC(I2C5)),
+	STM32_GATE_CFG(CK_KER_I3C3, ck_ker_i3c3, SEC_RIFSC(I3C3)),
+	STM32_GATE_CFG(CK_KER_I2C4, ck_ker_i2c4, SEC_RIFSC(I2C4)),
+	STM32_GATE_CFG(CK_KER_I2C6, ck_ker_i2c6, SEC_RIFSC(I2C6)),
+	STM32_GATE_CFG(CK_KER_I2C7, ck_ker_i2c7, SEC_RIFSC(I2C7)),
+	STM32_GATE_CFG(CK_KER_SPI1, ck_ker_spi1, SEC_RIFSC(SPI1)),
+	STM32_GATE_CFG(CK_KER_SPI4, ck_ker_spi4, SEC_RIFSC(SPI4)),
+	STM32_GATE_CFG(CK_KER_SPI5, ck_ker_spi5, SEC_RIFSC(SPI5)),
+	STM32_GATE_CFG(CK_KER_SPI6, ck_ker_spi6, SEC_RIFSC(SPI6)),
+	STM32_GATE_CFG(CK_KER_SPI7, ck_ker_spi7, SEC_RIFSC(SPI7)),
+	STM32_GATE_CFG(CK_KER_USART1, ck_ker_usart1, SEC_RIFSC(USART1)),
+	STM32_GATE_CFG(CK_KER_USART6, ck_ker_usart6, SEC_RIFSC(USART6)),
+	STM32_GATE_CFG(CK_KER_UART7, ck_ker_uart7, SEC_RIFSC(UART7)),
+	STM32_GATE_CFG(CK_KER_UART8, ck_ker_uart8, SEC_RIFSC(UART8)),
+	STM32_GATE_CFG(CK_KER_UART9, ck_ker_uart9, SEC_RIFSC(UART9)),
+	STM32_GATE_CFG(CK_KER_MDF1, ck_ker_mdf1, SEC_RIFSC(MDF1)),
+	STM32_GATE_CFG(CK_KER_SAI1, ck_ker_sai1, SEC_RIFSC(SAI1)),
+	STM32_GATE_CFG(CK_KER_SAI2, ck_ker_sai2, SEC_RIFSC(SAI2)),
+	STM32_GATE_CFG(CK_KER_SAI3, ck_ker_sai3, SEC_RIFSC(SAI3)),
+	STM32_GATE_CFG(CK_KER_SAI4, ck_ker_sai4, SEC_RIFSC(SAI4)),
+	STM32_GATE_CFG(CK_KER_FDCAN, ck_ker_fdcan, SEC_RIFSC(FDCAN)),
+	STM32_GATE_CFG(CK_KER_CSI, ck_ker_csi, SEC_RIFSC(CSI)),
+	STM32_GATE_CFG(CK_KER_CSITXESC, ck_ker_csitxesc, SEC_RIFSC(CSI)),
+	STM32_GATE_CFG(CK_KER_CSIPHY, ck_ker_csiphy, SEC_RIFSC(CSI)),
+	STM32_GATE_CFG(CK_KER_USBTC, ck_ker_usbtc, SEC_RIFSC(UCPD1)),
+	STM32_GATE_CFG(CK_KER_I3C4, ck_ker_i3c4, SEC_RIFSC(I3C4)),
+	STM32_GATE_CFG(CK_KER_SPI8, ck_ker_spi8, SEC_RIFSC(SPI8)),
+	STM32_GATE_CFG(CK_KER_I2C8, ck_ker_i2c8, SEC_RIFSC(I2C8)),
+	STM32_GATE_CFG(CK_KER_LPUART1, ck_ker_lpuart1, SEC_RIFSC(LPUART1)),
+	STM32_GATE_CFG(CK_KER_LPTIM3, ck_ker_lptim3, SEC_RIFSC(LPTIM3)),
+	STM32_GATE_CFG(CK_KER_LPTIM4, ck_ker_lptim4, SEC_RIFSC(LPTIM4)),
+	STM32_GATE_CFG(CK_KER_LPTIM5, ck_ker_lptim5, SEC_RIFSC(LPTIM5)),
+	STM32_GATE_CFG(CK_KER_ADF1, ck_ker_adf1, SEC_RIFSC(ADF1)),
+	STM32_GATE_CFG(CK_KER_TSDBG, ck_ker_tsdbg, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_KER_TPIU, ck_ker_tpiu, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_BUS_ETR, ck_icn_m_etr, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_BUS_SYSATB, ck_sys_atb, SEC_RIFRCC(DBG)),
+	STM32_GATE_CFG(CK_KER_OSPI1, ck_ker_ospi1, SEC_RIFRCC(OSPI1)),
+	STM32_GATE_CFG(CK_KER_OSPI2, ck_ker_ospi2, SEC_RIFRCC(OSPI2)),
+	STM32_GATE_CFG(CK_KER_SDMMC1, ck_ker_sdmmc1, SEC_RIFSC(SDMMC1)),
+	STM32_GATE_CFG(CK_KER_SDMMC2, ck_ker_sdmmc2, SEC_RIFSC(SDMMC2)),
+	STM32_GATE_CFG(CK_KER_SDMMC3, ck_ker_sdmmc3, SEC_RIFSC(SDMMC3)),
+	STM32_GATE_CFG(CK_KER_ETH1, ck_ker_eth1, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_ETH1_STP, ck_ker_eth1stp, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_KER_ETHSW, ck_ker_ethsw, SEC_RIFSC(ETHSW_DEIP)),
+	STM32_GATE_CFG(CK_KER_ETH2, ck_ker_eth2, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_ETH2_STP, ck_ker_eth2stp, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_KER_ETH1PTP, ck_ker_eth1ptp, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_KER_ETH2PTP, ck_ker_eth2ptp, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_BUS_GPU, ck_icn_m_gpu, SEC_RIFSC(GPU)),
+	STM32_GATE_CFG(CK_KER_ETHSWREF, ck_ker_ethswref, SEC_RIFSC(ETHSW_DEIP)),
+	STM32_GATE_CFG(CK_BUS_ETHSWACMCFG, ck_icn_p_ethsw_acm_cfg, SEC_RIFSC(ETHSW_ACM_CFG)),
+	STM32_GATE_CFG(CK_BUS_ETHSWACMMSG, ck_icn_p_ethsw_acm_msg, SEC_RIFSC(ETHSW_ACM_MSGBUF)),
+	STM32_GATE_CFG(CK_ETH1_MAC, ck_ker_eth1mac, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_ETH1_TX, ck_ker_eth1tx, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_ETH1_RX, ck_ker_eth1rx, SEC_RIFSC(ETH1)),
+	STM32_GATE_CFG(CK_ETH2_MAC, ck_ker_eth2mac, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_ETH2_TX, ck_ker_eth2tx, SEC_RIFSC(ETH2)),
+	STM32_GATE_CFG(CK_ETH2_RX, ck_ker_eth2rx, SEC_RIFSC(ETH2)),
+	STM32_COMPOSITE_CFG(CK_MCO1, ck_mco1, SEC_RIFRCC(MCO1)),
+	STM32_COMPOSITE_CFG(CK_MCO2, ck_mco2, SEC_RIFRCC(MCO2)),
+	STM32_COMPOSITE_CFG(CK_KER_ADC12, ck_ker_adc12, SEC_RIFSC(ADC12)),
+	STM32_COMPOSITE_CFG(CK_KER_ADC3, ck_ker_adc3, SEC_RIFSC(ADC3)),
+	STM32_COMPOSITE_CFG(CK_KER_USB2PHY1, ck_ker_usb2phy1, SEC_RIFSC(USBH)),
+	STM32_GATE_CFG(CK_KER_USB2PHY2, ck_ker_usb2phy2, SEC_RIFSC(USBH)),
+	STM32_COMPOSITE_CFG(CK_KER_USB2PHY2EN, ck_ker_usb2phy2_en, SEC_RIFSC(USBH)),
+	STM32_COMPOSITE_CFG(CK_KER_USB3PCIEPHY, ck_ker_usb3pciephy, SEC_RIFSC(USB3DR)),
+	STM32_COMPOSITE_CFG(CK_KER_DSIBLANE, clk_lanebyte, SEC_RIFSC(DSI_CMN)),
+	STM32_COMPOSITE_CFG(CK_KER_DSIPHY, ck_ker_dsiphy, SEC_RIFSC(DSI_CMN)),
+	STM32_COMPOSITE_CFG(CK_KER_LVDSPHY, ck_ker_lvdsphy, SEC_RIFSC(LVDS)),
+	STM32_COMPOSITE_CFG(CK_KER_DTS, ck_ker_dts, SEC_RIFSC(DTS)),
+	STM32_GATE_CFG(CK_KER_LTDC, ck_ker_ltdc, SEC_RIFSC(LTDC_CMN)),
 };
 
 u16 stm32mp25_cpt_gate[GATE_NB];
@@ -1165,6 +1242,7 @@ static struct stm32_rcc_match_data stm32
 	.num_clocks	= ARRAY_SIZE(stm32mp25_clock_cfg),
 	.maxbinding	= STM32MP25_LAST_CLK,
 	.clock_data	= &stm32mp25_clock_data,
+	.check_security = &stm32mp25_check_security,
 	.reset_us	= 2,
 #ifdef CONFIG_DEBUG_FS
 	.clock_summary	= &clock_summary_mp25,
