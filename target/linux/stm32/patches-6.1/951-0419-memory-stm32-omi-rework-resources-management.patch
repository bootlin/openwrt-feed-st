From f83a5456ad606bb9ed0ab80453f9669b076484fd Mon Sep 17 00:00:00 2001
From: Christophe Kerello <christophe.kerello@foss.st.com>
Date: Fri, 28 Jul 2023 14:18:16 +0200
Subject: [PATCH 0419/1141] memory: stm32-omi: rework resources management

Assign all the resources to OMI driver to avoid to get
resources twice during drivers unbind/bind.

Change-Id: Iab1a4f00d76cb6686e7735d3a9b7fe1db57994d7
Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
---
 drivers/memory/stm32-omi.c            | 271 ++++++++++++++------------
 drivers/mtd/hyperbus/hyperbus-stm32.c |  75 +++----
 drivers/spi/spi-stm32-ospi.c          | 125 +++++-------
 include/memory/stm32-omi.h            |   8 +-
 4 files changed, 232 insertions(+), 247 deletions(-)

--- a/drivers/memory/stm32-omi.c
+++ b/drivers/memory/stm32-omi.c
@@ -111,7 +111,15 @@ out:
 }
 EXPORT_SYMBOL(stm32_omi_wait_cmd);
 
-irqreturn_t stm32_omi_irq(int irq, void *dev_id)
+void stm32_omi_dma_callback(void *arg)
+{
+	struct completion *dma_completion = arg;
+
+	complete(dma_completion);
+}
+EXPORT_SYMBOL(stm32_omi_dma_callback);
+
+static irqreturn_t stm32_omi_irq(int irq, void *dev_id)
 {
 	struct stm32_omi *omi = (struct stm32_omi *)dev_id;
 	void __iomem *regs_base = omi->regs_base;
@@ -139,141 +147,30 @@ irqreturn_t stm32_omi_irq(int irq, void
 
 	return IRQ_HANDLED;
 }
-EXPORT_SYMBOL(stm32_omi_irq);
 
-void stm32_omi_dma_callback(void *arg)
+void stm32_omi_dma_setup(struct stm32_omi *omi,
+			 struct dma_slave_config *dma_cfg)
 {
-	struct completion *dma_completion = arg;
-
-	complete(dma_completion);
-}
-EXPORT_SYMBOL(stm32_omi_dma_callback);
-
-void stm32_omi_dma_free(struct stm32_omi *omi)
-{
-	if (omi->dma_chtx)
-		dma_release_channel(omi->dma_chtx);
-	if (omi->dma_chrx)
-		dma_release_channel(omi->dma_chrx);
-}
-EXPORT_SYMBOL(stm32_omi_dma_free);
-
-int stm32_omi_dma_setup(struct stm32_omi *omi, struct device *dev,
-			       struct dma_slave_config *dma_cfg)
-{
-	int ret = 0;
-
-	omi->dma_chrx = dma_request_chan(dev, "rx");
-	if (IS_ERR(omi->dma_chrx)) {
-		ret = PTR_ERR(omi->dma_chrx);
-		omi->dma_chrx = NULL;
-		if (ret == -EPROBE_DEFER)
-			goto out;
-	} else if (dma_cfg) {
+	if (dma_cfg && omi->dma_chrx) {
 		if (dmaengine_slave_config(omi->dma_chrx, dma_cfg)) {
-			dev_err(dev, "dma rx config failed\n");
+			dev_err(omi->dev, "dma rx config failed\n");
 			dma_release_channel(omi->dma_chrx);
 			omi->dma_chrx = NULL;
 		}
 	}
 
-	omi->dma_chtx = dma_request_chan(dev, "tx");
-	if (IS_ERR(omi->dma_chtx)) {
-		ret = PTR_ERR(omi->dma_chtx);
-		omi->dma_chtx = NULL;
-	} else if (dma_cfg) {
+	if (dma_cfg && omi->dma_chtx) {
 		if (dmaengine_slave_config(omi->dma_chtx, dma_cfg)) {
-			dev_err(dev, "dma tx config failed\n");
+			dev_err(omi->dev, "dma tx config failed\n");
 			dma_release_channel(omi->dma_chtx);
 			omi->dma_chtx = NULL;
 		}
 	}
 
 	init_completion(&omi->dma_completion);
-out:
-	if (ret != -EPROBE_DEFER)
-		ret = 0;
-
-	return ret;
 }
 EXPORT_SYMBOL(stm32_omi_dma_setup);
 
-int stm32_omi_get_resources(struct stm32_omi *omi, struct device *dev)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct device_node *np = dev->of_node;
-	struct resource res;
-	struct reserved_mem *rmem = NULL;
-	struct device_node *node;
-	int ret = 0;
-
-	omi->clk = devm_clk_get(dev, NULL);
-	if (IS_ERR(omi->clk))
-		return dev_err_probe(dev, PTR_ERR(omi->clk),
-				     "Can't get clock\n");
-
-	omi->irq = platform_get_irq(pdev, 0);
-	if (omi->irq < 0) {
-		dev_err(dev, "Can't get irq %d\n", omi->irq);
-		return omi->irq;
-	}
-
-	omi->rstc = devm_reset_control_array_get(dev, false, true);
-	if (IS_ERR(omi->rstc))
-		return dev_err_probe(dev, PTR_ERR(omi->rstc),
-				     "Can't get reset\n");
-
-	omi->regmap = syscon_regmap_lookup_by_phandle(np, "st,syscfg-dlyb");
-	if (IS_ERR(omi->regmap)) {
-		/* Optional */
-		omi->regmap = NULL;
-		omi->dlyb_base = 0;
-	} else {
-		ret = of_property_read_u32_index(np, "st,syscfg-dlyb", 1,
-						 &omi->dlyb_base);
-		if (ret) {
-			dev_err(dev, "Can't read delay block base address\n");
-			return ret;
-		}
-	}
-
-	ret = of_address_to_resource(np, 0, &res);
-	if (ret)
-		return ret;
-
-	omi->regs_base = ioremap(res.start, resource_size(&res));
-	if (IS_ERR(omi->regs_base))
-		return PTR_ERR(omi->regs_base);
-
-	omi->regs_phys_base = res.start;
-
-	node = of_parse_phandle(dev->of_node, "memory-region", 0);
-	if (node)
-		rmem = of_reserved_mem_lookup(node);
-
-	of_node_put(node);
-	if (rmem) {
-		omi->mm_phys_base = rmem->base;
-		omi->mm_size = rmem->size;
-		omi->mm_base = devm_ioremap(dev, rmem->base, rmem->size);
-		if (IS_ERR(omi->mm_base)) {
-			dev_err(dev, "unable to map memory region: %pa+%pa\n",
-				&rmem->base, &rmem->size);
-			ret = PTR_ERR(omi->mm_base);
-		}
-
-		if (omi->mm_size > STM32_OMI_MAX_MMAP_SZ) {
-			dev_err(dev, "Memory map size outsize bounds\n");
-			ret = -EINVAL;
-		}
-	} else {
-		dev_info(dev, "No memory-map region found\n");
-	}
-
-	return ret;
-}
-EXPORT_SYMBOL(stm32_omi_get_resources);
-
 static int stm32_omi_dlyb_set_tap(struct stm32_omi *omi, u8 tap, bool rx_tap)
 {
 	u32 sr, mask, ack;
@@ -517,10 +414,15 @@ static int stm32_omi_probe(struct platfo
 	struct platform_device *vdev;
 	struct device *dev = &pdev->dev;
 	struct device_node *child;
+	struct stm32_omi *omi;
+	struct resource *res;
+	struct reserved_mem *rmem = NULL;
+	struct device_node *node;
 	const char *name;
 	u8 hyperflash_count = 0;
 	u8 spi_flash_count = 0;
 	u8 child_count = 0;
+	int ret;
 
 	/*
 	 * Flash subnodes sanity check:
@@ -561,21 +463,142 @@ static int stm32_omi_probe(struct platfo
 	else
 		name = "stm32-hyperflash";
 
-	vdev = platform_device_alloc(name, PLATFORM_DEVID_AUTO);
-	if (!vdev)
+	omi = devm_kzalloc(dev, sizeof(*omi), GFP_KERNEL);
+	if (!omi)
 		return -ENOMEM;
 
+	omi->regs_base = devm_platform_get_and_ioremap_resource(pdev, 0, &res);
+	if (IS_ERR(omi->regs_base))
+		return PTR_ERR(omi->regs_base);
+
+	omi->regs_phys_base = res->start;
+
+	omi->clk = devm_clk_get(dev, NULL);
+	if (IS_ERR(omi->clk))
+		return dev_err_probe(dev, PTR_ERR(omi->clk),
+				     "Can't get clock\n");
+
+	omi->clk_rate = clk_get_rate(omi->clk);
+	if (!omi->clk_rate) {
+		dev_err(dev, "Invalid clock rate\n");
+		return -EINVAL;
+	}
+
+	omi->irq = platform_get_irq(pdev, 0);
+	if (omi->irq < 0) {
+		dev_err(dev, "Can't get irq %d\n", omi->irq);
+		return omi->irq;
+	}
+
+	ret = devm_request_irq(dev, omi->irq, stm32_omi_irq, 0,
+			       dev_name(dev), omi);
+	if (ret) {
+		dev_err(dev, "Failed to request irq\n");
+		return ret;
+	}
+
+	omi->rstc = devm_reset_control_array_get(dev, false, true);
+	if (IS_ERR(omi->rstc))
+		return dev_err_probe(dev, PTR_ERR(omi->rstc),
+				     "Can't get reset\n");
+
+	omi->regmap = syscon_regmap_lookup_by_phandle(dev->of_node,
+						      "st,syscfg-dlyb");
+	if (IS_ERR(omi->regmap)) {
+		dev_err(dev, "Can't find st,syscfg-dlyb property\n");
+		return PTR_ERR(omi->regmap);
+	} else {
+		ret = of_property_read_u32_index(dev->of_node, "st,syscfg-dlyb",
+						 1, &omi->dlyb_base);
+		if (ret) {
+			dev_err(dev, "Can't read delay block base address\n");
+			return ret;
+		}
+	}
+
+	omi->dma_chrx = dma_request_chan(dev, "rx");
+	if (IS_ERR(omi->dma_chrx)) {
+		ret = PTR_ERR(omi->dma_chrx);
+		omi->dma_chrx = NULL;
+		if (ret == -EPROBE_DEFER)
+			goto err_dma;
+	}
+
+	omi->dma_chtx = dma_request_chan(dev, "tx");
+	if (IS_ERR(omi->dma_chtx)) {
+		ret = PTR_ERR(omi->dma_chtx);
+		omi->dma_chtx = NULL;
+		if (ret == -EPROBE_DEFER)
+			goto err_dma;
+	}
+
+	node = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (node)
+		rmem = of_reserved_mem_lookup(node);
+	of_node_put(node);
+
+	if (rmem) {
+		omi->mm_phys_base = rmem->base;
+		omi->mm_size = rmem->size;
+		omi->mm_base = devm_ioremap(dev, rmem->base, rmem->size);
+		if (IS_ERR(omi->mm_base)) {
+			dev_err(dev, "unable to map memory region: %pa+%pa\n",
+				&rmem->base, &rmem->size);
+			ret = PTR_ERR(omi->mm_base);
+			goto err_dma;
+		}
+
+		if (omi->mm_size > STM32_OMI_MAX_MMAP_SZ) {
+			dev_err(dev, "Memory map size outsize bounds\n");
+			ret = -EINVAL;
+			goto err_dma;
+		}
+	} else {
+		dev_info(dev, "No memory-map region found\n");
+	}
+
+	init_completion(&omi->data_completion);
+	init_completion(&omi->match_completion);
+
+	vdev = platform_device_alloc(name, PLATFORM_DEVID_AUTO);
+	if (!vdev) {
+		ret = -ENOMEM;
+		goto err_dma;
+	}
+
 	vdev->dev.parent = dev;
-	platform_set_drvdata(pdev, vdev);
 
-	return platform_device_add(vdev);
+	omi->dev = dev;
+	omi->vdev = vdev;
+	platform_set_drvdata(pdev, omi);
+
+	ret = platform_device_add(vdev);
+	if (ret) {
+		platform_device_put(vdev);
+		goto err_dma;
+	}
+
+	return 0;
+
+err_dma:
+	if (omi->dma_chtx)
+		dma_release_channel(omi->dma_chtx);
+	if (omi->dma_chrx)
+		dma_release_channel(omi->dma_chrx);
+
+	return ret;
 }
 
 static int stm32_omi_remove(struct platform_device *pdev)
 {
-	struct platform_device *vdev = platform_get_drvdata(pdev);
+	struct stm32_omi *omi = platform_get_drvdata(pdev);
+
+	platform_device_unregister(omi->vdev);
 
-	platform_device_unregister(vdev);
+	if (omi->dma_chtx)
+		dma_release_channel(omi->dma_chtx);
+	if (omi->dma_chrx)
+		dma_release_channel(omi->dma_chrx);
 
 	return 0;
 }
--- a/drivers/mtd/hyperbus/hyperbus-stm32.c
+++ b/drivers/mtd/hyperbus/hyperbus-stm32.c
@@ -11,7 +11,7 @@ struct stm32_hyperbus {
 	struct device *dev;
 	struct hyperbus_ctlr ctlr;
 	struct hyperbus_device hbdev;
-	struct stm32_omi omi;
+	struct stm32_omi *omi;
 	u32 flash_freq;		/* flash max supported frequency */
 	u32 real_flash_freq;	/* real flash freq = bus_freq x prescaler */
 	u32 tacc;
@@ -24,14 +24,14 @@ static void stm32_hyperbus_copy_from(str
 {
 	struct stm32_hyperbus *hyperbus =
 		container_of(hbdev, struct stm32_hyperbus, hbdev);
-	void __iomem *mm_base = hyperbus->omi.mm_base;
+	struct stm32_omi *omi = hyperbus->omi;
 
 	memcpy_fromio(to, omi->mm_base + from, len);
 }
 
 static void stm32_hyperbus_set_mode(struct stm32_hyperbus *hyperbus, u8 mode)
 {
-	struct stm32_omi *omi = &hyperbus->omi;
+	struct stm32_omi *omi = hyperbus->omi;
 	void __iomem *regs_base = omi->regs_base;
 	u32 cr;
 
@@ -52,15 +52,16 @@ static u16 stm32_hyperbus_read16(struct
 {
 	struct stm32_hyperbus *hyperbus =
 		container_of(hbdev, struct stm32_hyperbus, hbdev);
-	void __iomem *regs_base = hyperbus->omi.regs_base;
+	struct stm32_omi *omi = hyperbus->omi;
+	void __iomem *regs_base = omi->regs_base;
 	u16 data;
 
 	stm32_hyperbus_set_mode(hyperbus, CR_FMODE_INDR);
 	writel(addr, regs_base + OSPI_AR);
-	stm32_omi_tx_poll(&hyperbus->omi, (u8 *)&data, 2, true);
+	stm32_omi_tx_poll(omi, (u8 *)&data, 2, true);
 
 	/* Wait end of tx in indirect mode */
-	stm32_omi_wait_cmd(&hyperbus->omi);
+	stm32_omi_wait_cmd(omi);
 
 	dev_dbg(hyperbus->dev, "%s: read 0x%x @ 0x%lx\n",
 		__func__, data, addr >> 1);
@@ -75,14 +76,15 @@ static void stm32_hyperbus_write16(struc
 {
 	struct stm32_hyperbus *hyperbus =
 		container_of(hbdev, struct stm32_hyperbus, hbdev);
-	void __iomem *regs_base = hyperbus->omi.regs_base;
+	struct stm32_omi *omi = hyperbus->omi;
+	void __iomem *regs_base = omi->regs_base;
 
 	stm32_hyperbus_set_mode(hyperbus, CR_FMODE_INDW);
 	writel(addr, regs_base + OSPI_AR);
-	stm32_omi_tx_poll(&hyperbus->omi, (u8 *)&data, 2, false);
+	stm32_omi_tx_poll(omi, (u8 *)&data, 2, false);
 
 	/* Wait end of tx in indirect mode */
-	stm32_omi_wait_cmd(&hyperbus->omi);
+	stm32_omi_wait_cmd(omi);
 
 	dev_dbg(hyperbus->dev, "%s: write 0x%x @ 0x%lx\n",
 		__func__, data, addr >> 1);
@@ -92,8 +94,7 @@ static void stm32_hyperbus_write16(struc
 
 static int stm32_hyperbus_check_transfert(struct stm32_omi *omi)
 {
-	struct stm32_hyperbus *hyperbus =
-		container_of(omi, struct stm32_hyperbus, omi);
+	struct stm32_hyperbus *hyperbus = platform_get_drvdata(omi->vdev);
 	struct map_info *map = &hyperbus->hbdev.map;
 	struct cfi_private cfi;
 	int ret;
@@ -111,7 +112,7 @@ static int stm32_hyperbus_calibrate(stru
 {
 	struct stm32_hyperbus *hyperbus =
 		container_of(hbdev, struct stm32_hyperbus, hbdev);
-	struct stm32_omi *omi = &hyperbus->omi;
+	struct stm32_omi *omi = hyperbus->omi;
 	void __iomem *regs_base = omi->regs_base;
 	u32 prescaler;
 	u16 period_ps = 0;
@@ -161,7 +162,7 @@ static const struct hyperbus_ops stm32_h
 
 static void stm32_hyperbus_init(struct stm32_hyperbus *hyperbus)
 {
-	struct stm32_omi *omi = &hyperbus->omi;
+	struct stm32_omi *omi = hyperbus->omi;
 	void __iomem *regs_base = omi->regs_base;
 	unsigned long period;
 	u32 cr, dcr1, hlcr, ccr;
@@ -206,7 +207,7 @@ static void stm32_hyperbus_init(struct s
 static int __maybe_unused stm32_hyperbus_suspend(struct device *dev)
 {
 	struct stm32_hyperbus *hyperbus = dev_get_drvdata(dev);
-	struct stm32_omi *omi = &hyperbus->omi;
+	struct stm32_omi *omi = hyperbus->omi;
 	void __iomem *regs_base = omi->regs_base;
 	u32 cr;
 
@@ -222,7 +223,7 @@ static int __maybe_unused stm32_hyperbus
 static int __maybe_unused stm32_hyperbus_resume(struct device *dev)
 {
 	struct stm32_hyperbus *hyperbus = dev_get_drvdata(dev);
-	struct stm32_omi *omi = &hyperbus->omi;
+	struct stm32_omi *omi = hyperbus->omi;
 	int ret;
 
 	ret = clk_prepare_enable(omi->clk);
@@ -241,26 +242,22 @@ static const struct dev_pm_ops stm32_hyp
 
 static int stm32_hyperbus_probe(struct platform_device *pdev)
 {
-	struct device *dev = pdev->dev.parent;
+	struct device *parent = pdev->dev.parent;
+	struct device *dev = &pdev->dev;
 	struct stm32_hyperbus *hyperbus;
-	struct stm32_omi *omi;
+	struct stm32_omi *omi = dev_get_drvdata(parent);
 	struct device_node *flash;
 	u32 value;
 	int ret;
 
-	hyperbus = devm_kzalloc(&pdev->dev, sizeof(*hyperbus), GFP_KERNEL);
+	hyperbus = devm_kzalloc(dev, sizeof(*hyperbus), GFP_KERNEL);
 	if (!hyperbus)
 		return -ENOMEM;
 
-	omi = &hyperbus->omi;
-	omi->dev = &pdev->dev;
-	omi->calibration = false;
+	hyperbus->omi = omi;
+	omi->check_transfer = stm32_hyperbus_check_transfert;
 	hyperbus->dev = dev;
 
-	ret = stm32_omi_get_resources(omi, dev);
-	if (ret)
-		return ret;
-
 	/* mandatory for HyperFlash */
 	if (!omi->mm_size) {
 		dev_err(dev, "Memory-map region not found\n");
@@ -273,12 +270,6 @@ static int stm32_hyperbus_probe(struct p
 		return -EINVAL;
 	}
 
-	omi->clk_rate = clk_get_rate(omi->clk);
-	if (!omi->clk_rate) {
-		dev_err(dev, "Invalid clock rate\n");
-		return -EINVAL;
-	}
-
 	ret = clk_prepare_enable(omi->clk);
 	if (ret) {
 		dev_err(dev, "Can not enable hyperbus clock\n");
@@ -291,14 +282,7 @@ static int stm32_hyperbus_probe(struct p
 		reset_control_deassert(omi->rstc);
 	}
 
-	ret = devm_request_irq(dev, omi->irq, stm32_omi_irq, 0,
-			       dev_name(dev), omi);
-	if (ret) {
-		dev_err(dev, "Failed to request irq\n");
-		goto err_clk_disable;
-	}
-
-	flash = of_get_next_child(dev->of_node, NULL);
+	flash = of_get_next_child(parent->of_node, NULL);
 	if (!flash) {
 		dev_warn(&pdev->dev, "No flash node found\n");
 		goto err_clk_disable;
@@ -324,9 +308,6 @@ static int stm32_hyperbus_probe(struct p
 
 	hyperbus->wzl = of_property_read_bool(flash, "st,wzl");
 
-	init_completion(&omi->data_completion);
-	omi->check_transfer = stm32_hyperbus_check_transfert;
-
 	stm32_hyperbus_init(hyperbus);
 
 	platform_set_drvdata(pdev, hyperbus);
@@ -334,11 +315,11 @@ static int stm32_hyperbus_probe(struct p
 	hyperbus->hbdev.map.size = omi->mm_size;
 	hyperbus->hbdev.map.virt = omi->mm_base;
 
-	hyperbus->dev = &pdev->dev;
-	hyperbus->ctlr.dev = &pdev->dev;
+	hyperbus->dev = dev;
+	hyperbus->ctlr.dev = dev;
 	hyperbus->ctlr.ops = &stm32_hyperbus_ops;
 	hyperbus->hbdev.ctlr = &hyperbus->ctlr;
-	hyperbus->hbdev.np = of_get_next_child(dev->of_node, NULL);
+	hyperbus->hbdev.np = of_get_next_child(parent->of_node, NULL);
 
 	return hyperbus_register_device(&hyperbus->hbdev);
 
@@ -351,10 +332,10 @@ err_clk_disable:
 static int stm32_hyperbus_remove(struct platform_device *pdev)
 {
 	struct stm32_hyperbus *hyperbus = platform_get_drvdata(pdev);
+	struct stm32_omi *omi = hyperbus->omi;
 
 	hyperbus_unregister_device(&hyperbus->hbdev);
-	stm32_omi_dma_free(&hyperbus->omi);
-	clk_disable_unprepare(hyperbus->omi.clk);
+	clk_disable_unprepare(omi->clk);
 
 	return 0;
 }
--- a/drivers/spi/spi-stm32-ospi.c
+++ b/drivers/spi/spi-stm32-ospi.c
@@ -22,7 +22,7 @@ struct stm32_ospi_flash {
 struct stm32_ospi {
 	struct device *dev;
 	struct spi_controller *ctrl;
-	struct stm32_omi omi;
+	struct stm32_omi *omi;
 	struct stm32_ospi_flash flash[STM32_OMI_MAX_NORCHIP];
 
 	u32 cr_reg;
@@ -40,7 +40,9 @@ struct stm32_ospi {
 static int stm32_ospi_tx_mm(struct stm32_ospi *ospi,
 			    const struct spi_mem_op *op)
 {
-	memcpy_fromio(op->data.buf.in, ospi->omi.mm_base + op->addr.val,
+	struct stm32_omi *omi = ospi->omi;
+
+	memcpy_fromio(op->data.buf.in, omi->mm_base + op->addr.val,
 		      op->data.nbytes);
 	return 0;
 }
@@ -49,7 +51,7 @@ static int stm32_ospi_tx_dma(struct stm3
 			     const struct spi_mem_op *op)
 {
 	struct dma_async_tx_descriptor *desc;
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 	void __iomem *regs_base = omi->regs_base;
 	enum dma_transfer_direction dma_dir;
 	struct dma_chan *dma_ch;
@@ -113,13 +115,13 @@ out_unmap:
 
 static int stm32_ospi_tx(struct stm32_ospi *ospi, const struct spi_mem_op *op)
 {
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 	u8 *buf;
 
 	if (!op->data.nbytes)
 		return 0;
 
-	if (ospi->omi.fmode == CR_FMODE_MM)
+	if (omi->fmode == CR_FMODE_MM)
 		return stm32_ospi_tx_mm(ospi, op);
 	else if (((op->data.dir == SPI_MEM_DATA_IN && omi->dma_chrx) ||
 		 (op->data.dir == SPI_MEM_DATA_OUT && omi->dma_chtx)) &&
@@ -132,14 +134,14 @@ static int stm32_ospi_tx(struct stm32_os
 	else
 		buf = (u8 *)op->data.buf.out;
 
-	return stm32_omi_tx_poll(&ospi->omi, buf, op->data.nbytes,
+	return stm32_omi_tx_poll(omi, buf, op->data.nbytes,
 				 op->data.dir == SPI_MEM_DATA_IN);
 }
 
 static int stm32_ospi_wait_poll_status(struct stm32_ospi *ospi,
 				       const struct spi_mem_op *op)
 {
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 	void __iomem *regs_base = omi->regs_base;
 	u32 cr;
 
@@ -170,7 +172,8 @@ static int stm32_ospi_get_mode(u8 buswid
 
 static void stm32_ospi_set_prescaler(struct stm32_ospi *ospi, u32 presc)
 {
-	void __iomem *regs_base = ospi->omi.regs_base;
+	struct stm32_omi *omi = ospi->omi;
+	void __iomem *regs_base = omi->regs_base;
 	u32 dcr2;
 
 	/* set prescaler */
@@ -184,8 +187,8 @@ static int stm32_ospi_send(struct spi_de
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(spi->master);
 	struct stm32_ospi_flash *flash = &ospi->flash[spi->chip_select];
-	void __iomem *regs_base = ospi->omi.regs_base;
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
+	void __iomem *regs_base = omi->regs_base;
 	u32 ccr, cr, tcr = 0;
 	int timeout, err = 0, err_poll_status = 0;
 	int ret;
@@ -291,7 +294,8 @@ static int stm32_ospi_poll_status(struct
 				  unsigned long timeout_ms)
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(mem->spi->master);
-	void __iomem *regs_base = ospi->omi.regs_base;
+	struct stm32_omi *omi = ospi->omi;
+	void __iomem *regs_base = omi->regs_base;
 	int ret;
 
 	ret = pm_runtime_get_sync(ospi->dev);
@@ -304,7 +308,7 @@ static int stm32_ospi_poll_status(struct
 
 	writel_relaxed(mask, regs_base + OSPI_PSMKR);
 	writel_relaxed(match, regs_base + OSPI_PSMAR);
-	ospi->omi.fmode = CR_FMODE_APM;
+	omi->fmode = CR_FMODE_APM;
 	ospi->status_timeout = timeout_ms;
 
 	ret = stm32_ospi_send(mem->spi, op);
@@ -319,6 +323,7 @@ static int stm32_ospi_poll_status(struct
 static int stm32_ospi_exec_op(struct spi_mem *mem, const struct spi_mem_op *op)
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(mem->spi->master);
+	struct stm32_omi *omi = ospi->omi;
 	int ret;
 
 	ret = pm_runtime_get_sync(ospi->dev);
@@ -329,9 +334,9 @@ static int stm32_ospi_exec_op(struct spi
 
 	mutex_lock(&ospi->lock);
 	if (op->data.dir == SPI_MEM_DATA_IN && op->data.nbytes)
-		ospi->omi.fmode = CR_FMODE_INDR;
+		omi->fmode = CR_FMODE_INDR;
 	else
-		ospi->omi.fmode = CR_FMODE_INDW;
+		omi->fmode = CR_FMODE_INDW;
 
 	ret = stm32_ospi_send(mem->spi, op);
 	mutex_unlock(&ospi->lock);
@@ -345,7 +350,7 @@ static int stm32_ospi_exec_op(struct spi
 static int stm32_ospi_dirmap_create(struct spi_mem_dirmap_desc *desc)
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(desc->mem->spi->master);
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 
 	if (desc->info.op_tmpl.data.dir == SPI_MEM_DATA_OUT)
 		return -EOPNOTSUPP;
@@ -364,6 +369,7 @@ static ssize_t stm32_ospi_dirmap_read(st
 				      u64 offs, size_t len, void *buf)
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(desc->mem->spi->master);
+	struct stm32_omi *omi = ospi->omi;
 	struct spi_mem_op op;
 	u32 addr_max;
 	int ret;
@@ -387,10 +393,10 @@ static ssize_t stm32_ospi_dirmap_read(st
 	op.data.buf.in = buf;
 
 	addr_max = op.addr.val + op.data.nbytes + 1;
-	if (addr_max < ospi->omi.mm_size && op.addr.buswidth)
-		ospi->omi.fmode = CR_FMODE_MM;
+	if (addr_max < omi->mm_size && op.addr.buswidth)
+		omi->fmode = CR_FMODE_MM;
 	else
-		ospi->omi.fmode = CR_FMODE_INDR;
+		omi->fmode = CR_FMODE_INDR;
 
 	ret = stm32_ospi_send(desc->mem->spi, &op);
 	mutex_unlock(&ospi->lock);
@@ -405,6 +411,7 @@ static int stm32_ospi_transfer_one_messa
 					   struct spi_message *msg)
 {
 	struct stm32_ospi *ospi = spi_controller_get_devdata(ctrl);
+	struct stm32_omi *omi = ospi->omi;
 	struct spi_transfer *transfer;
 	struct spi_device *spi = msg->spi;
 	struct spi_mem_op op;
@@ -453,12 +460,12 @@ static int stm32_ospi_transfer_one_messa
 		op.data.nbytes = transfer->len;
 
 		if (transfer->rx_buf) {
-			ospi->omi.fmode = CR_FMODE_INDR;
+			omi->fmode = CR_FMODE_INDR;
 			op.data.buswidth = transfer->rx_nbits;
 			op.data.dir = SPI_MEM_DATA_IN;
 			op.data.buf.in = transfer->rx_buf;
 		} else {
-			ospi->omi.fmode = CR_FMODE_INDW;
+			omi->fmode = CR_FMODE_INDW;
 			op.data.buswidth = transfer->tx_nbits;
 			op.data.dir = SPI_MEM_DATA_OUT;
 			op.data.buf.out = transfer->tx_buf;
@@ -487,8 +494,7 @@ end_of_transfer:
 
 static int stm32_ospi_readid(struct stm32_omi *omi)
 {
-	struct stm32_ospi *ospi =
-		container_of(omi, struct stm32_ospi, omi);
+	struct stm32_ospi *ospi = platform_get_drvdata(omi->vdev);
 	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
 	struct spi_device *spi = flash->spi;
 	u64 *rx_buf = &ospi->id_buf;
@@ -533,10 +539,10 @@ static int stm32_ospi_readid(struct stm3
 
 static int stm32_ospi_calibration(struct stm32_ospi *ospi)
 {
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 	struct stm32_ospi_flash *flash = &ospi->flash[ospi->last_cs];
 	struct spi_device *spi = flash->spi;
-	void __iomem *regs_base = ospi->omi.regs_base;
+	void __iomem *regs_base = omi->regs_base;
 	u8 window_len_tcr0 = 0, window_len_tcr1 = 0;
 	int ret, ret_tcr0, ret_tcr1;
 
@@ -544,7 +550,7 @@ static int stm32_ospi_calibration(struct
 	 * set memory device at low frequency (50MHz) and sent
 	 * READID (0x9F) command, save the answer as golden answer
 	 */
-	flash->presc = DIV_ROUND_UP(ospi->omi.clk_rate,
+	flash->presc = DIV_ROUND_UP(omi->clk_rate,
 				    STM32_DLYB_FREQ_THRESHOLD) - 1;
 	stm32_ospi_set_prescaler(ospi, flash->presc);
 
@@ -556,7 +562,7 @@ static int stm32_ospi_calibration(struct
 	 * set memory device at expected frequency read from DT
 	 * prescaler should be set befor locking the DLL
 	 */
-	flash->presc = DIV_ROUND_UP(ospi->omi.clk_rate, spi->max_speed_hz) - 1;
+	flash->presc = DIV_ROUND_UP(omi->clk_rate, spi->max_speed_hz) - 1;
 	stm32_ospi_set_prescaler(ospi, flash->presc);
 
 	flash->dcr_reg &= ~DCR1_DLYBYP;
@@ -611,9 +617,9 @@ static int stm32_ospi_setup(struct spi_d
 {
 	struct spi_controller *ctrl = spi->master;
 	struct stm32_ospi *ospi = spi_controller_get_devdata(ctrl);
-	struct stm32_omi *omi = &ospi->omi;
+	struct stm32_omi *omi = ospi->omi;
 	struct stm32_ospi_flash *flash;
-	void __iomem *regs_base = ospi->omi.regs_base;
+	void __iomem *regs_base = omi->regs_base;
 	u32 bus_freq;
 	int ret;
 
@@ -691,10 +697,11 @@ static const struct spi_controller_mem_o
 
 static int stm32_ospi_probe(struct platform_device *pdev)
 {
-	struct device *dev = pdev->dev.parent;
+	struct device *parent = pdev->dev.parent;
+	struct device *dev = &pdev->dev;
 	struct spi_controller *ctrl;
 	struct stm32_ospi *ospi;
-	struct stm32_omi *omi;
+	struct stm32_omi *omi = dev_get_drvdata(parent);
 	struct dma_slave_config dma_cfg;
 	int ret;
 
@@ -704,20 +711,9 @@ static int stm32_ospi_probe(struct platf
 
 	ospi = spi_controller_get_devdata(ctrl);
 	ospi->ctrl = ctrl;
-	omi = &ospi->omi;
-	omi->dev = &pdev->dev;
+	ospi->omi = omi;
 	omi->check_transfer = stm32_ospi_readid;
 
-	ret = stm32_omi_get_resources(omi, dev);
-	if (ret)
-		return ret;
-
-	omi->clk_rate = clk_get_rate(omi->clk);
-	if (!omi->clk_rate) {
-		dev_err(dev, "Invalid clock rate\n");
-		return -EINVAL;
-	}
-
 	ret = clk_prepare_enable(omi->clk);
 	if (ret) {
 		dev_err(dev, "Can not enable clock\n");
@@ -730,30 +726,17 @@ static int stm32_ospi_probe(struct platf
 		reset_control_deassert(omi->rstc);
 	}
 
-	ret = devm_request_irq(dev, omi->irq, stm32_omi_irq, 0,
-			       dev_name(dev), omi);
-	if (ret) {
-		dev_err(dev, "Failed to request irq\n");
-		goto err_clk_disable;
-	}
-
-	init_completion(&omi->data_completion);
-	init_completion(&omi->match_completion);
-
 	ospi->dev = dev;
 	platform_set_drvdata(pdev, ospi);
 
 	memset(&dma_cfg, 0, sizeof(dma_cfg));
 	dma_cfg.src_addr_width = DMA_SLAVE_BUSWIDTH_1_BYTE;
 	dma_cfg.dst_addr_width = DMA_SLAVE_BUSWIDTH_1_BYTE;
-	dma_cfg.src_addr = ospi->omi.regs_phys_base + OSPI_DR;
-	dma_cfg.dst_addr = ospi->omi.regs_phys_base + OSPI_DR;
+	dma_cfg.src_addr = omi->regs_phys_base + OSPI_DR;
+	dma_cfg.dst_addr = omi->regs_phys_base + OSPI_DR;
 	dma_cfg.src_maxburst = 4;
 	dma_cfg.dst_maxburst = 4;
-
-	ret = stm32_omi_dma_setup(omi, dev, &dma_cfg);
-	if (ret)
-		goto err_dma_free;
+	stm32_omi_dma_setup(omi, &dma_cfg);
 
 	mutex_init(&ospi->lock);
 
@@ -766,10 +749,10 @@ static int stm32_ospi_probe(struct platf
 	ctrl->use_gpio_descriptors = true;
 	ctrl->transfer_one_message = stm32_ospi_transfer_one_message;
 	ctrl->num_chipselect = STM32_OMI_MAX_NORCHIP;
-	ctrl->dev.of_node = ospi->dev->of_node;
+	ctrl->dev.of_node = parent->of_node;
 
-	pm_runtime_set_autosuspend_delay(ospi->dev, STM32_AUTOSUSPEND_DELAY);
-	pm_runtime_use_autosuspend(ospi->dev);
+	pm_runtime_set_autosuspend_delay(dev, STM32_AUTOSUSPEND_DELAY);
+	pm_runtime_use_autosuspend(dev);
 	pm_runtime_set_active(dev);
 	pm_runtime_enable(dev);
 	pm_runtime_get_noresume(dev);
@@ -792,9 +775,6 @@ err_pm_runtime_free:
 	pm_runtime_disable(dev);
 	pm_runtime_set_suspended(dev);
 	pm_runtime_dont_use_autosuspend(dev);
-err_dma_free:
-	stm32_omi_dma_free(omi);
-err_clk_disable:
 	clk_disable_unprepare(omi->clk);
 
 	return ret;
@@ -803,19 +783,19 @@ err_clk_disable:
 static int stm32_ospi_remove(struct platform_device *pdev)
 {
 	struct stm32_ospi *ospi = platform_get_drvdata(pdev);
+	struct stm32_omi *omi = ospi->omi;
 
 	pm_runtime_get_sync(ospi->dev);
 	spi_unregister_master(ospi->ctrl);
 	/* disable ospi */
-	writel_relaxed(0, ospi->omi.regs_base + OSPI_CR);
-	stm32_omi_dlyb_stop(&ospi->omi);
-	stm32_omi_dma_free(&ospi->omi);
+	writel_relaxed(0, omi->regs_base + OSPI_CR);
+	stm32_omi_dlyb_stop(omi);
 	mutex_destroy(&ospi->lock);
 	pm_runtime_put_noidle(ospi->dev);
 	pm_runtime_disable(ospi->dev);
 	pm_runtime_set_suspended(ospi->dev);
 	pm_runtime_dont_use_autosuspend(ospi->dev);
-	clk_disable_unprepare(ospi->omi.clk);
+	clk_disable_unprepare(omi->clk);
 
 	return 0;
 }
@@ -823,8 +803,9 @@ static int stm32_ospi_remove(struct plat
 static int __maybe_unused stm32_ospi_runtime_suspend(struct device *dev)
 {
 	struct stm32_ospi *ospi = dev_get_drvdata(dev);
+	struct stm32_omi *omi = ospi->omi;
 
-	clk_disable_unprepare(ospi->omi.clk);
+	clk_disable_unprepare(omi->clk);
 
 	return 0;
 }
@@ -832,8 +813,9 @@ static int __maybe_unused stm32_ospi_run
 static int __maybe_unused stm32_ospi_runtime_resume(struct device *dev)
 {
 	struct stm32_ospi *ospi = dev_get_drvdata(dev);
+	struct stm32_omi *omi = ospi->omi;
 
-	return clk_prepare_enable(ospi->omi.clk);
+	return clk_prepare_enable(omi->clk);
 }
 
 static int __maybe_unused stm32_ospi_suspend(struct device *dev)
@@ -846,7 +828,8 @@ static int __maybe_unused stm32_ospi_sus
 static int __maybe_unused stm32_ospi_resume(struct device *dev)
 {
 	struct stm32_ospi *ospi = dev_get_drvdata(dev);
-	void __iomem *regs_base = ospi->omi.regs_base;
+	struct stm32_omi *omi = ospi->omi;
+	void __iomem *regs_base = omi->regs_base;
 	int ret;
 
 	ret = pm_runtime_force_resume(dev);
--- a/include/memory/stm32-omi.h
+++ b/include/memory/stm32-omi.h
@@ -150,6 +150,7 @@
 
 struct stm32_omi {
 	struct device *dev;
+	struct platform_device *vdev;
 	struct clk *clk;
 	struct reset_control *rstc;
 	struct regmap *regmap;
@@ -189,11 +190,8 @@ int stm32_omi_dlyb_set_cr(struct stm32_o
 void stm32_omi_dlyb_get_cr(struct stm32_omi *omi, u32 *dlyb_cr);
 void stm32_omi_dlyb_stop(struct stm32_omi *omi);
 void stm32_omi_dma_callback(void *arg);
-void stm32_omi_dma_free(struct stm32_omi *omi);
-int stm32_omi_dma_setup(struct stm32_omi *omi, struct device *dev,
-			struct dma_slave_config *dma_cfg);
-int stm32_omi_get_resources(struct stm32_omi *omi, struct device *dev);
-irqreturn_t stm32_omi_irq(int irq, void *dev_id);
+void stm32_omi_dma_setup(struct stm32_omi *omi,
+			 struct dma_slave_config *dma_cfg);
 int stm32_omi_tx_poll(struct stm32_omi *omi, u8 *buf, u32 len, bool read);
 int stm32_omi_wait_cmd(struct stm32_omi *omi);
 int stm32_omi_wait_nobusy(struct stm32_omi *omi);
