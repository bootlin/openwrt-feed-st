From 64084bac097a98af35e1a2477efd057199c9cf14 Mon Sep 17 00:00:00 2001
From: Amelie Delaunay <amelie.delaunay@foss.st.com>
Date: Thu, 15 Jun 2023 16:29:15 +0200
Subject: [PATCH 0354/1141] dmaengine: stm32-dma3: defer channel registration
 to specify channel name

On STM32 DMA3, channels can be reserved, so they are non available for
Linux.
Rather than registering all the channels and check after if the channel is
available, use dma_async_device_channel_register() to register the channels
after controller registration.
Also take the advantage of changing the default channel name, so that it
can match the name in the Reference Manual and ease requesting a channel
thanks to its name.

Change-Id: I88f2a5b1a73ce7379dd73fd81a99da0a47b1190d
Signed-off-by: Amelie Delaunay <amelie.delaunay@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/313187
Tested-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Antonio Maria BORNEO <antonio.borneo@foss.st.com>
---
 drivers/dma/stm32-dma3.c | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/drivers/dma/stm32-dma3.c b/drivers/dma/stm32-dma3.c
index b91918b5fe16..068a3a755298 100644
--- a/drivers/dma/stm32-dma3.c
+++ b/drivers/dma/stm32-dma3.c
@@ -2242,9 +2242,6 @@ static int stm32_dma3_probe(struct platform_device *pdev)
 		chan->fifo_size = g_fifosz; /* If !g_fifosz, then no FIFO, burst = 0 */
 		chan->max_burst = (!chan->fifo_size) ? 0 : (1 << (chan->fifo_size + 1)) / 2;
 		chan->ext_addressing = (g_addr != G_ADDRESSING_FIXED_BLOCK);
-		chan->vchan.desc_free = stm32_dma3_chan_vdesc_free;
-
-		vchan_init(&chan->vchan, dma_dev);
 	}
 
 	ret = dmaenginem_async_device_register(dma_dev);
@@ -2252,7 +2249,23 @@ static int stm32_dma3_probe(struct platform_device *pdev)
 		goto err_clk_disable;
 
 	for (i = 0; i < ddata->dma_channels; i++) {
+		char name[12];
+
 		chan = &ddata->chans[i];
+
+		if (ddata->chan_reserved & BIT(i))
+			continue;
+
+		chan->vchan.desc_free = stm32_dma3_chan_vdesc_free;
+		vchan_init(&chan->vchan, dma_dev);
+		snprintf(name, sizeof(name), "dma%dchan%d", ddata->dma_dev.dev_id, chan->id);
+
+		ret = dma_async_device_channel_register(&ddata->dma_dev, &chan->vchan.chan, name);
+		if (ret) {
+			dev_err(&pdev->dev, "Failed to register %s: %d\n", name, ret);
+			goto err_clk_disable;
+		}
+
 		ret = platform_get_irq(pdev, i);
 		if (ret < 0) {
 			dev_err(&pdev->dev,
-- 
2.39.2

