From edf6cd515cead54091b8e6acf04b99f8cbba8a94 Mon Sep 17 00:00:00 2001
From: Erwan Le Ray <erwan.leray@foss.st.com>
Date: Wed, 15 Apr 2020 10:00:42 +0200
Subject: [PATCH 109/529] serial: stm32: Add support of rs485 delays in
 nanoseconds

Add support of s485 delays in nanoseconds. Delays in nanoseconds will be
used only when defined in dt new rs485-rts-delay-ns property, else delays
in milliseconds will be used.

With fast data rates (1Mbaut or more), 1ms become quite long. Users need
to be able to set shorter delays than 1 ms in order not to slow down the
channel unnecessarily. This enables faster communication channels without
changing the baudrate.

In addition assertion delay and deassertion delay are coded on 5 bits in
STM32MP IP registers, ie the max value is always lower than 1 ms with rs485
common baud rates.

Signed-off-by: Erwan Le Ray <erwan.leray@foss.st.com>
Change-Id: I2c37bac444c8583e6d137a7e3468061a77dc9c80
---
 drivers/tty/serial/stm32-usart.c | 43 +++++++++++++++++++-------------
 1 file changed, 26 insertions(+), 17 deletions(-)

--- a/drivers/tty/serial/stm32-usart.c
+++ b/drivers/tty/serial/stm32-usart.c
@@ -178,24 +178,39 @@ static void stm32_usart_rs485_rts_disabl
 	}
 }
 
-static void stm32_usart_config_reg_rs485(u32 *cr1, u32 *cr3, u32 delay_ADE,
-					 u32 delay_DDE, u32 baud)
+static void stm32_usart_config_reg_rs485(u32 *cr1, u32 *cr3,  u32 baud,
+					 struct serial_rs485 *rs485conf)
 {
-	u32 rs485_deat_dedt;
+	u64 rs485_deat_dedt;
+	u32 delay_ADE, delay_DDE;
 	u32 rs485_deat_dedt_max = (USART_CR1_DEAT_MASK >> USART_CR1_DEAT_SHIFT);
 	bool over8;
 
+	/*
+	 * Assertion and deassertion delays (in ns) are computed by the
+	 * selection of rs485-rts-delay-ns (in ns) or rs485-rts-delay (in ms)
+	 * provided by device tree
+	 */
+	if (rs485conf->delay_rts_before_send_ns != 0 ||
+	    rs485conf->delay_rts_after_send_ns != 0) {
+		delay_ADE = rs485conf->delay_rts_before_send_ns;
+		delay_DDE = rs485conf->delay_rts_after_send_ns;
+	} else {
+		delay_ADE = rs485conf->delay_rts_before_send * NSEC_PER_MSEC;
+		delay_DDE = rs485conf->delay_rts_after_send * NSEC_PER_MSEC;
+	}
+
 	*cr3 |= USART_CR3_DEM;
 	over8 = *cr1 & USART_CR1_OVER8;
 
 	*cr1 &= ~(USART_CR1_DEDT_MASK | USART_CR1_DEAT_MASK);
 
 	if (over8)
-		rs485_deat_dedt = delay_ADE * baud * 8;
+		rs485_deat_dedt = (u64)delay_ADE * (u64)baud * 8ULL;
 	else
-		rs485_deat_dedt = delay_ADE * baud * 16;
+		rs485_deat_dedt = (u64)delay_ADE * (u64)baud * 16ULL;
 
-	rs485_deat_dedt = DIV_ROUND_CLOSEST(rs485_deat_dedt, 1000);
+	rs485_deat_dedt = DIV_ROUND_CLOSEST_ULL(rs485_deat_dedt, 1000000000);
 	rs485_deat_dedt = rs485_deat_dedt > rs485_deat_dedt_max ?
 			  rs485_deat_dedt_max : rs485_deat_dedt;
 	rs485_deat_dedt = (rs485_deat_dedt << USART_CR1_DEAT_SHIFT) &
@@ -203,11 +218,11 @@ static void stm32_usart_config_reg_rs485
 	*cr1 |= rs485_deat_dedt;
 
 	if (over8)
-		rs485_deat_dedt = delay_DDE * baud * 8;
+		rs485_deat_dedt = (u64)delay_DDE * (u64)baud * 8ULL;
 	else
-		rs485_deat_dedt = delay_DDE * baud * 16;
+		rs485_deat_dedt = (u64)delay_DDE * (u64)baud * 16ULL;
 
-	rs485_deat_dedt = DIV_ROUND_CLOSEST(rs485_deat_dedt, 1000);
+	rs485_deat_dedt = DIV_ROUND_CLOSEST_ULL(rs485_deat_dedt, 1000000000);
 	rs485_deat_dedt = rs485_deat_dedt > rs485_deat_dedt_max ?
 			  rs485_deat_dedt_max : rs485_deat_dedt;
 	rs485_deat_dedt = (rs485_deat_dedt << USART_CR1_DEDT_SHIFT) &
@@ -240,10 +255,7 @@ static int stm32_usart_config_rs485(stru
 				   << USART_BRR_04_R_SHIFT;
 
 		baud = DIV_ROUND_CLOSEST(port->uartclk, usartdiv);
-		stm32_usart_config_reg_rs485(&cr1, &cr3,
-					     rs485conf->delay_rts_before_send,
-					     rs485conf->delay_rts_after_send,
-					     baud);
+		stm32_usart_config_reg_rs485(&cr1, &cr3, baud, rs485conf);
 
 		if (rs485conf->flags & SER_RS485_RTS_ON_SEND)
 			cr3 &= ~USART_CR3_DEP;
@@ -1258,10 +1270,7 @@ static void stm32_usart_set_termios(stru
 	}
 
 	if (rs485conf->flags & SER_RS485_ENABLED) {
-		stm32_usart_config_reg_rs485(&cr1, &cr3,
-					     rs485conf->delay_rts_before_send,
-					     rs485conf->delay_rts_after_send,
-					     baud);
+		stm32_usart_config_reg_rs485(&cr1, &cr3, baud, rs485conf);
 		if (rs485conf->flags & SER_RS485_RTS_ON_SEND) {
 			cr3 &= ~USART_CR3_DEP;
 			rs485conf->flags &= ~SER_RS485_RTS_AFTER_SEND;
