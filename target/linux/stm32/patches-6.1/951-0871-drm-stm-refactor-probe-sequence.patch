From 6b4473742dd29f4165e01d4cbac7713ef40248d0 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 19 Jan 2024 13:15:11 +0100
Subject: [PATCH 0871/1141] drm/stm: refactor probe sequence

Add new functions ltdc_parse_device_tree & ltdc_get_clk

Change-Id: I559e025ef4bc798ea8614327608897ad36275c9f
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/352883
---
 drivers/gpu/drm/stm/drv.c  |  39 +++++++----
 drivers/gpu/drm/stm/ltdc.c | 129 ++++++++++++++++++++++---------------
 drivers/gpu/drm/stm/ltdc.h |   2 +
 3 files changed, 106 insertions(+), 64 deletions(-)

diff --git a/drivers/gpu/drm/stm/drv.c b/drivers/gpu/drm/stm/drv.c
index 5d4dd8d5ea97..ebee758267fb 100644
--- a/drivers/gpu/drm/stm/drv.c
+++ b/drivers/gpu/drm/stm/drv.c
@@ -69,17 +69,10 @@ static const struct drm_driver drv_driver = {
 static int drv_load(struct drm_device *ddev)
 {
 	struct platform_device *pdev = to_platform_device(ddev->dev);
-	struct ltdc_device *ldev;
 	int ret;
 
 	DRM_DEBUG("%s\n", __func__);
 
-	ldev = devm_kzalloc(ddev->dev, sizeof(*ldev), GFP_KERNEL);
-	if (!ldev)
-		return -ENOMEM;
-
-	ddev->dev_private = (void *)ldev;
-
 	ret = drmm_mode_config_init(ddev);
 	if (ret)
 		return ret;
@@ -183,19 +176,41 @@ static int stm_drm_platform_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct drm_device *ddev;
+	struct ltdc_device *ldev;
 	int ret;
 
-	DRM_DEBUG("%s\n", __func__);
+	DRM_DEBUG_DRIVER("\n");
 
-	ret = drm_aperture_remove_framebuffers(&drv_driver);
+	ldev = devm_kzalloc(dev, sizeof(*ldev), GFP_KERNEL);
+	if (!ldev)
+		return -ENOMEM;
+
+	ret = ltdc_parse_device_tree(dev);
 	if (ret)
 		return ret;
 
+	ret = ltdc_get_clk(dev, ldev);
+	if (ret)
+		return ret;
+
+	/* Resume device to enable the clocks */
+	ret = ltdc_resume(ldev);
+	if (ret)
+		return ret;
+
+	ret = drm_aperture_remove_framebuffers(&drv_driver);
+	if (ret)
+		goto err_suspend;
+
 	dma_set_coherent_mask(dev, DMA_BIT_MASK(32));
 
 	ddev = drm_dev_alloc(&drv_driver, dev);
-	if (IS_ERR(ddev))
-		return PTR_ERR(ddev);
+	if (IS_ERR(ddev)) {
+		ret =  PTR_ERR(ddev);
+		goto err_suspend;
+	}
+
+	ddev->dev_private = (void *)ldev;
 
 	ret = drv_load(ddev);
 	if (ret)
@@ -211,6 +226,8 @@ static int stm_drm_platform_probe(struct platform_device *pdev)
 
 err_put:
 	drm_dev_put(ddev);
+err_suspend:
+	ltdc_suspend(ldev);
 
 	return ret;
 }
diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 539a87cdd663..e44a3a09ff6b 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -2272,49 +2272,6 @@ int ltdc_load(struct drm_device *ddev)
 	else
 		ldev->max_burst_length = mbl / 8;
 
-	ldev->pixel_clk = devm_clk_get(dev, "lcd");
-	if (IS_ERR(ldev->pixel_clk)) {
-		if (PTR_ERR(ldev->pixel_clk) != -EPROBE_DEFER)
-			DRM_ERROR("Unable to get lcd clock\n");
-		return PTR_ERR(ldev->pixel_clk);
-	}
-
-	ldev->bus_clk = devm_clk_get(dev, "bus");
-	if (IS_ERR(ldev->bus_clk)) {
-		if (PTR_ERR(ldev->bus_clk) != -EPROBE_DEFER)
-			DRM_DEBUG_DRIVER("Unable to get bus clock\n");
-		ldev->bus_clk = NULL;
-	}
-
-	ldev->lb_clk = devm_clk_get(dev, "ref");
-	if (IS_ERR(ldev->lb_clk)) {
-		if (PTR_ERR(ldev->pixel_clk) != -EPROBE_DEFER)
-			DRM_DEBUG_DRIVER("Unable to get loopback clock\n");
-		ldev->lb_clk = NULL;
-	}
-
-	/* Set CK_KER_LTDC by default, for now */
-	if (ldev->lb_clk) {
-		if (IS_ERR(ldev->lb_clk))
-			return PTR_ERR(ldev->lb_clk);
-
-		ret = clk_set_parent(ldev->pixel_clk, ldev->lb_clk);
-		if (ret)
-			DRM_ERROR("Could not set parent clock: %d\n", ret);
-	}
-
-	if (clk_prepare_enable(ldev->pixel_clk)) {
-		DRM_ERROR("Unable to prepare pixel clock\n");
-		return -ENODEV;
-	}
-
-	if (ldev->bus_clk) {
-		if (clk_prepare_enable(ldev->bus_clk)) {
-			DRM_ERROR("Unable to prepare bus clock\n");
-			return -ENODEV;
-		}
-	}
-
 	/* Get endpoints if any */
 	for (i = 0; i < nb_endpoints; i++) {
 		ret = drm_of_find_panel_or_bridge(np, 0, i, &panel, &bridge);
@@ -2327,7 +2284,7 @@ int ltdc_load(struct drm_device *ddev)
 		if (ret == -ENODEV)
 			continue;
 		else if (ret)
-			goto err;
+			return ret;
 
 		if (panel) {
 			bridge = drm_panel_bridge_add_typed(panel,
@@ -2335,7 +2292,7 @@ int ltdc_load(struct drm_device *ddev)
 			if (IS_ERR(bridge)) {
 				DRM_ERROR("panel-bridge endpoint %d\n", i);
 				ret = PTR_ERR(bridge);
-				goto err;
+				return ret;
 			}
 		}
 
@@ -2344,7 +2301,7 @@ int ltdc_load(struct drm_device *ddev)
 			if (ret) {
 				if (ret != -EPROBE_DEFER)
 					DRM_ERROR("init encoder endpoint %d\n", i);
-				goto err;
+				return ret;
 			}
 		}
 	}
@@ -2427,10 +2384,6 @@ int ltdc_load(struct drm_device *ddev)
 		goto err;
 	}
 
-	clk_disable_unprepare(ldev->pixel_clk);
-	if (ldev->bus_clk)
-		clk_disable_unprepare(ldev->bus_clk);
-
 	pinctrl_pm_select_sleep_state(ddev->dev);
 
 	pm_runtime_enable(ddev->dev);
@@ -2451,9 +2404,6 @@ int ltdc_load(struct drm_device *ddev)
 	for (i = 0; i < nb_endpoints; i++)
 		drm_of_panel_bridge_remove(ddev->dev->of_node, 0, i);
 
-	clk_disable_unprepare(ldev->pixel_clk);
-	if (ldev->bus_clk)
-		clk_disable_unprepare(ldev->bus_clk);
 
 	return ret;
 }
@@ -2473,6 +2423,79 @@ void ltdc_unload(struct drm_device *ddev)
 	pm_runtime_disable(ddev->dev);
 }
 
+int ltdc_parse_device_tree(struct device *dev)
+{
+	struct device_node *np = dev->of_node;
+	struct drm_bridge *bridge;
+	struct drm_panel *panel;
+	int i, nb_endpoints;
+	int ret = -ENODEV;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	/* Get number of endpoints */
+	nb_endpoints = of_graph_get_endpoint_count(np);
+	if (!nb_endpoints)
+		return -ENODEV;
+
+	/* Get endpoints if any */
+	for (i = 0; i < nb_endpoints; i++) {
+		ret = drm_of_find_panel_or_bridge(np, 0, i, &panel, &bridge);
+
+		/*
+		 * If at least one endpoint is -ENODEV, continue probing,
+		 * else if at least one endpoint returned an error
+		 * (ie -EPROBE_DEFER) then stop probing.
+		 */
+		if (ret == -ENODEV)
+			continue;
+		else if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+int ltdc_get_clk(struct device *dev, struct ltdc_device *ldev)
+{
+	int ret = 0;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	ldev->pixel_clk = devm_clk_get(dev, "lcd");
+	if (IS_ERR(ldev->pixel_clk)) {
+		if (PTR_ERR(ldev->pixel_clk) != -EPROBE_DEFER)
+			DRM_ERROR("Unable to get lcd clock\n");
+		return PTR_ERR(ldev->pixel_clk);
+	}
+
+	ldev->bus_clk = devm_clk_get(dev, "bus");
+	if (IS_ERR(ldev->bus_clk)) {
+		if (PTR_ERR(ldev->bus_clk) != -EPROBE_DEFER)
+			DRM_DEBUG_DRIVER("Unable to get bus clock\n");
+		ldev->bus_clk = NULL;
+	}
+
+	ldev->lb_clk = devm_clk_get(dev, "ref");
+	if (IS_ERR(ldev->lb_clk)) {
+		if (PTR_ERR(ldev->pixel_clk) != -EPROBE_DEFER)
+			DRM_DEBUG_DRIVER("Unable to get loopback clock\n");
+		ldev->lb_clk = NULL;
+	}
+
+	/* Set CK_KER_LTDC by default, for now */
+	if (ldev->lb_clk) {
+		if (IS_ERR(ldev->lb_clk))
+			return PTR_ERR(ldev->lb_clk);
+
+		ret = clk_set_parent(ldev->pixel_clk, ldev->lb_clk);
+		if (ret)
+			DRM_ERROR("Could not set parent clock: %d\n", ret);
+	}
+
+	return 0;
+}
+
 MODULE_AUTHOR("Philippe Cornu <philippe.cornu@st.com>");
 MODULE_AUTHOR("Yannick Fertre <yannick.fertre@st.com>");
 MODULE_AUTHOR("Fabien Dessenne <fabien.dessenne@st.com>");
diff --git a/drivers/gpu/drm/stm/ltdc.h b/drivers/gpu/drm/stm/ltdc.h
index 7664b286a557..5bb69d370318 100644
--- a/drivers/gpu/drm/stm/ltdc.h
+++ b/drivers/gpu/drm/stm/ltdc.h
@@ -64,6 +64,8 @@ struct ltdc_device {
 	struct reserved_mem *rot_mem;
 };
 
+int ltdc_parse_device_tree(struct device *dev);
+int ltdc_get_clk(struct device *dev, struct ltdc_device *ldev);
 int ltdc_load(struct drm_device *ddev);
 void ltdc_unload(struct drm_device *ddev);
 void ltdc_suspend(struct ltdc_device *ldev);
-- 
2.39.2

