From 92c0dd69b7619ceff7b51769a5881e5a4b495255 Mon Sep 17 00:00:00 2001
From: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Date: Tue, 19 Mar 2024 14:25:59 +0100
Subject: [PATCH 1000/1141] phy: stm32: combophy: remove pm runtime support

When exiting from low power, pm_runtime_resume_and_get() returns -EACCES
when the pcie requests phy_init(). Temporary remove PM runtime support,
until this gets clarified.

Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Change-Id: I072f1a0acb6c26152e518b6347bee176ff806b79
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/367767
Reviewed-by: Christian BRUEL <christian.bruel@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Tested-by: Christian BRUEL <christian.bruel@foss.st.com>
---
 drivers/phy/st/phy-stm32-combophy.c | 25 ++-----------------------
 1 file changed, 2 insertions(+), 23 deletions(-)

diff --git a/drivers/phy/st/phy-stm32-combophy.c b/drivers/phy/st/phy-stm32-combophy.c
index a8809e348668..7f2566a7869c 100644
--- a/drivers/phy/st/phy-stm32-combophy.c
+++ b/drivers/phy/st/phy-stm32-combophy.c
@@ -15,7 +15,6 @@
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/phy/phy.h>
-#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
 #include <dt-bindings/phy/phy.h>
@@ -408,7 +407,7 @@ static int stm32_combophy_suspend_noirq(struct device *dev)
 		enable_irq_wake(combophy->irq_wakeup);
 	}
 
-	return pm_runtime_force_suspend(dev);
+	return 0;
 }
 
 static int stm32_combophy_resume_noirq(struct device *dev)
@@ -416,12 +415,6 @@ static int stm32_combophy_resume_noirq(struct device *dev)
 	struct stm32_combophy *combophy = dev_get_drvdata(dev);
 	int ret;
 
-	ret = pm_runtime_force_resume(dev);
-	if (ret) {
-		dev_err(dev, "can't runtime resume (%d)\n", ret);
-		return ret;
-	}
-
 	/*
 	 * If clocks was turned off by suspend call for wakeup then needs
 	 * to be turned back ON in resume. In case usb-remote wakeup is not
@@ -460,8 +453,6 @@ static int stm32_combophy_exit(struct phy *phy)
 
 	stm32_combophy_disable_clocks(combophy);
 
-	pm_runtime_put_sync(combophy->dev);
-
 	return 0;
 }
 
@@ -470,16 +461,9 @@ static int stm32_combophy_init(struct phy *phy)
 	struct stm32_combophy *combophy = phy_get_drvdata(phy);
 	int ret;
 
-	ret = pm_runtime_resume_and_get(combophy->dev);
-	if (ret < 0) {
-		dev_err(combophy->dev, "pm_runtime_resume_and_get failed\n");
-		return ret;
-	}
-
 	ret = stm32_combophy_enable_clocks(combophy);
 	if (ret) {
 		dev_err(combophy->dev, "Clock enable failed %d\n", ret);
-		pm_runtime_put_sync(combophy->dev);
 		return ret;
 	}
 
@@ -487,14 +471,13 @@ static int stm32_combophy_init(struct phy *phy)
 	if (ret) {
 		dev_err(combophy->dev, "combophy mode not set\n");
 		stm32_combophy_disable_clocks(combophy);
-		pm_runtime_put_sync(combophy->dev);
 		return ret;
 	}
 
 	ret = stm32_combophy_pll_init(combophy);
 	if (ret) {
 		stm32_combophy_disable_clocks(combophy);
-		pm_runtime_put_sync(combophy->dev);
+		return ret;
 	}
 
 	combophy->is_init = true;
@@ -577,10 +560,6 @@ static int stm32_combophy_probe(struct platform_device *pdev)
 						 combophy->irq_wakeup);
 	}
 
-	ret = devm_pm_runtime_enable(dev);
-	if (ret)
-		return dev_err_probe(dev, ret, "Failed to enable pm runtime\n");
-
 	phy_set_drvdata(combophy->phy, combophy);
 
 	phy_provider = devm_of_phy_provider_register(dev, stm32_combophy_xlate);
-- 
2.39.2

