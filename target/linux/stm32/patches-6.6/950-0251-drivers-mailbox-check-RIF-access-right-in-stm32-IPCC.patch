From de909f14792c0edcae2771b2ac92eb3b562cbbd4 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Tue, 11 Jul 2023 10:20:48 +0200
Subject: [PATCH] drivers: mailbox: check RIF access right in stm32 IPCC

Check the CID on probe. If the CID filtering is ON, it must match
with the processor CID.
On channel request the access right is checked. If the channel is
reserved for the secure context return an error.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Change-Id: I29510e48c7404db9db32f85661b91411aa6f790a
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/325362
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Gatien CHEVALLIER <gatien.chevallier@st.com>
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/mailbox/stm32-ipcc.c | 76 +++++++++++++++++++++++++++++++-----
 1 file changed, 67 insertions(+), 9 deletions(-)

--- a/drivers/mailbox/stm32-ipcc.c
+++ b/drivers/mailbox/stm32-ipcc.c
@@ -26,8 +26,17 @@
 
 #define IPCC_PROC_OFFST		0x010
 
+#define IPCC_SECCFGR(x)		(x ? 0x90 : 0x80)
+#define IPCC_PRIVCFGR(x)	(x ? 0x94 : 0x84)
+
+#define IPCC_CIDCFGR(x)		(x ? 0x98 : 0x88)
+#define IPCC_CIDCFGR_CFEN_MASK	BIT(0)
+#define IPCC_CIDCFGR_SCID_MASK	GENMASK(7, 4)
+
 #define IPCC_HWCFGR		0x3f0
 #define IPCFGR_CHAN_MASK	GENMASK(7, 0)
+#define IPCFGR_SECCTRL_MASK	GENMASK(11, 8)
+#define IPCFGR_CIDWIDTH_MASK	GENMASK(27, 24)
 
 #define IPCC_VER		0x3f4
 #define VER_MINREV_MASK		GENMASK(3, 0)
@@ -41,6 +50,8 @@
 
 #define STM32_MAX_PROCS		2
 
+#define IPCC_CORE_ID		1
+
 /* Use virtual ID by setting bit 8 of a channel ID to keep interrupt context for client */
 #define STM32_IPCC_CH_ID_MASK		GENMASK(7, 0)
 #define STM32_IPCC_CH_HIGH_PRIO_MASK	GENMASK(8, 8)
@@ -71,6 +82,7 @@ struct stm32_ipcc {
 	u32 n_chans;
 	u32 xcr;
 	u32 xmr;
+	u32 sec_mode;
 };
 
 static inline void stm32_ipcc_set_bits(spinlock_t *lock, void __iomem *reg,
@@ -236,6 +248,31 @@ static void stm32_ipcc_shutdown(struct m
 	clk_disable_unprepare(ipcc->clk);
 }
 
+static int stm32_ipcc_check_rif(struct stm32_ipcc *ipcc, unsigned long chan)
+{
+	struct device *dev = ipcc->controller.dev;
+	u32 cfgr;
+
+	if (!ipcc->sec_mode)
+		return 0;
+
+	cfgr = readl_relaxed(ipcc->reg_base + IPCC_SECCFGR(ipcc->proc_id));
+	if (cfgr & BIT(chan)) {
+		dev_err(dev, "Unexpected secure configuration for chan %lu\n", chan);
+		return -EACCES;
+	}
+
+	/*
+	 * The privilege state is not checked as the client driver has privileged access right.
+	 * It is only read for debug information.
+	 */
+	cfgr = readl_relaxed(ipcc->reg_base + IPCC_PRIVCFGR(ipcc->proc_id));
+	dev_dbg(dev, "chan %lu is configured as %sprivileged\n", chan,
+		(cfgr & BIT(chan)) ? "" : "un");
+
+	return 0;
+}
+
 static const struct mbox_chan_ops stm32_ipcc_ops = {
 	.send_data	= stm32_ipcc_send_data,
 	.startup	= stm32_ipcc_startup,
@@ -245,13 +282,19 @@ static const struct mbox_chan_ops stm32_
 static struct mbox_chan *stm32_ipcc_xlate(struct mbox_controller *mbox,
 					  const struct of_phandle_args *sp)
 {
-	int ind = sp->args[0] & STM32_IPCC_CH_ID_MASK;
+	u32 ind = sp->args[0] & STM32_IPCC_CH_ID_MASK;
+	struct stm32_ipcc *ipcc = container_of(mbox, struct stm32_ipcc, controller);
 	struct stm32_ipcc_ch *chnl;
+	int ret;
 
 	if (ind >= mbox->num_chans)
 		return ERR_PTR(-EINVAL);
 
 	chnl = (struct stm32_ipcc_ch *)mbox->chans[ind].con_priv;
+	ret = stm32_ipcc_check_rif(ipcc, ind);
+	if (ret)
+		return ERR_PTR(ret);
+
 	chnl->mbox = &mbox->chans[ind];
 	chnl->chan = ind;
 	chnl->irq_ctx = !!(sp->args[0] & STM32_IPCC_CH_HIGH_PRIO_MASK);
@@ -264,14 +307,14 @@ static struct mbox_chan *stm32_ipcc_xlat
 
 static int stm32_ipcc_probe(struct platform_device *pdev)
 {
+	static const char * const irq_name[] = {"rx", "tx"};
+	irq_handler_t irq_thread[] = {stm32_ipcc_rx_irq, stm32_ipcc_tx_irq};
 	struct device *dev = &pdev->dev;
 	struct device_node *np = dev->of_node;
 	struct stm32_ipcc *ipcc;
+	u32 ip_ver, hwcfg, cidcfgr, cid, cid_mask;
 	unsigned long i;
 	int ret;
-	u32 ip_ver;
-	static const char * const irq_name[] = {"rx", "tx"};
-	irq_handler_t irq_thread[] = {stm32_ipcc_rx_irq, stm32_ipcc_tx_irq};
 
 	if (!np) {
 		dev_err(dev, "No DT found\n");
@@ -330,7 +373,26 @@ static int stm32_ipcc_probe(struct platf
 		}
 	}
 
-	/* mask and enable rx/tx irq */
+	hwcfg = readl_relaxed(ipcc->reg_base + IPCC_HWCFGR);
+	ipcc->n_chans = FIELD_GET(IPCFGR_CHAN_MASK, hwcfg);
+	ipcc->sec_mode = FIELD_GET(IPCFGR_SECCTRL_MASK, hwcfg);
+	cid_mask = FIELD_GET(IPCFGR_CIDWIDTH_MASK, hwcfg);
+
+	/* Check RIF CID*/
+	if (cid_mask) {
+		cidcfgr = readl(ipcc->reg_base + IPCC_CIDCFGR(ipcc->proc_id));
+		cid = FIELD_GET(IPCC_CIDCFGR_SCID_MASK, cidcfgr);
+		if ((cid & cid_mask) != IPCC_CORE_ID) {
+			dev_err(dev, "Unexpected CID%u, no access right\n", cid & cid_mask);
+			ret = -EPERM;
+			goto err_init_wkp;
+		}
+	}
+
+	/*
+	 * Mask and enable all rx/tx irq.
+	 * If CHnSEC bit is enabled, the CHnFM bit will not be updated by hardware
+	 */
 	stm32_ipcc_set_bits(&ipcc->lock, ipcc->reg_proc + IPCC_XMR,
 			    RX_BIT_MASK | TX_BIT_MASK);
 	stm32_ipcc_set_bits(&ipcc->lock, ipcc->reg_proc + IPCC_XCR,
@@ -347,10 +409,6 @@ static int stm32_ipcc_probe(struct platf
 		}
 	}
 
-	/* mailbox controller */
-	ipcc->n_chans = readl_relaxed(ipcc->reg_base + IPCC_HWCFGR);
-	ipcc->n_chans &= IPCFGR_CHAN_MASK;
-
 	ipcc->controller.dev = dev;
 	ipcc->controller.txdone_irq = true;
 	ipcc->controller.ops = &stm32_ipcc_ops;
