From bbabb65f14a6ca64478b3f8e85b652f80a5ea787 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Mon, 25 Mar 2024 16:50:02 +0100
Subject: [PATCH] media: dcmipp: capture all statistics and removal LOCATION
 ctrls

Increase amount of statistics by enabling BOTH pre and post statistics
retrieval and storage into the statistics structure.
For that purpose, average/bins values are duplicated into the statistics
buffer structure.
Drop usage of the V4L2_CID_ISP_STAT_LOCATION control which becomes useless
and update the state machine to loop twice (while updating the location) in
order to capture ALL statistics.

Change-Id: I83aa0b70688acbe18a2dc8d08ddcbe5d5011a609
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/369274
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Philippe CORNU <philippe.cornu@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/374629
---
 .../st/stm32/stm32-dcmipp/dcmipp-statcap.c    | 62 +++++++++----------
 include/uapi/linux/stm32-dcmipp-config.h      | 23 ++++---
 2 files changed, 43 insertions(+), 42 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c
@@ -30,6 +30,8 @@
 #define DCMIPP_P1STXCR_ENABLE		BIT(0)
 #define DCMIPP_P1STXCR_BINS_SHIFT	2
 #define DCMIPP_P1STXCR_SRC_COMP_SHIFT	4
+#define DCMIPP_P1STXCR_SRC_LOC_PRE	0
+#define DCMIPP_P1STXCR_SRC_LOC_POST	1
 #define DCMIPP_P1STXCR_SRC_LOC_SHIFT	6
 #define DCMIPP_P1STXCR_MODE_AVERAGE	0
 #define DCMIPP_P1STXCR_MODE_BINS	BIT(7)
@@ -92,7 +94,6 @@ struct dcmipp_statcap_device {
 	u32 sequence;
 	u32 frame_format;
 	struct v4l2_rect stat_region;
-	enum v4l2_isp_stat_location location;
 	enum v4l2_isp_stat_avg_filter avg_filter;
 	enum v4l2_isp_stat_bin_comp bin_comp;
 
@@ -469,9 +470,6 @@ static int dcmipp_statcap_s_ctrl(struct
 			DCMIPP_P1STSZR_ENABLE);
 		spin_unlock_irq(&vcap->irqlock);
 		break;
-	case V4L2_CID_ISP_STAT_LOCATION:
-		vcap->location = ctrl->val;
-		break;
 	case V4L2_CID_ISP_STAT_AVG_FILTER:
 		vcap->avg_filter = ctrl->val;
 		break;
@@ -495,16 +493,6 @@ static const struct v4l2_ctrl_config dcm
 		.name	= "ISP stat region control",
 	}, {
 		.ops	= &dcmipp_statcap_ctrl_ops,
-		.id	= V4L2_CID_ISP_STAT_LOCATION,
-		.type	= V4L2_CTRL_TYPE_INTEGER,
-		.name	= "ISP stat location control",
-		.min	= 0,
-		.max	= V4L2_STAT_LOCATION_AFTER_DEMO,
-		.step	= 1,
-		.def	= 0,
-		.flags	= 0,
-	}, {
-		.ops	= &dcmipp_statcap_ctrl_ops,
 		.id	= V4L2_CID_ISP_STAT_AVG_FILTER,
 		.type	= V4L2_CTRL_TYPE_INTEGER,
 		.name	= "ISP stat average filter control",
@@ -570,7 +558,7 @@ static void dcmipp_statcap_buffer_done(s
 	vb2_buffer_done(&cur_buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
 }
 
-static u32 dcmipp_statcap_get_src(enum v4l2_isp_stat_location location,
+static u32 dcmipp_statcap_get_src(u32 location,
 				  enum v4l2_isp_stat_bin_comp comp)
 {
 	return (location << DCMIPP_P1STXCR_SRC_LOC_SHIFT) | (comp << DCMIPP_P1STXCR_SRC_COMP_SHIFT);
@@ -581,6 +569,10 @@ static irqreturn_t dcmipp_statcap_irq_th
 	struct dcmipp_statcap_device *vcap =
 			container_of(arg, struct dcmipp_statcap_device, ved);
 	struct dcmipp_ent_device *ved = arg;
+	static u32 location = DCMIPP_P1STXCR_SRC_LOC_PRE;
+	struct stm32_dcmipp_stat_avr_bins *avr_bins =
+		location == DCMIPP_P1STXCR_SRC_LOC_PRE ? &vcap->local_buf.pre :
+							 &vcap->local_buf.post;
 	static bool stat_ready;
 	int i;
 
@@ -610,6 +602,7 @@ static irqreturn_t dcmipp_statcap_irq_th
 	switch (vcap->capture_state) {
 	case COLD_START:
 		stat_ready = false;
+		location = DCMIPP_P1STXCR_SRC_LOC_PRE;
 		/*
 		 * We've just started, set control registers to capture
 		 * AVERAGES (RGB) and leave
@@ -617,7 +610,7 @@ static irqreturn_t dcmipp_statcap_irq_th
 		for (i = 0; i < 3; i++)
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_AVERAGE |
-				  dcmipp_statcap_get_src(vcap->location, i) |
+				  dcmipp_statcap_get_src(location, i) |
 				  vcap->avg_filter << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 		break;
@@ -627,14 +620,14 @@ static irqreturn_t dcmipp_statcap_irq_th
 		for (i = 0; i < 3; i++)
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_BINS |
-				  dcmipp_statcap_get_src(vcap->location, vcap->bin_comp) |
+				  dcmipp_statcap_get_src(location, vcap->bin_comp) |
 				  0 << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 
 		if (vcap->prev_capture_state == PHY_BIN_3_SHA_AV_RGB) {
 			/* Accumulators contains the 4th set of BINS */
 			for (i = 0; i < 3; i++)
-				vcap->local_buf.bins[i + 9] = reg_read(vcap, DCMIPP_P1STXSR(i));
+				avr_bins->bins[i + 9] = reg_read(vcap, DCMIPP_P1STXSR(i));
 		}
 		break;
 
@@ -643,29 +636,29 @@ static irqreturn_t dcmipp_statcap_irq_th
 		for (i = 0; i < 3; i++)
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_BINS |
-				  dcmipp_statcap_get_src(vcap->location, vcap->bin_comp) |
+				  dcmipp_statcap_get_src(location, vcap->bin_comp) |
 				  1 << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 
 		/* Accumulators contains the AVERAGES (RGB) */
-		for (i = 0; i < ARRAY_SIZE(vcap->local_buf.average_RGB); i++) {
-			vcap->local_buf.average_RGB[i] = reg_read(vcap, DCMIPP_P1STXSR(i));
+		for (i = 0; i < ARRAY_SIZE(vcap->local_buf.pre.average_RGB); i++) {
+			avr_bins->average_RGB[i] = reg_read(vcap, DCMIPP_P1STXSR(i));
 			/* Normalize values */
-			vcap->local_buf.average_RGB[i] <<= 8;
+			avr_bins->average_RGB[i] <<= 8;
 
 			/* Depending on the position & component, need to adjust in case of Bayer */
-			if (vcap->location == V4L2_STAT_LOCATION_BEFORE_PROC &&
+			if (location == DCMIPP_P1STXCR_SRC_LOC_PRE &&
 			    vcap->frame_format >= MEDIA_BUS_FMT_SBGGR8_1X8 &&
 			    vcap->frame_format <= MEDIA_BUS_FMT_SRGGB16_1X16) {
 				/* raw bayer: RGB component not present for all pixels */
 				if (i == COMP_RED || i == COMP_BLUE)
-					vcap->local_buf.average_RGB[i] *= 4;
+					avr_bins->average_RGB[i] *= 4;
 				else if (i == COMP_GREEN)
-					vcap->local_buf.average_RGB[i] *= 2;
+					avr_bins->average_RGB[i] *= 2;
 			}
 
 			/* Divide by number of pixels */
-			vcap->local_buf.average_RGB[i] /=
+			avr_bins->average_RGB[i] /=
 				(vcap->stat_region.width * vcap->stat_region.height);
 		}
 		break;
@@ -675,13 +668,13 @@ static irqreturn_t dcmipp_statcap_irq_th
 		for (i = 0; i < 3; i++)
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_BINS |
-				  dcmipp_statcap_get_src(vcap->location, vcap->bin_comp) |
+				  dcmipp_statcap_get_src(location, vcap->bin_comp) |
 				  2 << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 
 		/* Accumulators contains the 1st set of BINS */
 		for (i = 0; i < 3; i++)
-			vcap->local_buf.bins[i] = reg_read(vcap, DCMIPP_P1STXSR(i));
+			avr_bins->bins[i] = reg_read(vcap, DCMIPP_P1STXSR(i));
 		break;
 
 	case PHY_BIN_2_SHA_BIN_3:
@@ -689,27 +682,28 @@ static irqreturn_t dcmipp_statcap_irq_th
 		for (i = 0; i < 3; i++)
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_BINS |
-				  dcmipp_statcap_get_src(vcap->location, vcap->bin_comp) |
+				  dcmipp_statcap_get_src(location, vcap->bin_comp) |
 				  3 << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 
 		/* Accumulators contains the 2nd set of BINS */
 		for (i = 0; i < 3; i++)
-			vcap->local_buf.bins[i + 3] = reg_read(vcap, DCMIPP_P1STXSR(i));
+			avr_bins->bins[i + 3] = reg_read(vcap, DCMIPP_P1STXSR(i));
 		break;
 
 	case PHY_BIN_3_SHA_AV_RGB:
 		/* Set control registers to capture the AVERAGES (RGB) */
 		for (i = 0; i < 3; i++)
+			/* Usage of !location is on purpose to switch to the other location */
 			reg_write(vcap, DCMIPP_P1STXCR(i),
 				  DCMIPP_P1STXCR_MODE_AVERAGE |
-				  dcmipp_statcap_get_src(vcap->location, i) |
+				  dcmipp_statcap_get_src(!location, i) |
 				  vcap->avg_filter << DCMIPP_P1STXCR_BINS_SHIFT |
 				  DCMIPP_P1STXCR_ENABLE);
 
 		/* Accumulators contains the 3rd set of BINS */
 		for (i = 0; i < 3; i++)
-			vcap->local_buf.bins[i + 6] = reg_read(vcap, DCMIPP_P1STXSR(i));
+			avr_bins->bins[i + 6] = reg_read(vcap, DCMIPP_P1STXSR(i));
 		break;
 	}
 
@@ -724,8 +718,10 @@ static irqreturn_t dcmipp_statcap_irq_th
 	if (vcap->capture_state < PHY_BIN_3_SHA_AV_RGB) {
 		vcap->capture_state++;
 	} else {
+		if (location == DCMIPP_P1STXCR_SRC_LOC_POST)
+			stat_ready = true;
+		location = !location;
 		vcap->capture_state = PHY_AV_RGB_SHA_BIN_0;
-		stat_ready = true;
 	}
 
 	return IRQ_HANDLED;
--- a/include/uapi/linux/stm32-dcmipp-config.h
+++ b/include/uapi/linux/stm32-dcmipp-config.h
@@ -168,21 +168,26 @@ struct stm32_dcmipp_params_cfg {
 };
 
 /**
- * struct stm32_dcmipp_stat_buf - statistics buffer
+ * struct stm32_dcmipp_stat_avr_bins - average & bins statistics
  *
  * @average_rgb[3]: average value of R/G/B components
  * @bins[12]: 12 values histogram
  */
-struct stm32_dcmipp_stat_buf {
-	/*
-	 * TODO - we should have a field indicating which data is the
-	 * latest, and also maybe all valid fields.  Another idea could be
-	 * to avoid output of the buffer until we have performed a first loop
-	 * on the capture state so that we are sure we have a valid value
-	 * for all statistics
-	 */
+struct stm32_dcmipp_stat_avr_bins {
 	__u32 average_RGB[3];
 	__u32 bins[12];
+};
+
+/**
+ * struct stm32_dcmipp_stat_buf - statistics buffer
+ *
+ * @pre: average & bins statistics at pre-demosaicing location
+ * @post: average & bins statistics at post-demosaicing location
+ * @bad_pixel_count: number of bad pixels detected in the frame
+ */
+struct stm32_dcmipp_stat_buf {
+	struct stm32_dcmipp_stat_avr_bins pre;
+	struct stm32_dcmipp_stat_avr_bins post;
 	__u32 bad_pixel_count;
 };
 
