From 786c74f67c6f7e9cd32a1bb2558bd854ed15ed0c Mon Sep 17 00:00:00 2001
From: Christian Bruel <christian.bruel@foss.st.com>
Date: Thu, 11 Jul 2024 14:53:06 +0200
Subject: [PATCH] irqchip/gic: restore GICC_CTRL and clear interrupt after IRQ
 deactivation

When interrupt priority drop is separated from interrupt deactivation,
a write to the GICC_DIR to disable the interrupt bogusly resets the
GICC_CTRL register, and the interrupt is not cleared.

Add gic_eoi_restore_ctrl quirk to restore GICC_CTRL and clear the irq.

Signed-off-by: Christian Bruel <christian.bruel@foss.st.com>
Change-Id: I7b3a939b4305cdf67fde29d49491b31342f0f23b
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/392826
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Stephane DANIEAU <stephane.danieau@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Stephane DANIEAU <stephane.danieau@foss.st.com>
---
 drivers/irqchip/irq-gic.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

--- a/drivers/irqchip/irq-gic.c
+++ b/drivers/irqchip/irq-gic.c
@@ -109,6 +109,7 @@ static DEFINE_RAW_SPINLOCK(cpu_map_lock)
 #endif
 
 static DEFINE_STATIC_KEY_FALSE(needs_rmw_access);
+static DEFINE_STATIC_KEY_FALSE(needs_gic_ctrl_restore);
 
 /*
  * The GIC mapping of CPU interfaces does not necessarily match
@@ -231,15 +232,24 @@ static void gic_eoi_irq(struct irq_data
 static void gic_eoimode1_eoi_irq(struct irq_data *d)
 {
 	u32 hwirq = gic_irq(d);
+	u32 save_cpu_ctrl;
 
 	/* Do not deactivate an IRQ forwarded to a vcpu. */
 	if (irqd_is_forwarded_to_vcpu(d))
 		return;
 
+	if (static_branch_unlikely(&needs_gic_ctrl_restore))
+		save_cpu_ctrl = readl_relaxed(gic_cpu_base(d) + GIC_CPU_CTRL);
+
 	if (hwirq < 16)
 		hwirq = this_cpu_read(sgi_intid);
 
 	writel_relaxed(hwirq, gic_cpu_base(d) + GIC_CPU_DEACTIVATE);
+
+	if (static_branch_unlikely(&needs_gic_ctrl_restore)) {
+		writel_relaxed(save_cpu_ctrl, gic_cpu_base(d) + GIC_CPU_CTRL);
+		gic_poke_irq(d, GIC_DIST_ACTIVE_CLEAR);
+	}
 }
 
 static int gic_irq_set_irqchip_state(struct irq_data *d,
@@ -1380,12 +1390,31 @@ static bool gic_enable_rmw_access(void *
 	return false;
 }
 
+static bool gic_eoi_restore_ctrl(void *data)
+{
+	 /*
+	  * A write to GIC_CPU_DEACTIVATE resets the GIC CTRL
+	  * register. make sure it is restored and irq cleared
+	  */
+	if (of_machine_is_compatible("st,stm32mp257")) {
+		static_branch_enable(&needs_gic_ctrl_restore);
+		return true;
+	}
+
+	return false;
+}
+
 static const struct gic_quirk gic_quirks[] = {
 	{
 		.desc		= "broken byte access",
 		.compatible	= "arm,pl390",
 		.init		= gic_enable_rmw_access,
 	},
+	{
+		.desc		= "broken EOI in split irq mode",
+		.compatible	= "arm,cortex-a7-gic",
+		.init		= gic_eoi_restore_ctrl,
+	},
 	{ },
 };
 
