From f8f9ccf6f96c37073b4eae84b09753905cc6ee32 Mon Sep 17 00:00:00 2001
From: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Date: Mon, 31 Jul 2023 14:30:26 +0200
Subject: [PATCH] clk: syscfg: mp25: add syconfg clocks for STM32MP25

Several clocks on STM32MP25 are only handled by the syscfg which does
the clock source selection and manages the selection of reference clock
frequency. THis new clk mux driver is based on clk-regmap.

This driver implements first the display clock mux, which selects the
source clock for the LTDC input pixel clock between the LVDS PLL PHY
clock, the flexgen clock and the DSI PLL PHY clock.

Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Signed-off-by: Raphael Gallais-Pou <raphael.gallais-pou@foss.st.com>
Change-Id: If8775a5efa01879dde601ebf3bfdf9aae5cbe3a8
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/322042
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
Domain-Review: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
---
 drivers/clk/stm32/Kconfig                |   1 +
 drivers/clk/stm32/Makefile               |   1 +
 drivers/clk/stm32/clk-stm32mp25-syscfg.c | 104 +++++++++++++++++++++++
 3 files changed, 106 insertions(+)
 create mode 100644 drivers/clk/stm32/clk-stm32mp25-syscfg.c

diff --git a/drivers/clk/stm32/Kconfig b/drivers/clk/stm32/Kconfig
index dca409d52652..e2e7212ef91d 100644
--- a/drivers/clk/stm32/Kconfig
+++ b/drivers/clk/stm32/Kconfig
@@ -28,6 +28,7 @@ config COMMON_CLK_STM32MP157
 config COMMON_CLK_STM32MP257
 	bool "Clock driver for stm32mp25x clocks"
 	depends on ARM64 || COMPILE_TEST
+	select COMMON_CLK_REGMAP
 	default y
 	help
 	  Support for stm32mp25x SoC family clocks.
diff --git a/drivers/clk/stm32/Makefile b/drivers/clk/stm32/Makefile
index 0a627164fcce..f563d2f683e7 100644
--- a/drivers/clk/stm32/Makefile
+++ b/drivers/clk/stm32/Makefile
@@ -1,3 +1,4 @@
 obj-$(CONFIG_COMMON_CLK_STM32MP135)	+= clk-stm32mp13.o clk-stm32-core.o reset-stm32.o
 obj-$(CONFIG_COMMON_CLK_STM32MP157)	+= clk-stm32mp1.o reset-stm32.o
 obj-$(CONFIG_COMMON_CLK_STM32MP257)	+= clk-stm32mp25.o clk-stm32-core.o reset-stm32.o
+obj-$(CONFIG_COMMON_CLK_STM32MP257)	+= clk-stm32mp25-syscfg.o
diff --git a/drivers/clk/stm32/clk-stm32mp25-syscfg.c b/drivers/clk/stm32/clk-stm32mp25-syscfg.c
new file mode 100644
index 000000000000..ad8b8c961fed
--- /dev/null
+++ b/drivers/clk/stm32/clk-stm32mp25-syscfg.c
@@ -0,0 +1,104 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) STMicroelectronics 2023 - All Rights Reserved
+ * Author: Gabriel Fernandez <gabriel.fernandez@foss.st.com> for STMicroelectronics.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/clk-regmap.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#define SYSCFG_DISPLAYCLKCR	0x5000
+
+static const char * const clk_pix_ltdc_src[] = {
+	"txbyteclk", "clk_pix_lvds", "ck_ker_ltdc"
+};
+
+static struct clk_regmap clk_pix_ltdc = {
+	.data = &(struct clk_regmap_mux_data){
+		.offset = SYSCFG_DISPLAYCLKCR,
+		.mask = 0x3,
+		.shift = 0,
+	},
+	.hw.init = CLK_HW_INIT_PARENTS("clk_pix_ltdc", clk_pix_ltdc_src, &clk_regmap_mux_ops,
+				       CLK_SET_RATE_PARENT | CLK_SET_RATE_NO_REPARENT),
+};
+
+static struct clk_hw *stm32_syscfg_mp25_hw_clocks[] = {
+		&clk_pix_ltdc.hw,
+};
+
+struct stm32_syscfg_match_data {
+	unsigned int	num_clocks;
+	struct clk_hw	**tab_clocks;
+};
+
+static struct stm32_syscfg_match_data syscfg_mp25_data = {
+	.tab_clocks	= stm32_syscfg_mp25_hw_clocks,
+	.num_clocks	= ARRAY_SIZE(stm32_syscfg_mp25_hw_clocks),
+};
+
+static int stm32mp25_syscfg_clocks_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device *dev = &pdev->dev;
+	const struct stm32_syscfg_match_data *data;
+	struct regmap *regmap;
+	struct clk_hw_onecell_data *hw_data;
+	int ret, n;
+
+	data = device_get_match_data(dev);
+	if (!data)
+		return -EINVAL;
+
+	regmap = syscon_node_to_regmap(np);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	hw_data = devm_kzalloc(dev, struct_size(hw_data, hws, data->num_clocks), GFP_KERNEL);
+	if (!hw_data)
+		return -ENOMEM;
+
+	hw_data->num = data->num_clocks;
+
+	for (n = 0; n < data->num_clocks; n++) {
+		struct clk_hw *hw = data->tab_clocks[n];
+		struct clk_regmap *clk = to_clk_regmap(hw);
+
+		clk->map = regmap;
+
+		ret = devm_clk_hw_register(dev, hw);
+		if (ret) {
+			dev_warn(dev, "failed to register %s\n", hw->init->name);
+			hw = ERR_PTR(-ENOENT);
+		}
+
+		hw_data->hws[n] = hw;
+	}
+
+	ret = of_clk_add_hw_provider(np, of_clk_hw_onecell_get, hw_data);
+	if (ret)
+		return ret;
+
+	return ret;
+}
+
+static const struct of_device_id stm32mp25_syscfg_match_data[] = {
+	{
+		.compatible = "st,stm32mp25-syscfg",
+		.data = &syscfg_mp25_data,
+	},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, stm32mp25_syscfg_match_data);
+
+static struct platform_driver stm32mp25_syscfg_driver = {
+	.probe = stm32mp25_syscfg_clocks_probe,
+	.driver = {
+		.name = "stm32mp25_syscfg",
+		.of_match_table = stm32mp25_syscfg_match_data,
+	},
+};
+module_platform_driver(stm32mp25_syscfg_driver);
-- 
2.39.5

