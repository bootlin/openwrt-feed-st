From 59c59cd90d68e8987ff460896ae0395857d6d51c Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 29 Mar 2024 14:04:41 +0100
Subject: [PATCH] drm/stm : lvds: get pixel clock rate

At probe, get the pixel clock rate from registers settings.

Change-Id: I9acd397e1ee33ef81e3962b0daf120fc9a388130
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/370226
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/372044
---
 drivers/gpu/drm/stm/lvds.c | 26 +++++++++++++++++++++++++-
 1 file changed, 25 insertions(+), 1 deletion(-)

--- a/drivers/gpu/drm/stm/lvds.c
+++ b/drivers/gpu/drm/stm/lvds.c
@@ -1042,7 +1042,10 @@ static int lvds_probe(struct platform_de
 	struct device_node *port1, *port2, *remote;
 	struct device *dev = &pdev->dev;
 	struct reset_control *rstc;
+	struct lvds_phy_info *phy;
 	struct stm_lvds *lvds;
+	unsigned int pll_in_khz, bdiv, mdiv, ndiv;
+	int multiplier, rate;
 	int ret, dual_link;
 
 	dev_dbg(dev, "Probing LVDS driver...\n");
@@ -1193,9 +1196,30 @@ static int lvds_probe(struct platform_de
 	 * To obtain a continuous display after the probe,
 	 *  the clocks must remain activated
 	 */
-	if (device_property_read_bool(dev, "default-on"))
+	if (device_property_read_bool(dev, "default-on")) {
 		pm_runtime_get_sync(dev);
 
+		if (lvds->primary) {
+			if (lvds_is_dual_link(lvds->link_type))
+				multiplier = 2;
+			else
+				multiplier = 1;
+
+			phy = lvds->primary;
+			pll_in_khz = clk_get_rate(lvds->pllref_clk) / 1000;
+
+			ndiv = lvds_read(lvds, phy->base + phy->ofs.PLLCR2) >> 16;
+			bdiv = lvds_read(lvds, phy->base + phy->ofs.PLLCR2) & 0xFFFF;
+			mdiv = lvds_read(lvds, phy->base + phy->ofs.PLLSDCR1);
+
+			/* X7 because for each pixel in 1 lane there is 7 bits
+			 * We want pixclk, not bitclk
+			 */
+			rate = pll_get_clkout_khz(pll_in_khz, bdiv, mdiv, ndiv);
+			lvds->pixel_clock_rate = (unsigned long) rate  * 1000 * multiplier / 7;
+		}
+	}
+
 	return 0;
 }
 
