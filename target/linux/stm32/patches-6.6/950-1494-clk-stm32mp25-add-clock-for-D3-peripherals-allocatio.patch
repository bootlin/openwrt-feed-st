From 06e21c54a8d35f48838cb01b1f8d603b4eeef457 Mon Sep 17 00:00:00 2001
From: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Date: Fri, 20 Sep 2024 17:38:45 +0200
Subject: [PATCH] clk: stm32mp25: add clock for D3 peripherals allocation for
 Cortex-CM0

GATE_<IP>AM allows to enable Autonomous Mode of D3 peripherals.
GATE_<IP>C3 allows to enable peripherals allocation to CPU3.

For any D3 peripheral allocated to CPU3  (CPU3 domain is used
and AMEN), MSIKERON must be set to allow  Stop modes.
That is why all autonomous clocks have the MSI KER clock as
their parent.

Change-Id: I7567c278d16aef8ec9910b59068afb59f0c6dbdf
Signed-off-by: Gwenael Treuveur <gwenael.treuveur@foss.st.com>
Signed-off-by: Gabriel Fernandez <gabriel.fernandez@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/404452
Reviewed-by: Gwenael TREUVEUR <gwenael.treuveur@st.com>
Reviewed-by: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/clk/stm32/clk-stm32mp25.c | 265 +++++++++++++++++++++++++++---
 1 file changed, 243 insertions(+), 22 deletions(-)

diff --git a/drivers/clk/stm32/clk-stm32mp25.c b/drivers/clk/stm32/clk-stm32mp25.c
index 8109e3a38c66..fb0205a91a6f 100644
--- a/drivers/clk/stm32/clk-stm32mp25.c
+++ b/drivers/clk/stm32/clk-stm32mp25.c
@@ -129,6 +129,9 @@ enum {
 	TIMG2,
 	PLL3,
 	DSI_TXBYTE,
+	HSE_KER,
+	HSI_KER,
+	MSI_KER,
 };
 
 static const struct clk_parent_data adc12_src[] = {
@@ -254,7 +257,10 @@ enum enum_gate_cfg {
 	GATE_ADC12,
 	GATE_ADC3,
 	GATE_ADF1,
+	GATE_ADF1AM,
+	GATE_ADF1C3,
 	GATE_C3,
+	GATE_C3AM,
 	GATE_CCI,
 	GATE_CRC,
 	GATE_CRYP1,
@@ -279,9 +285,12 @@ enum enum_gate_cfg {
 	GATE_ETHSWMAC,
 	GATE_ETHSWREF,
 	GATE_FDCAN,
+	GATE_GPIOZC3,
 	GATE_GPU,
 	GATE_HASH,
 	GATE_HDP,
+	GATE_HSE_KER,
+	GATE_HSI_KER,
 	GATE_I2C1,
 	GATE_I2C2,
 	GATE_I2C3,
@@ -290,31 +299,46 @@ enum enum_gate_cfg {
 	GATE_I2C6,
 	GATE_I2C7,
 	GATE_I2C8,
+	GATE_I2C8AM,
+	GATE_I2C8C3,
 	GATE_I3C1,
 	GATE_I3C2,
 	GATE_I3C3,
 	GATE_I3C4,
+	GATE_I3C4AM,
+	GATE_I3C4C3,
 	GATE_IS2M,
 	GATE_IWDG1,
 	GATE_IWDG2,
 	GATE_IWDG3,
 	GATE_IWDG4,
 	GATE_IWDG5,
+	GATE_LPDMAC3,
 	GATE_LPTIM1,
 	GATE_LPTIM2,
 	GATE_LPTIM3,
+	GATE_LPTIM3AM,
+	GATE_LPTIM3C3,
 	GATE_LPTIM4,
+	GATE_LPTIM4AM,
+	GATE_LPTIM4C3,
 	GATE_LPTIM5,
+	GATE_LPTIM5AM,
+	GATE_LPTIM5C3,
 	GATE_LPUART1,
+	GATE_LPUART1AM,
+	GATE_LPUART1C3,
 	GATE_LTDC,
 	GATE_LVDS,
 	GATE_MCO1,
 	GATE_MCO2,
 	GATE_MDF1,
+	GATE_MSI_KER,
 	GATE_OSPIIOM,
 	GATE_PCIE,
 	GATE_PKA,
 	GATE_RNG,
+	GATE_RTCC3,
 	GATE_SAES,
 	GATE_SAI1,
 	GATE_SAI2,
@@ -333,6 +357,8 @@ enum enum_gate_cfg {
 	GATE_SPI6,
 	GATE_SPI7,
 	GATE_SPI8,
+	GATE_SPI8AM,
+	GATE_SPI8C3,
 	GATE_TIM1,
 	GATE_TIM10,
 	GATE_TIM11,
@@ -371,7 +397,6 @@ enum enum_gate_cfg {
 	GATE_WWDG1,
 	GATE_WWDG2,
 #ifdef CONFIG_DEBUG_FS
-	GATE_ADF1C3,
 	GATE_BKPSRAM,
 	GATE_BSEC,
 	GATE_DBG,
@@ -395,7 +420,7 @@ enum enum_gate_cfg {
 	GATE_GPIOJ,
 	GATE_GPIOK,
 	GATE_GPIOZ,
-	GATE_GPIOZC3,
+	GATE_GPIOZAM,
 	GATE_HPDMA1,
 	GATE_HPDMA2,
 	GATE_HPDMA3,
@@ -403,19 +428,14 @@ enum enum_gate_cfg {
 	GATE_HSEDIV2,
 	GATE_HSEM,
 	GATE_HSI,
-	GATE_I2C8C3,
-	GATE_I3C4C3,
 	GATE_IPCC1,
 	GATE_IPCC2,
+	GATE_IPCC2AM,
 	GATE_LPDMA,
-	GATE_LPDMAC3,
+	GATE_LPDMAAM,
 	GATE_LPSRAM1,
 	GATE_LPSRAM2,
 	GATE_LPSRAM3,
-	GATE_LPTIM3C3,
-	GATE_LPTIM4C3,
-	GATE_LPTIM5C3,
-	GATE_LPUART1C3,
 	GATE_LSE,
 	GATE_LSI,
 	GATE_MSI,
@@ -431,9 +451,8 @@ enum enum_gate_cfg {
 	GATE_PLL8,
 	GATE_RETRAM,
 	GATE_RTC,
-	GATE_RTCC3,
+	GATE_RTCAM,
 	GATE_RTCCK,
-	GATE_SPI8C3,
 	GATE_SRAM1,
 	GATE_SRAM2,
 	GATE_STGEN,
@@ -457,7 +476,10 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_ADC12,		RCC_ADC12CFGR,		1,	0),
 	GATE_CFG(GATE_ADC3,		RCC_ADC3CFGR,		1,	0),
 	GATE_CFG(GATE_ADF1,		RCC_ADF1CFGR,		1,	0),
+	GATE_CFG(GATE_ADF1AM,		RCC_ADF1CFGR,		3,	0),
+	GATE_CFG(GATE_ADF1C3,		RCC_C3CFGR,		23,	0),
 	GATE_CFG(GATE_C3,		RCC_C3CFGR,		1,	0),
+	GATE_CFG(GATE_C3AM,		RCC_C3CFGR,		3,	0),
 	GATE_CFG(GATE_CCI,		RCC_CCICFGR,		1,	0),
 	GATE_CFG(GATE_CRC,		RCC_CRCCFGR,		1,	0),
 	GATE_CFG(GATE_CRYP1,		RCC_CRYP1CFGR,		1,	0),
@@ -482,6 +504,7 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_ETHSWMAC,		RCC_ETHSWCFGR,		1,	0),
 	GATE_CFG(GATE_ETHSWREF,		RCC_ETHSWCFGR,		21,	0),
 	GATE_CFG(GATE_FDCAN,		RCC_FDCANCFGR,		1,	0),
+	GATE_CFG(GATE_GPIOZC3,		RCC_C3CFGR,		24,	0),
 	GATE_CFG(GATE_GPU,		RCC_GPUCFGR,		1,	0),
 	GATE_CFG(GATE_HASH,		RCC_HASHCFGR,		1,	0),
 	GATE_CFG(GATE_HDP,		RCC_HDPCFGR,		1,	0),
@@ -493,22 +516,35 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_I2C6,		RCC_I2C6CFGR,		1,	0),
 	GATE_CFG(GATE_I2C7,		RCC_I2C7CFGR,		1,	0),
 	GATE_CFG(GATE_I2C8,		RCC_I2C8CFGR,		1,	0),
+	GATE_CFG(GATE_I2C8AM,		RCC_I2C8CFGR,		3,	0),
+	GATE_CFG(GATE_I2C8C3,		RCC_C3CFGR,		21,	0),
 	GATE_CFG(GATE_I3C1,		RCC_I3C1CFGR,		1,	0),
 	GATE_CFG(GATE_I3C2,		RCC_I3C2CFGR,		1,	0),
 	GATE_CFG(GATE_I3C3,		RCC_I3C3CFGR,		1,	0),
 	GATE_CFG(GATE_I3C4,		RCC_I3C4CFGR,		1,	0),
+	GATE_CFG(GATE_I3C4AM,		RCC_I3C4CFGR,		3,	0),
+	GATE_CFG(GATE_I3C4C3,		RCC_C3CFGR,		27,	0),
 	GATE_CFG(GATE_IS2M,		RCC_IS2MCFGR,		1,	0),
 	GATE_CFG(GATE_IWDG1,		RCC_IWDG1CFGR,		1,	0),
 	GATE_CFG(GATE_IWDG2,		RCC_IWDG2CFGR,		1,	0),
 	GATE_CFG(GATE_IWDG3,		RCC_IWDG3CFGR,		1,	0),
 	GATE_CFG(GATE_IWDG4,		RCC_IWDG4CFGR,		1,	0),
 	GATE_CFG(GATE_IWDG5,		RCC_IWDG5CFGR,		1,	0),
+	GATE_CFG(GATE_LPDMAC3,		RCC_C3CFGR,		25,	0),
 	GATE_CFG(GATE_LPTIM1,		RCC_LPTIM1CFGR,		1,	0),
 	GATE_CFG(GATE_LPTIM2,		RCC_LPTIM2CFGR,		1,	0),
 	GATE_CFG(GATE_LPTIM3,		RCC_LPTIM3CFGR,		1,	0),
+	GATE_CFG(GATE_LPTIM3AM,		RCC_LPTIM3CFGR,		3,	0),
+	GATE_CFG(GATE_LPTIM3C3,		RCC_C3CFGR,		16,	0),
 	GATE_CFG(GATE_LPTIM4,		RCC_LPTIM4CFGR,		1,	0),
+	GATE_CFG(GATE_LPTIM4AM,		RCC_LPTIM4CFGR,		3,	0),
+	GATE_CFG(GATE_LPTIM4C3,		RCC_C3CFGR,		17,	0),
 	GATE_CFG(GATE_LPTIM5,		RCC_LPTIM5CFGR,		1,	0),
+	GATE_CFG(GATE_LPTIM5AM,		RCC_LPTIM5CFGR,		3,	0),
+	GATE_CFG(GATE_LPTIM5C3,		RCC_C3CFGR,		18,	0),
 	GATE_CFG(GATE_LPUART1,		RCC_LPUART1CFGR,	1,	0),
+	GATE_CFG(GATE_LPUART1AM,	RCC_LPUART1CFGR,	3,	0),
+	GATE_CFG(GATE_LPUART1C3,	RCC_C3CFGR,		20,	0),
 	GATE_CFG(GATE_LTDC,		RCC_LTDCCFGR,		1,	0),
 	GATE_CFG(GATE_LVDS,		RCC_LVDSCFGR,		1,	0),
 	GATE_CFG(GATE_MCO1,		RCC_MCO1CFGR,		8,	0),
@@ -517,6 +553,7 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_OSPIIOM,		RCC_OSPIIOMCFGR,	1,	0),
 	GATE_CFG(GATE_PCIE,		RCC_PCIECFGR,		1,	0),
 	GATE_CFG(GATE_PKA,		RCC_PKACFGR,		1,	0),
+	GATE_CFG(GATE_RTCC3,		RCC_C3CFGR,		26,	0),
 	GATE_CFG(GATE_RNG,		RCC_RNGCFGR,		1,	0),
 	GATE_CFG(GATE_SAES,		RCC_SAESCFGR,		1,	0),
 	GATE_CFG(GATE_SAI1,		RCC_SAI1CFGR,		1,	0),
@@ -536,6 +573,8 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_SPI6,		RCC_SPI6CFGR,		1,	0),
 	GATE_CFG(GATE_SPI7,		RCC_SPI7CFGR,		1,	0),
 	GATE_CFG(GATE_SPI8,		RCC_SPI8CFGR,		1,	0),
+	GATE_CFG(GATE_SPI8AM,		RCC_SPI8CFGR,		3,	0),
+	GATE_CFG(GATE_SPI8C3,		RCC_C3CFGR,		19,	0),
 	GATE_CFG(GATE_TIM1,		RCC_TIM1CFGR,		1,	0),
 	GATE_CFG(GATE_TIM10,		RCC_TIM10CFGR,		1,	0),
 	GATE_CFG(GATE_TIM11,		RCC_TIM11CFGR,		1,	0),
@@ -574,7 +613,6 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_WWDG1,		RCC_WWDG1CFGR,		1,	0),
 	GATE_CFG(GATE_WWDG2,		RCC_WWDG2CFGR,		1,	0),
 #ifdef CONFIG_DEBUG_FS
-	GATE_CFG(GATE_ADF1C3,		RCC_C3CFGR,		23,	0),
 	GATE_CFG(GATE_BKPSRAM,		RCC_BKPSRAMCFGR,	1,	0),
 	GATE_CFG(GATE_BSEC,		RCC_BSECCFGR,		1,	0),
 	GATE_CFG(GATE_DBG,		RCC_DBGCFGR,		8,	0),
@@ -598,30 +636,28 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_GPIOJ,		RCC_GPIOJCFGR,		1,	0),
 	GATE_CFG(GATE_GPIOK,		RCC_GPIOKCFGR,		1,	0),
 	GATE_CFG(GATE_GPIOZ,		RCC_GPIOZCFGR,		1,	0),
-	GATE_CFG(GATE_GPIOZC3,		RCC_C3CFGR,		24,	0),
+	GATE_CFG(GATE_GPIOZAM,		RCC_GPIOZCFGR,		3,	0),
 	GATE_CFG(GATE_HPDMA1,		RCC_HPDMA1CFGR,		1,	0),
 	GATE_CFG(GATE_HPDMA2,		RCC_HPDMA2CFGR,		1,	0),
 	GATE_CFG(GATE_HPDMA3,		RCC_HPDMA3CFGR,		1,	0),
 	GATE_CFG(GATE_HSE,		RCC_OCENSETR,		8,	1),
+	GATE_CFG(GATE_HSE_KER,		RCC_OCENSETR,		9,	1),
 	GATE_CFG(GATE_HSEDIV2,		RCC_OCENSETR,		5,	1),
 	GATE_CFG(GATE_HSEM,		RCC_HSEMCFGR,		1,	0),
 	GATE_CFG(GATE_HSI,		RCC_OCENSETR,		0,	1),
-	GATE_CFG(GATE_I2C8C3,		RCC_C3CFGR,		21,	0),
-	GATE_CFG(GATE_I3C4C3,		RCC_C3CFGR,		27,	0),
+	GATE_CFG(GATE_HSI_KER,		RCC_OCENSETR,		1,	1),
 	GATE_CFG(GATE_IPCC1,		RCC_IPCC1CFGR,		1,	0),
 	GATE_CFG(GATE_IPCC2,		RCC_IPCC2CFGR,		1,	0),
+	GATE_CFG(GATE_IPCC2AM,		RCC_IPCC2CFGR,		3,	0),
 	GATE_CFG(GATE_LPDMA,		RCC_LPDMACFGR,		1,	0),
-	GATE_CFG(GATE_LPDMAC3,		RCC_C3CFGR,		25,	0),
+	GATE_CFG(GATE_LPDMAAM,		RCC_LPDMACFGR,		3,	0),
 	GATE_CFG(GATE_LPSRAM1,		RCC_LPSRAM1CFGR,	1,	0),
 	GATE_CFG(GATE_LPSRAM2,		RCC_LPSRAM2CFGR,	1,	0),
 	GATE_CFG(GATE_LPSRAM3,		RCC_LPSRAM3CFGR,	1,	0),
-	GATE_CFG(GATE_LPTIM3C3,		RCC_C3CFGR,		16,	0),
-	GATE_CFG(GATE_LPTIM4C3,		RCC_C3CFGR,		17,	0),
-	GATE_CFG(GATE_LPTIM5C3,		RCC_C3CFGR,		18,	0),
-	GATE_CFG(GATE_LPUART1C3,	RCC_C3CFGR,		20,	0),
 	GATE_CFG(GATE_LSE,		RCC_BDCR,		0,	0),
 	GATE_CFG(GATE_LSI,		RCC_BDCR,		9,	0),
 	GATE_CFG(GATE_MSI,		RCC_D3DCR,		0,	0),
+	GATE_CFG(GATE_MSI_KER,		RCC_D3DCR,		1,	0),
 	GATE_CFG(GATE_OSPI1,		RCC_OSPI1CFGR,		1,	0),
 	GATE_CFG(GATE_OSPI2,		RCC_OSPI2CFGR,		1,	0),
 	GATE_CFG(GATE_PLL1,		RCC_PLL2CFGR1,		8,	0),
@@ -634,9 +670,8 @@ static const struct stm32_gate_cfg stm32mp25_gates[GATE_NB] = {
 	GATE_CFG(GATE_PLL8,		RCC_PLL8CFGR1,		8,	0),
 	GATE_CFG(GATE_RETRAM,		RCC_RETRAMCFGR,		1,	0),
 	GATE_CFG(GATE_RTC,		RCC_RTCCFGR,		1,	0),
-	GATE_CFG(GATE_RTCC3,		RCC_C3CFGR,		26,	0),
+	GATE_CFG(GATE_RTCAM,		RCC_RTCCFGR,		3,	0),
 	GATE_CFG(GATE_RTCCK,		RCC_BDCR,		20,	0),
-	GATE_CFG(GATE_SPI8C3,		RCC_C3CFGR,		19,	0),
 	GATE_CFG(GATE_SRAM1,		RCC_SRAM1CFGR,		1,	0),
 	GATE_CFG(GATE_SRAM2,		RCC_SRAM2CFGR,		1,	0),
 	GATE_CFG(GATE_STGEN,		RCC_STGENCFGR,		1,	0),
@@ -731,12 +766,77 @@ static struct clk_stm32_gate ck_ker_adf1 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_adf1", FLEXGEN_42, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_adf1_am = {
+	.gate_id = GATE_ADF1AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_adf1_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* C3 */
 static struct clk_stm32_gate ck_cpu3 = {
 	.gate_id = GATE_C3,
 	.hw.init = CLK_HW_INIT_INDEX("ck_cpu3", ICN_LS_MCU, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_cpu3_am = {
+	.gate_id = GATE_C3AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_cpu3_am", ICN_LS_MCU, &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_adf1 = {
+	.gate_id = GATE_ADF1C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_adf1", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_gpioz = {
+	.gate_id = GATE_GPIOZC3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_gpioz", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_i2c8 = {
+	.gate_id = GATE_I2C8C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_i2c8", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_i3c4 = {
+	.gate_id = GATE_I3C4C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_i3c4", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_lpdma = {
+	.gate_id = GATE_LPDMAC3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_lpdma", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_lptim3 = {
+	.gate_id = GATE_LPTIM3C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_lptim3", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_lptim4 = {
+	.gate_id = GATE_LPTIM4C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_lptim4", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_lptim5 = {
+	.gate_id = GATE_LPTIM5C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_lptim5", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_lpuart1 = {
+	.gate_id = GATE_LPUART1C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_lpuart1", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_rtc = {
+	.gate_id = GATE_RTCC3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_rtc", &clk_stm32_gate_ops, 0),
+};
+
+static struct clk_stm32_gate ck_c3_spi8 = {
+	.gate_id = GATE_SPI8C3,
+	.hw.init = CLK_HW_INIT_NO_PARENT("ck_c3_spi8", &clk_stm32_gate_ops, 0),
+};
+
 /* DCMI */
 static struct clk_stm32_gate ck_icn_p_cci = {
 	.gate_id = GATE_CCI,
@@ -1063,6 +1163,11 @@ static struct clk_stm32_gate ck_ker_i2c8 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_i2c8", FLEXGEN_38, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_i2c8_am = {
+	.gate_id = GATE_I2C8AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_i2c8_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* I3C */
 static struct clk_stm32_gate ck_icn_p_i3c1 = {
 	.gate_id = GATE_I3C1,
@@ -1104,6 +1209,11 @@ static struct clk_stm32_gate ck_ker_i3c4 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_i3c4", FLEXGEN_36, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_i3c4_am = {
+	.gate_id = GATE_I3C4AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_i3c4_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* I2S */
 static struct clk_stm32_gate ck_icn_p_is2m = {
 	.gate_id = GATE_IS2M,
@@ -1177,16 +1287,31 @@ static struct clk_stm32_gate ck_ker_lptim3 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim3", FLEXGEN_40, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_lptim3_am = {
+	.gate_id = GATE_LPTIM3AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim3_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 static struct clk_stm32_gate ck_ker_lptim4 = {
 	.gate_id = GATE_LPTIM4,
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim4", FLEXGEN_41, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_lptim4_am = {
+	.gate_id = GATE_LPTIM4AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim4_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 static struct clk_stm32_gate ck_ker_lptim5 = {
 	.gate_id = GATE_LPTIM5,
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim5", FLEXGEN_41, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_lptim5_am = {
+	.gate_id = GATE_LPTIM5AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lptim5_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* LPUART */
 static struct clk_stm32_gate ck_icn_p_lpuart1 = {
 	.gate_id = GATE_LPUART1,
@@ -1198,6 +1323,11 @@ static struct clk_stm32_gate ck_ker_lpuart1 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lpuart1", FLEXGEN_39, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_lpuart1_am = {
+	.gate_id = GATE_LPUART1AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_lpuart1_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* MCO1 & MCO2 */
 static struct clk_stm32_composite ck_mco1 = {
 	.gate_id = GATE_MCO1,
@@ -1432,6 +1562,11 @@ static struct clk_stm32_gate ck_ker_spi8 = {
 	.hw.init = CLK_HW_INIT_INDEX("ck_ker_spi8", FLEXGEN_37, &clk_stm32_gate_ops, 0),
 };
 
+static struct clk_stm32_gate ck_ker_spi8_am = {
+	.gate_id = GATE_SPI8AM,
+	.hw.init = CLK_HW_INIT_INDEX("ck_ker_spi8_am", MSI_KER, &clk_stm32_gate_ops, 0),
+};
+
 /* Timers */
 static struct clk_stm32_gate ck_icn_p_tim2 = {
 	.gate_id = GATE_TIM2,
@@ -2010,14 +2145,34 @@ static const struct clock_config stm32mp25_clock_cfg[] = {
 	STM32_GATE_CFG(CK_KER_CSIPHY, ck_ker_csiphy, SEC_RIFSC(86)),
 	STM32_GATE_CFG(CK_KER_USBTC, ck_ker_usbtc, SEC_RIFSC(69)),
 	STM32_GATE_CFG(CK_KER_I3C4, ck_ker_i3c4, SEC_RIFSC(117)),
+	STM32_GATE_CFG(CK_I3C4_AM, ck_ker_i3c4_am, SEC_RIFSC(117)),
 	STM32_GATE_CFG(CK_KER_SPI8, ck_ker_spi8, SEC_RIFSC(29)),
+	STM32_GATE_CFG(CK_SPI8_AM, ck_ker_spi8_am, SEC_RIFSC(29)),
 	STM32_GATE_CFG(CK_KER_I2C8, ck_ker_i2c8, SEC_RIFSC(48)),
+	STM32_GATE_CFG(CK_I2C8_AM, ck_ker_i2c8_am, SEC_RIFSC(48)),
 	STM32_GATE_CFG(CK_KER_LPUART1, ck_ker_lpuart1, SEC_RIFSC(40)),
+	STM32_GATE_CFG(CK_LPUART1_AM, ck_ker_lpuart1_am, SEC_RIFSC(40)),
 	STM32_GATE_CFG(CK_KER_LPTIM3, ck_ker_lptim3, SEC_RIFSC(19)),
+	STM32_GATE_CFG(CK_LPTIM3_AM, ck_ker_lptim3_am, SEC_RIFSC(19)),
 	STM32_GATE_CFG(CK_KER_LPTIM4, ck_ker_lptim4, SEC_RIFSC(20)),
+	STM32_GATE_CFG(CK_LPTIM4_AM, ck_ker_lptim4_am, SEC_RIFSC(20)),
 	STM32_GATE_CFG(CK_KER_LPTIM5, ck_ker_lptim5, SEC_RIFSC(21)),
+	STM32_GATE_CFG(CK_LPTIM5_AM, ck_ker_lptim5_am, SEC_RIFSC(21)),
 	STM32_GATE_CFG(CK_KER_ADF1, ck_ker_adf1, SEC_RIFSC(55)),
+	STM32_GATE_CFG(CK_ADF1_AM, ck_ker_adf1_am, SEC_RIFSC(55)),
 	STM32_GATE_CFG(CK_CPU3, ck_cpu3, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_CPU3_AM, ck_cpu3_am, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_ADF1_C3, ck_c3_adf1, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_GPIOZ_C3, ck_c3_gpioz, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_I2C8_C3, ck_c3_i2c8, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_I3C4_C3, ck_c3_i3c4, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_LPDMA_C3, ck_c3_lpdma, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_LPTIM3_C3, ck_c3_lptim3, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_LPTIM4_C3, ck_c3_lptim4, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_LPTIM5_C3, ck_c3_lptim5, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_LPUART1_C3, ck_c3_lpuart1, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_RTC_C3, ck_c3_rtc, SEC_RIFRCC(C3)),
+	STM32_GATE_CFG(CK_SPI8_C3, ck_c3_spi8, SEC_RIFRCC(C3)),
 	STM32_GATE_CFG(CK_KER_SDMMC1, ck_ker_sdmmc1, SEC_RIFSC(76)),
 	STM32_GATE_CFG(CK_KER_SDMMC2, ck_ker_sdmmc2, SEC_RIFSC(77)),
 	STM32_GATE_CFG(CK_KER_SDMMC3, ck_ker_sdmmc3, SEC_RIFSC(78)),
@@ -2522,6 +2677,14 @@ static unsigned long cs_stm32_timer_recalc_rate(struct clk_stm32_clock_data *dat
 		.clks		= (struct clk_summary *[]) {  &cs_##_parent },	\
 	}
 
+#define CS_GATE_NO_PARENT(_name, _gate)				\
+	static struct clk_summary cs_##_name = {				\
+		.name		= #_name,					\
+		.gate_id	= (_gate),					\
+		.is_enabled	= cs_stm32_gate_is_enabled,			\
+		.nb_parents	= 0,						\
+	}
+
 #define CS_DIV(_name, _parent, _div)\
 	static struct clk_summary cs_##_name = {				\
 		.name		= #_name,					\
@@ -2613,6 +2776,9 @@ CS_OSC_INT(lsi_ck, GATE_LSI);
 CS_OSC_INT(msi_ck, GATE_MSI);
 CS_OSC_EXT(hse_ck, GATE_HSE);
 CS_OSC_EXT(lse_ck, GATE_LSE);
+CS_OSC_INT(hsi_ker_ck, GATE_HSI_KER);
+CS_OSC_EXT(hse_ker_ck, GATE_HSE_KER);
+CS_OSC_INT(msi_ker_ck, GATE_MSI_KER);
 
 CS_EXT(spdifsymb);
 CS_EXT(i2sckin);
@@ -2724,6 +2890,21 @@ CS_GATE_DIV(ck_icn_apbdbg, ck_icn_ls_mcu, GATE_DBG, DIV_APBDBG);
 CS_STM32_TIMER(ck_timg1, ck_icn_apb1, RCC_APB1DIVR, RCC_TIMG1PRER);
 CS_STM32_TIMER(ck_timg2, ck_icn_apb2, RCC_APB2DIVR, RCC_TIMG2PRER);
 
+CS_GATE(ck_cpu3, ck_icn_hs_mcu, GATE_C3);
+CS_GATE(ck_cpu3_am, ck_icn_hs_mcu, GATE_C3AM);
+
+CS_GATE_NO_PARENT(ck_c3_adf1, GATE_ADF1C3);
+CS_GATE_NO_PARENT(ck_c3_gpioz, GATE_GPIOZC3);
+CS_GATE_NO_PARENT(ck_c3_i2c8, GATE_I2C8C3);
+CS_GATE_NO_PARENT(ck_c3_i3c4, GATE_I3C4C3);
+CS_GATE_NO_PARENT(ck_c3_lpdma, GATE_LPDMAC3);
+CS_GATE_NO_PARENT(ck_c3_lptim3, GATE_LPTIM3C3);
+CS_GATE_NO_PARENT(ck_c3_lptim4, GATE_LPTIM4C3);
+CS_GATE_NO_PARENT(ck_c3_lptim5, GATE_LPTIM5C3);
+CS_GATE_NO_PARENT(ck_c3_lpuart1, GATE_LPUART1C3);
+CS_GATE_NO_PARENT(ck_c3_rtc, GATE_RTCC3);
+CS_GATE_NO_PARENT(ck_c3_spi8, GATE_SPI8C3);
+
 CS_GATE(ck_icn_s_sysram, ck_icn_hs_mcu, GATE_SYSRAM);
 CS_GATE(ck_icn_s_vderam, ck_icn_hs_mcu, GATE_VDERAM);
 CS_GATE(ck_icn_s_retram, ck_icn_hs_mcu, GATE_RETRAM);
@@ -2741,6 +2922,7 @@ CS_GATE(ck_icn_p_hpdma2, ck_icn_ls_mcu, GATE_HPDMA2);
 CS_GATE(ck_icn_p_hpdma3, ck_icn_ls_mcu, GATE_HPDMA3);
 CS_GATE(ck_icn_p_ipcc1, ck_icn_ls_mcu, GATE_IPCC1);
 CS_GATE(ck_icn_p_ipcc2, ck_icn_ls_mcu, GATE_IPCC2);
+CS_GATE(ck_icn_p_ipcc2_am, ck_icn_ls_mcu, GATE_IPCC2AM);
 CS_GATE(ck_icn_p_cci, ck_icn_ls_mcu, GATE_CCI);
 CS_GATE(ck_icn_p_crc, ck_icn_ls_mcu, GATE_CRC);
 CS_GATE(ck_icn_p_ospiiom, ck_icn_ls_mcu, GATE_OSPIIOM);
@@ -2765,10 +2947,13 @@ CS_GATE(ck_icn_s_lpsram1, ck_icn_ls_mcu, GATE_LPSRAM1);
 CS_GATE(ck_icn_s_lpsram2, ck_icn_ls_mcu, GATE_LPSRAM2);
 CS_GATE(ck_icn_s_lpsram3, ck_icn_ls_mcu, GATE_LPSRAM3);
 CS_GATE(ck_icn_p_gpioz, ck_icn_ls_mcu, GATE_GPIOZ);
+CS_GATE(ck_icn_p_gpioz_am, ck_icn_ls_mcu, GATE_GPIOZAM);
 CS_GATE(ck_icn_p_lpdma, ck_icn_ls_mcu, GATE_LPDMA);
+CS_GATE(ck_icn_p_lpdma_am, ck_icn_ls_mcu, GATE_LPDMAAM);
 CS_GATE(ck_icn_p_adf1, ck_icn_ls_mcu, GATE_ADF1);
 CS_GATE(ck_icn_p_hsem, ck_icn_ls_mcu, GATE_HSEM);
 CS_GATE(ck_icn_p_rtc, ck_icn_ls_mcu, GATE_RTC);
+CS_GATE(ck_icn_p_rtc_am, ck_icn_ls_mcu, GATE_RTCAM);
 CS_GATE(ck_icn_p_iwdg5, ck_icn_ls_mcu, GATE_IWDG5);
 CS_GATE(ck_icn_p_wwdg2, ck_icn_ls_mcu, GATE_WWDG2);
 CS_GATE(ck_icn_s_stm, ck_icn_ls_mcu, GATE_STM);
@@ -2931,13 +3116,21 @@ CS_GATE(ck_ker_csi2phy, ck_flexgen_31, GATE_CSI);
 CS_GATE(ck_ker_stgen, ck_flexgen_33, GATE_STGEN);
 CS_GATE(ck_ker_usbtc, ck_flexgen_35, GATE_USBTC);
 CS_GATE(ck_ker_i3c4, ck_flexgen_36, GATE_I3C4);
+CS_GATE(ck_ker_i3c4_am, msi_ker_ck, GATE_I3C4AM);
 CS_GATE(ck_ker_spi8, ck_flexgen_37, GATE_SPI8);
+CS_GATE(ck_ker_spi8_am, msi_ker_ck, GATE_SPI8AM);
 CS_GATE(ck_ker_i2c8, ck_flexgen_38, GATE_I2C8);
+CS_GATE(ck_ker_i2c8_am, msi_ker_ck, GATE_I2C8AM);
 CS_GATE(ck_ker_lpuart1, ck_flexgen_39, GATE_LPUART1);
+CS_GATE(ck_ker_lpuart1_am, msi_ker_ck, GATE_LPUART1AM);
 CS_GATE(ck_ker_lptim3, ck_flexgen_40, GATE_LPTIM3);
+CS_GATE(ck_ker_lptim3_am, msi_ker_ck, GATE_LPTIM3AM);
 CS_GATE(ck_ker_lptim4, ck_flexgen_41, GATE_LPTIM4);
+CS_GATE(ck_ker_lptim4_am, msi_ker_ck, GATE_LPTIM4AM);
 CS_GATE(ck_ker_lptim5, ck_flexgen_41, GATE_LPTIM5);
+CS_GATE(ck_ker_lptim5_am, msi_ker_ck, GATE_LPTIM5AM);
 CS_GATE(ck_ker_adf1, ck_flexgen_42, GATE_ADF1);
+CS_GATE(ck_ker_adf1_am, msi_ker_ck, GATE_ADF1AM);
 CS_GATE(ck_ker_tsdbg, ck_flexgen_43, GATE_DBG);
 CS_GATE(ck_ker_tpiu, ck_flexgen_44, GATE_TRACE);
 CS_GATE(ck_icn_m_etr, ck_flexgen_45, GATE_ETR);
@@ -3028,6 +3221,9 @@ static struct clk_summary *stm32mp25_clock_summary[] = {
 	CS_CLOCK(msi_ck),
 	CS_CLOCK(hse_ck),
 	CS_CLOCK(lse_ck),
+	CS_CLOCK(hsi_ker_ck),
+	CS_CLOCK(hse_ker_ck),
+	CS_CLOCK(msi_ker_ck),
 	CS_CLOCK(spdifsymb),
 	CS_CLOCK(i2sckin),
 	CS_CLOCK(txbyteclk),
@@ -3113,6 +3309,19 @@ static struct clk_summary *stm32mp25_clock_summary[] = {
 	CS_CLOCK(ck_icn_apbdbg),
 	CS_CLOCK(ck_timg1),
 	CS_CLOCK(ck_timg2),
+	CS_CLOCK(ck_cpu3),
+	CS_CLOCK(ck_cpu3_am),
+	CS_CLOCK(ck_c3_adf1),
+	CS_CLOCK(ck_c3_gpioz),
+	CS_CLOCK(ck_c3_i2c8),
+	CS_CLOCK(ck_c3_i3c4),
+	CS_CLOCK(ck_c3_lpdma),
+	CS_CLOCK(ck_c3_lptim3),
+	CS_CLOCK(ck_c3_lptim4),
+	CS_CLOCK(ck_c3_lptim5),
+	CS_CLOCK(ck_c3_lpuart1),
+	CS_CLOCK(ck_c3_rtc),
+	CS_CLOCK(ck_c3_spi8),
 	CS_CLOCK(ck_icn_s_sysram),
 	CS_CLOCK(ck_icn_s_vderam),
 	CS_CLOCK(ck_icn_s_retram),
@@ -3130,6 +3339,7 @@ static struct clk_summary *stm32mp25_clock_summary[] = {
 	CS_CLOCK(ck_icn_p_hpdma3),
 	CS_CLOCK(ck_icn_p_ipcc1),
 	CS_CLOCK(ck_icn_p_ipcc2),
+	CS_CLOCK(ck_icn_p_ipcc2_am),
 	CS_CLOCK(ck_icn_p_cci),
 	CS_CLOCK(ck_icn_p_crc),
 	CS_CLOCK(ck_icn_p_ospiiom),
@@ -3154,10 +3364,13 @@ static struct clk_summary *stm32mp25_clock_summary[] = {
 	CS_CLOCK(ck_icn_s_lpsram2),
 	CS_CLOCK(ck_icn_s_lpsram3),
 	CS_CLOCK(ck_icn_p_gpioz),
+	CS_CLOCK(ck_icn_p_gpioz_am),
 	CS_CLOCK(ck_icn_p_lpdma),
+	CS_CLOCK(ck_icn_p_lpdma_am),
 	CS_CLOCK(ck_icn_p_adf1),
 	CS_CLOCK(ck_icn_p_hsem),
 	CS_CLOCK(ck_icn_p_rtc),
+	CS_CLOCK(ck_icn_p_rtc_am),
 	CS_CLOCK(ck_icn_p_iwdg5),
 	CS_CLOCK(ck_icn_p_wwdg2),
 	CS_CLOCK(ck_icn_s_stm),
@@ -3320,13 +3533,21 @@ static struct clk_summary *stm32mp25_clock_summary[] = {
 	CS_CLOCK(ck_ker_stgen),
 	CS_CLOCK(ck_ker_usbtc),
 	CS_CLOCK(ck_ker_i3c4),
+	CS_CLOCK(ck_ker_i3c4_am),
 	CS_CLOCK(ck_ker_spi8),
+	CS_CLOCK(ck_ker_spi8_am),
 	CS_CLOCK(ck_ker_i2c8),
+	CS_CLOCK(ck_ker_i2c8_am),
 	CS_CLOCK(ck_ker_lpuart1),
+	CS_CLOCK(ck_ker_lpuart1_am),
 	CS_CLOCK(ck_ker_lptim3),
+	CS_CLOCK(ck_ker_lptim3_am),
 	CS_CLOCK(ck_ker_lptim4),
+	CS_CLOCK(ck_ker_lptim4_am),
 	CS_CLOCK(ck_ker_lptim5),
+	CS_CLOCK(ck_ker_lptim5_am),
 	CS_CLOCK(ck_ker_adf1),
+	CS_CLOCK(ck_ker_adf1_am),
 	CS_CLOCK(ck_ker_tsdbg),
 	CS_CLOCK(ck_ker_tpiu),
 	CS_CLOCK(ck_icn_m_etr),
-- 
2.39.5

