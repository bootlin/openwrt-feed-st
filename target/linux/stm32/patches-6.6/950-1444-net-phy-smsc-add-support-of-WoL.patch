From df28014b6ac1da2bf7393fa2eadc9f08135ec991 Mon Sep 17 00:00:00 2001
From: Christophe Roullier <christophe.roullier@st.com>
Date: Wed, 23 Feb 2022 13:02:23 +0100
Subject: [PATCH] net: phy: smsc: add support of WoL

The device support PHY layer WoL event detection of Magic Packet.
The WoL detection is configured to assert nPME pin

Signed-off-by: Christophe Roullier <christophe.roullier@st.com>
Change-Id: I1315d961a7af8a304d674a116f959403cb0e86e7
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/309531
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Alexandre TORGUE <alexandre.torgue@foss.st.com>
Domain-Review: Alexandre TORGUE <alexandre.torgue@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/407899
Tested-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Reviewed-by: Eric FOURMONT <eric.fourmont-ext@st.com>
Domain-Review: Eric FOURMONT <eric.fourmont-ext@st.com>
---
 drivers/net/phy/smsc.c  | 91 +++++++++++++++++++++++++++++++++++++++--
 include/linux/smscphy.h | 20 +++++++++
 2 files changed, 107 insertions(+), 4 deletions(-)

--- a/drivers/net/phy/smsc.c
+++ b/drivers/net/phy/smsc.c
@@ -51,6 +51,10 @@ struct smsc_phy_priv {
 	unsigned int edpd_enable:1;
 	unsigned int edpd_mode_set_by_user:1;
 	unsigned int edpd_max_wait_ms;
+	bool wol_arp;
+	u16 intmask;
+	bool energy_enable;
+	bool wakeup_enable;
 };
 
 static int smsc_phy_ack_interrupt(struct phy_device *phydev)
@@ -62,6 +66,7 @@ static int smsc_phy_ack_interrupt(struct
 
 int smsc_phy_config_intr(struct phy_device *phydev)
 {
+	struct smsc_phy_priv *priv = phydev->priv;
 	int rc;
 
 	if (phydev->interrupts == PHY_INTERRUPT_ENABLED) {
@@ -69,9 +74,12 @@ int smsc_phy_config_intr(struct phy_devi
 		if (rc)
 			return rc;
 
-		rc = phy_write(phydev, MII_LAN83C185_IM,
-			       MII_LAN83C185_ISF_INT_PHYLIB_EVENTS);
+		if (priv->wakeup_enable)
+			priv->intmask |= MII_LAN83C185_ISF_INT8;
+		rc = phy_write(phydev, MII_LAN83C185_IM, priv->intmask);
 	} else {
+		priv->intmask = 0;
+
 		rc = phy_write(phydev, MII_LAN83C185_IM, 0);
 		if (rc)
 			return rc;
@@ -97,6 +105,7 @@ static int smsc_phy_config_edpd(struct p
 
 irqreturn_t smsc_phy_handle_interrupt(struct phy_device *phydev)
 {
+	struct smsc_phy_priv *priv = phydev->priv;
 	int irq_status;
 
 	irq_status = phy_read(phydev, MII_LAN83C185_ISF);
@@ -107,7 +116,7 @@ irqreturn_t smsc_phy_handle_interrupt(st
 		return IRQ_NONE;
 	}
 
-	if (!(irq_status & MII_LAN83C185_ISF_INT_PHYLIB_EVENTS))
+	if (!(irq_status &  priv->intmask))
 		return IRQ_NONE;
 
 	phy_trigger_machine(phydev);
@@ -116,6 +125,44 @@ irqreturn_t smsc_phy_handle_interrupt(st
 }
 EXPORT_SYMBOL_GPL(smsc_phy_handle_interrupt);
 
+static int smsc_phy_config_wol(struct phy_device *phydev)
+{
+	int i, wol_ctrl, wol_filter;
+	u16 pwd[3] = {0, 0, 0};
+
+	/* Write @MAC in LAN8742_MMD3_MAC_ADDRA/B/C registers */
+	const u8 *mac_addr = phydev->attached_dev->dev_addr;
+	/* Store the device address for the magic packet */
+	for (i = 0; i < ARRAY_SIZE(pwd); i++)
+		pwd[i] = mac_addr[5 - i * 2] << 8 | mac_addr[5 - (i * 2 + 1)];
+
+	phy_write_mmd(phydev, 3, LAN8742_MMD3_MAC_ADDRA,
+		      pwd[0]);
+
+	phy_write_mmd(phydev, 3, LAN8742_MMD3_MAC_ADDRB,
+		      pwd[1]);
+
+	phy_write_mmd(phydev, 3, LAN8742_MMD3_MAC_ADDRC,
+		      pwd[2]);
+
+	/* Configure WoL */
+	wol_ctrl = phy_read_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_CTRL);
+
+	/* Configure LED2 functions as nPME, WoL Configured, Magic Packet Enable */
+	wol_ctrl |= (LAN8742_MMD3_WUCSR_LED2_AS_NPME | LAN8742_MMD3_WUCSR_WOL | LAN8742_MMD3_WUCSR_MPEN);
+	phy_write_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_CTRL,
+		      wol_ctrl);
+
+	wol_filter = phy_read_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_FILTER);
+
+	/* Configure Filter enabled, Address Match Enable */
+	wol_filter |= (LAN8742_MMD3_WUF_CFGA_FE | LAN8742_MMD3_WUF_CFGA_AME);
+	phy_write_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_FILTER,
+		      wol_filter);
+
+	return 0;
+}
+
 int smsc_phy_config_init(struct phy_device *phydev)
 {
 	struct smsc_phy_priv *priv = phydev->priv;
@@ -123,6 +170,9 @@ int smsc_phy_config_init(struct phy_devi
 	if (!priv)
 		return 0;
 
+	if (priv->wakeup_enable)
+		smsc_phy_config_wol(phydev);
+
 	/* don't use EDPD in irq mode except overridden by user */
 	if (!priv->edpd_mode_set_by_user && phydev->irq != PHY_POLL)
 		priv->edpd_enable = false;
@@ -150,6 +200,17 @@ static int smsc_phy_reset(struct phy_dev
 	return genphy_soft_reset(phydev);
 }
 
+static int smsc_phy_suspend(struct phy_device *phydev)
+{
+	struct device *dev = &phydev->mdio.dev;
+
+	/* do not power down PHY when PHY enable power/wakeup */
+	if (!device_may_wakeup(dev))
+		return genphy_suspend(phydev);
+
+	return 0;
+}
+
 static int lan87xx_config_aneg(struct phy_device *phydev)
 {
 	int rc;
@@ -254,6 +315,20 @@ int lan87xx_read_status(struct phy_devic
 			return rc;
 	}
 
+	if (priv->wakeup_enable) {
+		/* Check status of WUCSR bits 7:4 : Perfect DA Frame, Remote Wakeup
+		 * Frame, Magic Packet, Broadcast Frame Received, if one of these bits
+		 * are 1, clearing them*/
+		int wol_ctrl = phy_read_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_CTRL);
+
+		if ((wol_ctrl & (LAN8742_MMD3_WUCSR_PFDA_FR | LAN8742_MMD3_WUCSR_WUFR |
+				 LAN8742_MMD3_WUCSR_MPR | LAN8742_MMD3_WUCSR_BCAST_FR)) > 0) {
+			wol_ctrl |= (LAN8742_MMD3_WUCSR_PFDA_FR | LAN8742_MMD3_WUCSR_WUFR |
+				     LAN8742_MMD3_WUCSR_MPR | LAN8742_MMD3_WUCSR_BCAST_FR);
+			phy_write_mmd(phydev, 3, LAN8742_MMD3_WAKEUP_CTRL,
+				      wol_ctrl);
+		}
+	}
 	return err;
 }
 EXPORT_SYMBOL_GPL(lan87xx_read_status);
@@ -376,16 +451,24 @@ int smsc_phy_probe(struct phy_device *ph
 	struct smsc_phy_priv *priv;
 	struct clk *refclk;
 
+	struct device_node *of_node = dev->of_node;
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
 		return -ENOMEM;
 
 	priv->edpd_enable = true;
 	priv->edpd_max_wait_ms = EDPD_MAX_WAIT_DFLT_MS;
+	priv->energy_enable = true;
+	priv->wakeup_enable = false;
 
 	if (device_property_present(dev, "smsc,disable-energy-detect"))
 		priv->edpd_enable = false;
 
+	if (of_property_read_bool(of_node, "wakeup-source")) {
+		device_set_wakeup_capable(dev, true);
+		priv->wakeup_enable = true;
+	}
+
 	phydev->priv = priv;
 
 	/* Make clk optional to keep DTB backward compatibility. */
@@ -581,7 +664,7 @@ static struct phy_driver smsc_phy_driver
 	.get_tunable	= smsc_phy_get_tunable,
 	.set_tunable	= smsc_phy_set_tunable,
 
-	.suspend	= genphy_suspend,
+	.suspend	= smsc_phy_suspend,
 	.resume		= genphy_resume,
 } };
 
--- a/include/linux/smscphy.h
+++ b/include/linux/smscphy.h
@@ -14,6 +14,7 @@
 #define MII_LAN83C185_ISF_INT5 (1<<5) /* Remote Fault Detected */
 #define MII_LAN83C185_ISF_INT6 (1<<6) /* Auto-Negotiation complete */
 #define MII_LAN83C185_ISF_INT7 (1<<7) /* ENERGYON */
+#define MII_LAN83C185_ISF_INT8 (1<<8) /* Wake on LAN */
 
 #define MII_LAN83C185_ISF_INT_ALL (0x0e)
 
@@ -28,6 +29,25 @@
 #define MII_LAN83C185_MODE_POWERDOWN 0xC0 /* Power Down mode */
 #define MII_LAN83C185_MODE_ALL       0xE0 /* All capable mode */
 
+/* MMD 3 Registers */
+#define	LAN8742_MMD3_WAKEUP_CTRL	(32784)
+#define	LAN8742_MMD3_WUCSR_LED2_AS_NPME BIT(12)
+#define	LAN8742_MMD3_WUCSR_WOL		BIT(8)
+#define	LAN8742_MMD3_WUCSR_PFDA_FR	BIT(7)
+#define	LAN8742_MMD3_WUCSR_WUFR		BIT(6)
+#define	LAN8742_MMD3_WUCSR_MPR		BIT(5)
+#define	LAN8742_MMD3_WUCSR_BCAST_FR	BIT(4)
+#define	LAN8742_MMD3_WUCSR_MPEN		BIT(1)
+
+#define	LAN8742_MMD3_WAKEUP_FILTER	(32785)
+#define	LAN8742_MMD3_WUF_CFGA_FE	BIT(15)
+#define	LAN8742_MMD3_WUF_CFGA_AME	BIT(10)
+
+#define	LAN8742_MMD3_MAC_ADDRA		(32865)
+#define	LAN8742_MMD3_MAC_ADDRB		(32866)
+#define	LAN8742_MMD3_MAC_ADDRC		(32867)
+#define	LAN8742_MMD3_PME_ASSERT_DELAY	(32868)
+
 int smsc_phy_config_intr(struct phy_device *phydev);
 irqreturn_t smsc_phy_handle_interrupt(struct phy_device *phydev);
 int smsc_phy_config_init(struct phy_device *phydev);
