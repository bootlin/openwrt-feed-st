From dd680178e93701a414477e4cc64f312b263b41fb Mon Sep 17 00:00:00 2001
From: Olivier Moysan <olivier.moysan@foss.st.com>
Date: Thu, 5 Sep 2024 15:38:48 +0200
Subject: [PATCH] counter: stm32-lptimer-cnt: add pm runtime support

Add pm runtime support to timers counter driver.
Move clock enable/disable to pm runtime callbacks, and rely on
pm framework to call them.

Change-Id: Id2838e16c3ef14ee5c8eb2e0dd39c4e5e046b4d2
Signed-off-by: Olivier Moysan <olivier.moysan@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/402587
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/counter/stm32-lptimer-cnt.c | 45 ++++++++++++++++++++++++-----
 1 file changed, 37 insertions(+), 8 deletions(-)

--- a/drivers/counter/stm32-lptimer-cnt.c
+++ b/drivers/counter/stm32-lptimer-cnt.c
@@ -17,6 +17,7 @@
 #include <linux/module.h>
 #include <linux/pinctrl/consumer.h>
 #include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
 #include <linux/types.h>
 
 struct stm32_lptim_cnt {
@@ -53,7 +54,10 @@ static int stm32_lptim_set_enable_state(
 		return ret;
 
 	if (!enable) {
-		clk_disable(priv->clk);
+		ret = pm_runtime_put_sync_suspend(priv->dev);
+		if (ret < 0)
+			return ret;
+
 		priv->enabled = false;
 		return 0;
 	}
@@ -79,8 +83,8 @@ static int stm32_lptim_set_enable_state(
 	if (ret)
 		return ret;
 
-	ret = clk_enable(priv->clk);
-	if (ret) {
+	ret = pm_runtime_resume_and_get(priv->dev);
+	if (ret < 0) {
 		regmap_write(priv->regmap, STM32_LPTIM_CR, 0);
 		return ret;
 	}
@@ -443,6 +447,10 @@ static int stm32_lptim_cnt_probe(struct
 
 	platform_set_drvdata(pdev, priv);
 
+	ret = devm_pm_runtime_enable(&pdev->dev);
+	if (ret)
+		return ret;
+
 	ret = devm_counter_add(&pdev->dev, counter);
 	if (ret < 0)
 		return dev_err_probe(&pdev->dev, ret, "Failed to add counter\n");
@@ -450,7 +458,6 @@ static int stm32_lptim_cnt_probe(struct
 	return 0;
 }
 
-#ifdef CONFIG_PM_SLEEP
 static int stm32_lptim_cnt_suspend(struct device *dev)
 {
 	struct stm32_lptim_cnt *priv = dev_get_drvdata(dev);
@@ -495,10 +502,32 @@ static int stm32_lptim_cnt_resume(struct
 
 	return 0;
 }
-#endif
 
-static SIMPLE_DEV_PM_OPS(stm32_lptim_cnt_pm_ops, stm32_lptim_cnt_suspend,
-			 stm32_lptim_cnt_resume);
+static int stm32_lptim_cnt_runtime_suspend(struct device *dev)
+{
+	struct stm32_lptim_cnt *priv = dev_get_drvdata(dev);
+
+	clk_disable(priv->clk);
+
+	return 0;
+}
+
+static int stm32_lptim_cnt_runtime_resume(struct device *dev)
+{
+	struct stm32_lptim_cnt *priv = dev_get_drvdata(dev);
+	int ret;
+
+	ret = clk_enable(priv->clk);
+	if (ret)
+		dev_err(dev, "failed to enable clock. Error [%d]\n", ret);
+
+	return ret;
+}
+
+static const struct dev_pm_ops stm32_lptim_cnt_pm_ops = {
+	SYSTEM_SLEEP_PM_OPS(stm32_lptim_cnt_suspend, stm32_lptim_cnt_resume)
+	RUNTIME_PM_OPS(stm32_lptim_cnt_runtime_suspend, stm32_lptim_cnt_runtime_resume, NULL)
+};
 
 static const struct of_device_id stm32_lptim_cnt_of_match[] = {
 	{ .compatible = "st,stm32-lptimer-counter", },
@@ -513,7 +542,7 @@ static struct platform_driver stm32_lpti
 	.driver = {
 		.name = "stm32-lptimer-counter",
 		.of_match_table = stm32_lptim_cnt_of_match,
-		.pm = &stm32_lptim_cnt_pm_ops,
+		.pm = pm_ptr(&stm32_lptim_cnt_pm_ops),
 	},
 };
 module_platform_driver(stm32_lptim_cnt_driver);
