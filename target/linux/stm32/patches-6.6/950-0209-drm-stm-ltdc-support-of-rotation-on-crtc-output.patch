From 8d235ec212fa32ebec6e3135293c695f97362446 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 30 Jun 2023 10:13:52 +0200
Subject: [PATCH] drm/stm: ltdc: support of rotation on crtc output

The LTDC can rotate the blended result, by writing the full-blended
frame in the external memory, reading it back and displaying.

Change-Id: Ief11c9f2985df971c0c3142984404de71affd6a7
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 350 ++++++++++++++++++++++++++++++-------
 drivers/gpu/drm/stm/ltdc.h |   3 +
 2 files changed, 289 insertions(+), 64 deletions(-)

diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index 762b85a4637d..2a162ee0be82 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -16,6 +16,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_graph.h>
+#include <linux/of_reserved_mem.h>
 #include <linux/pinctrl/consumer.h>
 #include <linux/platform_device.h>
 #include <linux/pm_runtime.h>
@@ -34,6 +35,8 @@
 #include <drm/drm_gem_atomic_helper.h>
 #include <drm/drm_gem_dma_helper.h>
 #include <drm/drm_of.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_plane_helper.h>
 #include <drm/drm_probe_helper.h>
 #include <drm/drm_simple_kms_helper.h>
 #include <drm/drm_vblank.h>
@@ -82,6 +85,10 @@
 #define LTDC_CDSR	0x0048		/* Current Display Status */
 #define LTDC_EDCR	0x0060		/* External Display Control */
 #define LTDC_CCRCR	0x007C		/* Computed CRC value */
+#define LTDC_RB0AR	0x0080		/* Rotation Buffer 0 address */
+#define LTDC_RB1AR	0x0084		/* Rotation Buffer 1 address */
+#define LTDC_RBPR	0x0088		/* Rotation Buffer Pitch */
+#define LTDC_RIFCR	0x008C		/* Rotation Intermediate Frame Color */
 #define LTDC_FUT	0x0090		/* Fifo underrun Threshold */
 
 /* Layer register offsets */
@@ -125,6 +132,7 @@
 #define TWCR_TOTALW	GENMASK(27, 16)	/* TOTAL Width */
 
 #define GCR_LTDCEN	BIT(0)		/* LTDC ENable */
+#define GCR_ROTEN	BIT(2)		/* ROTation ENable */
 #define GCR_DEN		BIT(16)		/* Dither ENable */
 #define GCR_CRCEN	BIT(19)		/* CRC ENable */
 #define GCR_PCPOL	BIT(28)		/* Pixel Clock POLarity-Inverted */
@@ -155,6 +163,7 @@
 #define GC2R_DPAEN	BIT(3)		/* Dual-Port Ability ENabled */
 #define GC2R_BW		GENMASK(6, 4)	/* Bus Width (log2 of nb of bytes) */
 #define GC2R_EDCEN	BIT(7)		/* External Display Control ENabled */
+#define GC2R_ROTA	BIT(10)		/* ROTAtion support ability */
 
 #define SRCR_IMR	BIT(0)		/* IMmediate Reload */
 #define SRCR_VBR	BIT(1)		/* Vertical Blanking Reload */
@@ -171,6 +180,7 @@
 #define IER_RRIE	BIT(3)		/* Register Reload Interrupt Enable */
 #define IER_FUEIE	BIT(6)		/* Fifo Underrun Error Interrupt Enable */
 #define IER_CRCIE	BIT(7)		/* CRC Error Interrupt Enable */
+#define IER_FURIE	BIT(8)		/* Fifo Underrun Rotation Interrupt Enable */
 
 #define CPSR_CYPOS	GENMASK(15, 0)	/* Current Y position */
 
@@ -180,6 +190,7 @@
 #define ISR_RRIF	BIT(3)		/* Register Reload Interrupt Flag */
 #define ISR_FUEIF	BIT(6)		/* Fifo Underrun Error Interrupt Flag */
 #define ISR_CRCIF	BIT(7)		/* CRC Error Interrupt Flag */
+#define ISR_FURIF	BIT(8)		/* Fifo Underrun Rotation Interrupt Flag */
 
 #define EDCR_OCYEN	BIT(25)		/* Output Conversion to YCbCr 422: ENable */
 #define EDCR_OCYSEL	BIT(26)		/* Output Conversion to YCbCr 422: SELection of the CCIR */
@@ -729,6 +740,8 @@ static irqreturn_t ltdc_irq_thread(int irq, void *arg)
 		ldev->fifo_err++;
 	if (ldev->irq_status & ISR_FUWIF)
 		ldev->fifo_warn++;
+	if (ldev->irq_status & ISR_FURIF)
+		ldev->fifo_rot++;
 	mutex_unlock(&ldev->err_lock);
 
 	return IRQ_HANDLED;
@@ -778,9 +791,34 @@ static void ltdc_crtc_atomic_enable(struct drm_crtc *crtc,
 {
 	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
 	struct drm_device *ddev = crtc->dev;
+	struct drm_connector_list_iter iter;
+	struct drm_connector *connector = NULL;
+	struct drm_encoder *encoder = NULL, *en_iter;
+	struct drm_display_mode *mode = &crtc->state->adjusted_mode;
+	int orientation = DRM_MODE_PANEL_ORIENTATION_UNKNOWN;
+	u32 pitch, rota0_buf, rota1_buf;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	/* get encoder from crtc */
+	drm_for_each_encoder(en_iter, ddev)
+		if (en_iter->crtc == crtc) {
+			encoder = en_iter;
+			break;
+		}
+
+	if (encoder) {
+		/* Get the connector from encoder */
+		drm_connector_list_iter_begin(ddev, &iter);
+		drm_for_each_connector_iter(connector, &iter)
+			if (connector->encoder == encoder)
+				break;
+		drm_connector_list_iter_end(&iter);
+	}
+
+	if (connector)
+		orientation = connector->display_info.panel_orientation;
+
 	pm_runtime_get_sync(ddev->dev);
 
 	/* Sets the background color value */
@@ -789,6 +827,36 @@ static void ltdc_crtc_atomic_enable(struct drm_crtc *crtc,
 	/* Enable IRQ */
 	regmap_set_bits(ldev->regmap, LTDC_IER, IER_FUWIE | IER_FUEIE | IER_TERRIE);
 
+	if (ldev->caps.crtc_rotation) {
+		rota0_buf = (u32)ldev->rot_mem->base;
+		rota1_buf = (u32)ldev->rot_mem->base + (ldev->rot_mem->size >> 1);
+
+		regmap_write(ldev->regmap, LTDC_RB0AR, rota0_buf);
+		regmap_write(ldev->regmap, LTDC_RB1AR, rota1_buf);
+
+		/*
+		 * LTDC_RBPR register is used define the pitch (line-to-line address increment)
+		 * of the stored rotation buffer. The pitch is proportional to the width of the
+		 * composed display (before rotation) and,(after rotation) proportional to the
+		 * non-raster dimension of the display panel.
+		 */
+		pitch = ((mode->hdisplay + 9) / 10) * 64;
+		regmap_write(ldev->regmap, LTDC_RBPR, pitch);
+
+		DRM_DEBUG_DRIVER("Rotation buffer0 address %x\n", rota0_buf);
+		DRM_DEBUG_DRIVER("Rotation buffer1 address %x\n", rota1_buf);
+		DRM_DEBUG_DRIVER("Rotation buffer picth %x\n", pitch);
+
+		if (orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP ||
+		    orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP) {
+			regmap_set_bits(ldev->regmap, LTDC_GCR, GCR_ROTEN);
+			regmap_set_bits(ldev->regmap, LTDC_IER, IER_FURIE);
+		} else {
+			regmap_clear_bits(ldev->regmap, LTDC_IER, IER_FURIE);
+			regmap_clear_bits(ldev->regmap, LTDC_GCR, GCR_ROTEN);
+		}
+	}
+
 	/* Commit shadow registers = update planes at next vblank */
 	if (!ldev->caps.plane_reg_shadow)
 		regmap_set_bits(ldev->regmap, LTDC_SRCR, SRCR_VBR);
@@ -814,6 +882,9 @@ static void ltdc_crtc_atomic_disable(struct drm_crtc *crtc,
 	/* disable IRQ */
 	regmap_clear_bits(ldev->regmap, LTDC_IER, IER_FUWIE | IER_FUEIE | IER_TERRIE);
 
+	if (ldev->caps.crtc_rotation)
+		regmap_clear_bits(ldev->regmap, LTDC_IER, IER_RRIE);
+
 	/* immediately commit disable of layers before switching off LTDC */
 	if (!ldev->caps.plane_reg_shadow)
 		regmap_set_bits(ldev->regmap, LTDC_SRCR, SRCR_IMR);
@@ -825,6 +896,7 @@ static void ltdc_crtc_atomic_disable(struct drm_crtc *crtc,
 	ldev->transfer_err = 0;
 	ldev->fifo_err = 0;
 	ldev->fifo_warn = 0;
+	ldev->fifo_rot = 0;
 	mutex_unlock(&ldev->err_lock);
 }
 
@@ -898,10 +970,12 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 	struct drm_encoder *encoder = NULL, *en_iter;
 	struct drm_bridge *bridge = NULL, *br_iter;
 	struct drm_display_mode *mode = &crtc->state->adjusted_mode;
+	int orientation = DRM_MODE_PANEL_ORIENTATION_UNKNOWN;
 	u32 hsync, vsync, accum_hbp, accum_vbp, accum_act_w, accum_act_h;
 	u32 total_width, total_height;
 	u32 bus_formats = MEDIA_BUS_FMT_RGB888_1X24;
 	u32 bus_flags = 0;
+	u32 pitch, rota0_buf, rota1_buf;
 	u32 val;
 	int ret;
 
@@ -927,6 +1001,9 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 				break;
 		drm_connector_list_iter_end(&iter);
 	}
+	if (connector)
+		orientation = connector->display_info.panel_orientation;
+
 
 	if (bridge && bridge->timings) {
 		bus_flags = bridge->timings->input_bus_flags;
@@ -982,23 +1059,46 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 	regmap_update_bits(ldev->regmap, LTDC_GCR,
 			   GCR_HSPOL | GCR_VSPOL | GCR_DEPOL | GCR_PCPOL, val);
 
-	/* Set Synchronization size */
-	val = (hsync << 16) | vsync;
-	regmap_update_bits(ldev->regmap, LTDC_SSCR, SSCR_VSH | SSCR_HSW, val);
+	/* check that an output rotation is required */
+	if (ldev->caps.crtc_rotation &&
+	    (orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP ||
+	     orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP)) {
+		/* Set Synchronization size */
+		val = (vsync << 16) | hsync;
+		regmap_update_bits(ldev->regmap, LTDC_SSCR, SSCR_VSH | SSCR_HSW, val);
+
+		/* Set Accumulated Back porch */
+		val = (accum_vbp << 16) | accum_hbp;
+		regmap_update_bits(ldev->regmap, LTDC_BPCR, BPCR_AVBP | BPCR_AHBP, val);
+
+		/* Set Accumulated Active Width */
+		val = (accum_act_h << 16) | accum_act_w;
+		regmap_update_bits(ldev->regmap, LTDC_AWCR, AWCR_AAW | AWCR_AAH, val);
+
+		/* Set total width & height */
+		val = (total_height << 16) | total_width;
+		regmap_update_bits(ldev->regmap, LTDC_TWCR, TWCR_TOTALH | TWCR_TOTALW, val);
 
-	/* Set Accumulated Back porch */
-	val = (accum_hbp << 16) | accum_vbp;
-	regmap_update_bits(ldev->regmap, LTDC_BPCR, BPCR_AVBP | BPCR_AHBP, val);
+		regmap_write(ldev->regmap, LTDC_LIPCR, (accum_act_w + 1));
+	} else {
+		/* Set Synchronization size */
+		val = (hsync << 16) | vsync;
+		regmap_update_bits(ldev->regmap, LTDC_SSCR, SSCR_VSH | SSCR_HSW, val);
+
+		/* Set Accumulated Back porch */
+		val = (accum_hbp << 16) | accum_vbp;
+		regmap_update_bits(ldev->regmap, LTDC_BPCR, BPCR_AVBP | BPCR_AHBP, val);
 
-	/* Set Accumulated Active Width */
-	val = (accum_act_w << 16) | accum_act_h;
-	regmap_update_bits(ldev->regmap, LTDC_AWCR, AWCR_AAW | AWCR_AAH, val);
+		/* Set Accumulated Active Width */
+		val = (accum_act_w << 16) | accum_act_h;
+		regmap_update_bits(ldev->regmap, LTDC_AWCR, AWCR_AAW | AWCR_AAH, val);
 
-	/* Set total width & height */
-	val = (total_width << 16) | total_height;
-	regmap_update_bits(ldev->regmap, LTDC_TWCR, TWCR_TOTALH | TWCR_TOTALW, val);
+		/* Set total width & height */
+		val = (total_width << 16) | total_height;
+		regmap_update_bits(ldev->regmap, LTDC_TWCR, TWCR_TOTALH | TWCR_TOTALW, val);
 
-	regmap_write(ldev->regmap, LTDC_LIPCR, (accum_act_h + 1));
+		regmap_write(ldev->regmap, LTDC_LIPCR, (accum_act_h + 1));
+	}
 
 	/* Configure the output format (hw version dependent) */
 	if (ldev->caps.ycbcr_output) {
@@ -1029,6 +1129,32 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 			break;
 		}
 	}
+
+	if (ldev->caps.crtc_rotation) {
+		rota0_buf = (u32)ldev->rot_mem->base;
+		rota1_buf = (u32)ldev->rot_mem->base + (ldev->rot_mem->size >> 1);
+
+		regmap_write(ldev->regmap, LTDC_RB0AR, rota0_buf);
+		regmap_write(ldev->regmap, LTDC_RB1AR, rota1_buf);
+
+		/*
+		 * LTDC_RBPR register is used define the pitch (line-to-line address increment)
+		 * of the stored rotation buffer. The pitch is proportional to the width of the
+		 * composed display (before rotation) and,(after rotation) proportional to the
+		 * non-raster dimension of the display panel.
+		 */
+		pitch = ((mode->hdisplay + 9) / 10) * 64;
+		regmap_write(ldev->regmap, LTDC_RBPR, pitch);
+
+		DRM_DEBUG_DRIVER("Rotation buffer0 address %x\n", rota0_buf);
+		DRM_DEBUG_DRIVER("Rotation buffer1 address %x\n", rota1_buf);
+		DRM_DEBUG_DRIVER("Rotation buffer picth %x\n", pitch);
+
+		if (ldev->output_rotation == 90 || ldev->output_rotation == 270)
+			regmap_set_bits(ldev->regmap, LTDC_GCR, GCR_ROTEN);
+		else
+			regmap_clear_bits(ldev->regmap, LTDC_GCR, GCR_ROTEN);
+	}
 }
 
 static void ltdc_crtc_atomic_flush(struct drm_crtc *crtc,
@@ -1197,6 +1323,7 @@ static void ltdc_crtc_atomic_print_state(struct drm_printer *p,
 	drm_printf(p, "\ttransfer_error=%d\n", ldev->transfer_err);
 	drm_printf(p, "\tfifo_underrun_error=%d\n", ldev->fifo_err);
 	drm_printf(p, "\tfifo_underrun_warning=%d\n", ldev->fifo_warn);
+	drm_printf(p, "\tfifo_underrun_rotation=%d\n", ldev->fifo_rot);
 	drm_printf(p, "\tfifo_underrun_threshold=%d\n", ldev->fifo_threshold);
 }
 
@@ -1269,46 +1396,115 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 									  plane);
 	struct drm_framebuffer *fb = newstate->fb;
 	u32 lofs = plane->index * LAY_OFS;
-	u32 x0 = newstate->crtc_x;
-	u32 x1 = newstate->crtc_x + newstate->crtc_w - 1;
-	u32 y0 = newstate->crtc_y;
-	u32 y1 = newstate->crtc_y + newstate->crtc_h - 1;
-	u32 src_x, src_y, src_w, src_h;
 	u32 val, pitch_in_bytes, line_length, line_number, ahbp, avbp, bpcr;
 	u32 paddr, paddr1, paddr2;
 	enum ltdc_pix_fmt pf;
+	unsigned int plane_rotation = newstate->rotation;
+	struct drm_connector_list_iter co_iter;
+	struct drm_connector *connector = NULL;
+	struct drm_encoder *encoder = NULL, *en_iter;
+	struct drm_rect dst, src;
+	int orientation = DRM_MODE_PANEL_ORIENTATION_UNKNOWN;
 
 	if (!newstate->crtc || !fb) {
 		DRM_DEBUG_DRIVER("fb or crtc NULL");
 		return;
 	}
 
+	/* get encoder from crtc */
+	drm_for_each_encoder(en_iter, ddev)
+		if (en_iter->crtc == newstate->crtc) {
+			encoder = en_iter;
+			break;
+		}
+
+	if (encoder) {
+		/* Get the connector from encoder */
+		drm_connector_list_iter_begin(ddev, &co_iter);
+		drm_for_each_connector_iter(connector, &co_iter)
+			if (connector->encoder == encoder)
+				break;
+		drm_connector_list_iter_end(&co_iter);
+
+		if (connector)
+			orientation = connector->display_info.panel_orientation;
+	}
+
 	/* convert src_ from 16:16 format */
-	src_x = newstate->src_x >> 16;
-	src_y = newstate->src_y >> 16;
-	src_w = newstate->src_w >> 16;
-	src_h = newstate->src_h >> 16;
+	drm_rect_init(&src, newstate->src_x >> 16, newstate->src_y >> 16,
+		      newstate->src_w >> 16, newstate->src_h >> 16);
+
+	drm_rect_init(&dst, newstate->crtc_x, newstate->crtc_y,
+		      newstate->crtc_w, newstate->crtc_h);
 
-	DRM_DEBUG_DRIVER("plane:%d fb:%d (%dx%d)@(%d,%d) -> (%dx%d)@(%d,%d)\n",
-			 plane->base.id, fb->base.id,
-			 src_w, src_h, src_x, src_y,
-			 newstate->crtc_w, newstate->crtc_h,
-			 newstate->crtc_x, newstate->crtc_y);
+	DRM_DEBUG_DRIVER("plane:%d fb:%d src: " DRM_RECT_FMT " -> crtc: " DRM_RECT_FMT "\n",
+			 plane->base.id, fb->base.id, DRM_RECT_ARG(&src), DRM_RECT_ARG(&dst));
 
 	regmap_read(ldev->regmap, LTDC_BPCR, &bpcr);
 
-	ahbp = (bpcr & BPCR_AHBP) >> 16;
-	avbp = bpcr & BPCR_AVBP;
+	if (ldev->caps.crtc_rotation &&
+	    (orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP ||
+	     orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP)) {
+		avbp = (bpcr & BPCR_AHBP) >> 16;
+		ahbp = bpcr & BPCR_AVBP;
+
+		/* Configures the horizontal start and stop position */
+		val = (dst.x1 + 1 + ahbp) + ((dst.x2 + ahbp) << 16);
+		regmap_write_bits(ldev->regmap, LTDC_L1WHPCR + lofs,
+				  LXWHPCR_WHSTPOS | LXWHPCR_WHSPPOS, val);
 
-	/* Configures the horizontal start and stop position */
-	val = ((x1 + 1 + ahbp) << 16) + (x0 + 1 + ahbp);
-	regmap_write_bits(ldev->regmap, LTDC_L1WHPCR + lofs,
-			  LXWHPCR_WHSTPOS | LXWHPCR_WHSPPOS, val);
+		/* Configures the vertical start and stop position */
+		val = (dst.y1 + 1 + avbp) + ((dst.y2 + avbp) << 16);
+		regmap_write_bits(ldev->regmap, LTDC_L1WVPCR + lofs,
+				  LXWVPCR_WVSTPOS | LXWVPCR_WVSPPOS, val);
+
+		/*
+		 * need to mirroring on X (rotation will switch lines & columns,
+		 * not a real rotate
+		 */
+		if (orientation == DRM_MODE_PANEL_ORIENTATION_RIGHT_UP) {
+			if (plane_rotation & DRM_MODE_REFLECT_X)
+				plane_rotation &= ~DRM_MODE_REFLECT_X;
+			else
+				plane_rotation |= DRM_MODE_REFLECT_X;
+		}
 
-	/* Configures the vertical start and stop position */
-	val = ((y1 + 1 + avbp) << 16) + (y0 + 1 + avbp);
-	regmap_write_bits(ldev->regmap, LTDC_L1WVPCR + lofs,
-			  LXWVPCR_WVSTPOS | LXWVPCR_WVSPPOS, val);
+		/*
+		 * need to mirroring on Y (rotation will switch lines & columns,
+		 * not a real rotate
+		 */
+		if (orientation == DRM_MODE_PANEL_ORIENTATION_LEFT_UP) {
+			if (plane_rotation & DRM_MODE_REFLECT_Y)
+				plane_rotation &= ~DRM_MODE_REFLECT_Y;
+			else
+				plane_rotation |= DRM_MODE_REFLECT_Y;
+		}
+	} else {
+		ahbp = (bpcr & BPCR_AHBP) >> 16;
+		avbp = bpcr & BPCR_AVBP;
+
+		/* Configures the horizontal start and stop position */
+		val = ((dst.x2 + ahbp) << 16) + (dst.x1 + 1 + ahbp);
+		regmap_write_bits(ldev->regmap, LTDC_L1WHPCR + lofs,
+				  LXWHPCR_WHSTPOS | LXWHPCR_WHSPPOS, val);
+
+		/* Configures the vertical start and stop position */
+		val = ((dst.y2 + avbp) << 16) + (dst.y1 + 1 + avbp);
+		regmap_write_bits(ldev->regmap, LTDC_L1WVPCR + lofs,
+				  LXWVPCR_WVSTPOS | LXWVPCR_WVSPPOS, val);
+
+		if (orientation == DRM_MODE_PANEL_ORIENTATION_BOTTOM_UP) {
+			if (plane_rotation & DRM_MODE_REFLECT_X)
+				plane_rotation &= ~DRM_MODE_REFLECT_X;
+			else
+				plane_rotation |= DRM_MODE_REFLECT_X;
+
+			if (plane_rotation & DRM_MODE_REFLECT_Y)
+				plane_rotation &= ~DRM_MODE_REFLECT_Y;
+			else
+				plane_rotation |= DRM_MODE_REFLECT_Y;
+		}
+	}
 
 	/* Specifies the pixel format */
 	pf = to_ltdc_pixelformat(fb->format->format);
@@ -1353,20 +1549,19 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 	/* Sets the FB address */
 	paddr = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 0);
 
-	if (newstate->rotation & DRM_MODE_REFLECT_X)
-		paddr += (fb->format->cpp[0] * (x1 - x0 + 1)) - 1;
+	if (plane_rotation & DRM_MODE_REFLECT_X)
+		paddr += (fb->format->cpp[0] * drm_rect_width(&src)) - 1;
 
-	if (newstate->rotation & DRM_MODE_REFLECT_Y)
-		paddr += (fb->pitches[0] * (y1 - y0));
+	if (plane_rotation & DRM_MODE_REFLECT_Y)
+		paddr += (fb->pitches[0] * (drm_rect_height(&src) - 1));
 
 	DRM_DEBUG_DRIVER("fb: phys 0x%08x", paddr);
 	regmap_write(ldev->regmap, LTDC_L1CFBAR + lofs, paddr);
 
 	/* Configures the color frame buffer pitch in bytes & line length */
-	line_length = fb->format->cpp[0] *
-		      (x1 - x0 + 1) + (ldev->caps.bus_width >> 3) - 1;
+	line_length = fb->format->cpp[0] * drm_rect_width(&src) + (ldev->caps.bus_width >> 3) - 1;
 
-	if (newstate->rotation & DRM_MODE_REFLECT_Y)
+	if (plane_rotation & DRM_MODE_REFLECT_Y)
 		/* Compute negative value (signed on 16 bits) for the picth */
 		pitch_in_bytes = 0x10000 - fb->pitches[0];
 	else
@@ -1376,7 +1571,7 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 	regmap_write_bits(ldev->regmap, LTDC_L1CFBLR + lofs, LXCFBLR_CFBLL | LXCFBLR_CFBP, val);
 
 	/* Configures the frame buffer line number */
-	line_number = y1 - y0 + 1;
+	line_number = drm_rect_height(&src);
 	regmap_write_bits(ldev->regmap, LTDC_L1CFBLNR + lofs, LXCFBLNR_CFBLN, line_number);
 
 	if (ldev->caps.ycbcr_input) {
@@ -1387,11 +1582,11 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 			/* Configure the auxiliary frame buffer address 0 */
 			paddr1 = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 1);
 
-			if (newstate->rotation & DRM_MODE_REFLECT_X)
-				paddr1 += ((fb->format->cpp[1] * (x1 - x0 + 1)) >> 1) - 1;
+			if (plane_rotation & DRM_MODE_REFLECT_X)
+				paddr1 += ((fb->format->cpp[1] * drm_rect_width(&src)) >> 1) - 1;
 
-			if (newstate->rotation & DRM_MODE_REFLECT_Y)
-				paddr1 += (fb->pitches[1] * (y1 - y0 - 1)) >> 1;
+			if (plane_rotation & DRM_MODE_REFLECT_Y)
+				paddr1 += (fb->pitches[1] * (drm_rect_height(&src) - 1)) >> 1;
 
 			regmap_write(ldev->regmap, LTDC_L1AFBA0R + lofs, paddr1);
 			break;
@@ -1400,14 +1595,14 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 			paddr1 = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 1);
 			paddr2 = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 2);
 
-			if (newstate->rotation & DRM_MODE_REFLECT_X) {
-				paddr1 += ((fb->format->cpp[1] * (x1 - x0 + 1)) >> 1) - 1;
-				paddr2 += ((fb->format->cpp[2] * (x1 - x0 + 1)) >> 1) - 1;
+			if (plane_rotation & DRM_MODE_REFLECT_X) {
+				paddr1 += ((fb->format->cpp[1] * drm_rect_width(&src)) >> 1) - 1;
+				paddr2 += ((fb->format->cpp[2] * drm_rect_width(&src)) >> 1) - 1;
 			}
 
-			if (newstate->rotation & DRM_MODE_REFLECT_Y) {
-				paddr1 += (fb->pitches[1] * (y1 - y0 - 1)) >> 1;
-				paddr2 += (fb->pitches[2] * (y1 - y0 - 1)) >> 1;
+			if (plane_rotation & DRM_MODE_REFLECT_Y) {
+				paddr1 += (fb->pitches[1] * (drm_rect_height(&src) - 1)) >> 1;
+				paddr2 += (fb->pitches[2] * (drm_rect_height(&src) - 1)) >> 1;
 			}
 
 			regmap_write(ldev->regmap, LTDC_L1AFBA0R + lofs, paddr1);
@@ -1418,14 +1613,14 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 			paddr1 = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 2);
 			paddr2 = (u32)drm_fb_dma_get_gem_addr(fb, newstate, 1);
 
-			if (newstate->rotation & DRM_MODE_REFLECT_X) {
-				paddr1 += ((fb->format->cpp[1] * (x1 - x0 + 1)) >> 1) - 1;
-				paddr2 += ((fb->format->cpp[2] * (x1 - x0 + 1)) >> 1) - 1;
+			if (plane_rotation & DRM_MODE_REFLECT_X) {
+				paddr1 += ((fb->format->cpp[1] * drm_rect_width(&src)) >> 1) - 1;
+				paddr2 += ((fb->format->cpp[2] * drm_rect_width(&src)) >> 1) - 1;
 			}
 
-			if (newstate->rotation & DRM_MODE_REFLECT_Y) {
-				paddr1 += (fb->pitches[1] * (y1 - y0 - 1)) >> 1;
-				paddr2 += (fb->pitches[2] * (y1 - y0 - 1)) >> 1;
+			if (plane_rotation & DRM_MODE_REFLECT_Y) {
+				paddr1 += (fb->pitches[1] * (drm_rect_height(&src) - 1)) >> 1;
+				paddr2 += (fb->pitches[2] * (drm_rect_height(&src) - 1)) >> 1;
 			}
 
 			regmap_write(ldev->regmap, LTDC_L1AFBA0R + lofs, paddr1);
@@ -1438,7 +1633,7 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 			 * buffers if the framebuffer contains more than one plane.
 			 */
 			if (fb->format->num_planes > 1) {
-				if (newstate->rotation & DRM_MODE_REFLECT_Y)
+				if (plane_rotation & DRM_MODE_REFLECT_Y)
 					/*
 					 * Compute negative value (signed on 16 bits)
 					 * for the picth
@@ -1447,7 +1642,7 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 				else
 					pitch_in_bytes = fb->pitches[1];
 
-				line_length = ((fb->format->cpp[1] * (x1 - x0 + 1)) >> 1) +
+				line_length = ((fb->format->cpp[1] * drm_rect_width(&src)) >> 1) +
 					      (ldev->caps.bus_width >> 3) - 1;
 
 				/* Configure the auxiliary buffer length */
@@ -1479,7 +1674,7 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 	val |= LXCR_LEN;
 
 	/* Enable horizontal mirroring if requested */
-	if (newstate->rotation & DRM_MODE_REFLECT_X)
+	if (plane_rotation & DRM_MODE_REFLECT_X)
 		val |= LXCR_HMEN;
 
 	regmap_write_bits(ldev->regmap, LTDC_L1CR + lofs, LXCR_MASK, val);
@@ -1497,6 +1692,11 @@ static void ltdc_plane_atomic_update(struct drm_plane *plane,
 		ldev->transfer_err = 0;
 	}
 
+	if (ldev->fifo_rot) {
+		DRM_WARN("ltdc fifo rotation error\n");
+		ldev->fifo_rot = 0;
+	}
+
 	if (ldev->caps.fifo_threshold) {
 		if (ldev->fifo_err) {
 			DRM_WARN("ltdc fifo underrun: please verify display mode\n");
@@ -1858,6 +2058,7 @@ static int ltdc_get_caps(struct drm_device *ddev)
 		ldev->caps.crc = false;
 		ldev->caps.dynamic_zorder = false;
 		ldev->caps.plane_rotation = false;
+		ldev->caps.crtc_rotation = false;
 		ldev->caps.fifo_threshold = false;
 		break;
 	case HWVER_20101:
@@ -1876,6 +2077,7 @@ static int ltdc_get_caps(struct drm_device *ddev)
 		ldev->caps.crc = false;
 		ldev->caps.dynamic_zorder = false;
 		ldev->caps.plane_rotation = false;
+		ldev->caps.crtc_rotation = false;
 		ldev->caps.fifo_threshold = false;
 		break;
 	case HWVER_40100:
@@ -1894,6 +2096,11 @@ static int ltdc_get_caps(struct drm_device *ddev)
 		ldev->caps.crc = true;
 		ldev->caps.dynamic_zorder = true;
 		ldev->caps.plane_rotation = true;
+		/* check if the outuput rotaion is available */
+		if (gc2r & GC2R_ROTA)
+			ldev->caps.crtc_rotation = true;
+		else
+			ldev->caps.crtc_rotation = false;
 		ldev->caps.fifo_threshold = true;
 		break;
 	default:
@@ -2065,12 +2272,16 @@ int ltdc_load(struct drm_device *ddev)
 		regmap_clear_bits(ldev->regmap, LTDC_IER, IER_LIE | IER_FUWIE |
 				  IER_TERRIE | IER_FUEIE);
 
+	if (ldev->caps.crtc_rotation)
+		regmap_clear_bits(ldev->regmap, LTDC_IER, IER_FURIE);
+
 	DRM_DEBUG_DRIVER("ltdc hw version 0x%08x\n", ldev->caps.hw_version);
 
 	/* initialize default value for fifo underrun threshold & clear interrupt error counters */
 	ldev->transfer_err = 0;
 	ldev->fifo_err = 0;
 	ldev->fifo_warn = 0;
+	ldev->fifo_rot = 0;
 	ldev->fifo_threshold = FUT_DFT;
 
 	for (i = 0; i < ldev->caps.nb_irq; i++) {
@@ -2117,8 +2328,19 @@ int ltdc_load(struct drm_device *ddev)
 
 	pm_runtime_enable(ddev->dev);
 
+	/* Get the secure rotation buffer memory resource */
+	np = of_parse_phandle(dev->of_node, "rotation-memory", 0);
+	if (np)
+		ldev->rot_mem = of_reserved_mem_lookup(np);
+
+	/* fail to get reserved memory for rotation */
+	if (!ldev->rot_mem)
+		ldev->caps.crtc_rotation = false;
+
 	return 0;
 err:
+	of_reserved_mem_device_release(dev);
+
 	for (i = 0; i < nb_endpoints; i++)
 		drm_of_panel_bridge_remove(ddev->dev->of_node, 0, i);
 
diff --git a/drivers/gpu/drm/stm/ltdc.h b/drivers/gpu/drm/stm/ltdc.h
index cc8b00639c58..268d2c69de4a 100644
--- a/drivers/gpu/drm/stm/ltdc.h
+++ b/drivers/gpu/drm/stm/ltdc.h
@@ -30,6 +30,7 @@ struct ltdc_caps {
 	bool crc;		/* cyclic redundancy check supported */
 	bool dynamic_zorder;	/* dynamic z-order */
 	bool plane_rotation;	/* plane rotation */
+	bool crtc_rotation;	/* crtc rotation */
 	bool fifo_threshold;	/* fifo underrun threshold supported */
 };
 
@@ -54,6 +55,7 @@ struct ltdc_device {
 	u32 irq_status;
 	u32 fifo_err;		/* fifo underrun error counter */
 	u32 fifo_warn;		/* fifo underrun warning counter */
+	u32 fifo_rot;		/* fifo underrun rotation counter */
 	u32 fifo_threshold;	/* fifo underrun threshold */
 	u32 transfer_err;	/* transfer error counter */
 	struct fps_info plane_fpsi[LTDC_MAX_LAYER];
@@ -61,6 +63,7 @@ struct ltdc_device {
 	int crc_skip_count;
 	bool crc_active;
 	u32 max_burst_length;
+	struct reserved_mem *rot_mem;
 };
 
 int ltdc_load(struct drm_device *ddev);
-- 
2.39.5

