From c273a5bad2aa2661a6175f047bcdffe74abf8b1d Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 26 Jan 2024 10:55:07 +0100
Subject: [PATCH] drm/stm: ltdc: add lvds clock

Add support of lvds pixel clock as input of pixel engine clock.

Change-Id: I13cd69d715e35eecb4c61254f7ec11b9fb99a719
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
---
 drivers/gpu/drm/stm/ltdc.c | 33 +++++++++++++++++++++++++++++++++
 drivers/gpu/drm/stm/ltdc.h |  2 ++
 2 files changed, 35 insertions(+)

diff --git a/drivers/gpu/drm/stm/ltdc.c b/drivers/gpu/drm/stm/ltdc.c
index dd793e079666..641b6f7f3464 100644
--- a/drivers/gpu/drm/stm/ltdc.c
+++ b/drivers/gpu/drm/stm/ltdc.c
@@ -960,6 +960,7 @@ static void ltdc_crtc_atomic_disable(struct drm_crtc *crtc,
 	struct ltdc_device *ldev = crtc_to_ltdc(crtc);
 	struct drm_device *ddev = crtc->dev;
 	int layer_index = 0;
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
@@ -984,6 +985,15 @@ static void ltdc_crtc_atomic_disable(struct drm_crtc *crtc,
 
 	pm_runtime_put_sync_suspend(ddev->dev);
 
+	/* restore to kernel ltdc clock as parent of pixel clock */
+	if (ldev->ltdc_clk) {
+		ret = clk_set_parent(ldev->pixel_clk, ldev->ltdc_clk);
+		if (ret) {
+			DRM_ERROR("Could not set parent clock: %d\n", ret);
+			return;
+		}
+	}
+
 	/*  clear interrupt error counters */
 	mutex_lock(&ldev->err_lock);
 	ldev->transfer_err = 0;
@@ -1096,6 +1106,24 @@ static void ltdc_crtc_mode_set_nofb(struct drm_crtc *crtc)
 	if (connector)
 		orientation = connector->display_info.panel_orientation;
 
+	if (encoder->encoder_type == DRM_MODE_ENCODER_LVDS) {
+		if (ldev->lvds_clk) {
+			ret = clk_set_parent(ldev->pixel_clk, ldev->lvds_clk);
+			if (ret) {
+				DRM_ERROR("Could not set parent clock: %d\n", ret);
+				return;
+			}
+		}
+	} else {
+		if (ldev->ltdc_clk) {
+			ret = clk_set_parent(ldev->pixel_clk, ldev->ltdc_clk);
+			if (ret) {
+				DRM_ERROR("Could not set parent clock: %d\n", ret);
+				return;
+			}
+		}
+	}
+
 	if (clk_set_rate(ldev->pixel_clk, rate) < 0) {
 		DRM_ERROR("Cannot set rate (%dHz) for pixel clk\n", rate);
 		return;
@@ -2278,6 +2306,11 @@ int ltdc_load(struct drm_device *ddev)
 		else
 			ldev->max_burst_length = mbl / 8;
 
+		ldev->ltdc_clk = devm_clk_get(dev, "ref");
+		if (IS_ERR(ldev->ltdc_clk))
+			return dev_err_probe(dev, PTR_ERR(ldev->ltdc_clk),
+					     "Unable to get ltdc clock\n");
+
 		ldev->bus_clk = devm_clk_get(dev, "bus");
 		if (IS_ERR(ldev->bus_clk))
 			return dev_err_probe(dev, PTR_ERR(ldev->bus_clk),
diff --git a/drivers/gpu/drm/stm/ltdc.h b/drivers/gpu/drm/stm/ltdc.h
index ca27f4d95987..d44f7a6f710d 100644
--- a/drivers/gpu/drm/stm/ltdc.h
+++ b/drivers/gpu/drm/stm/ltdc.h
@@ -51,6 +51,8 @@ struct ltdc_device {
 	struct regmap *regmap;
 	struct clk *pixel_clk;	/* lcd pixel clock */
 	struct clk *bus_clk;	/* bus clock */
+	struct clk *ltdc_clk;	/* kernel clock */
+	struct clk *lvds_clk;	/* lvds clock */
 	struct mutex err_lock;	/* protecting error_status */
 	struct ltdc_caps caps;
 	u32 irq_status;
-- 
2.39.5

