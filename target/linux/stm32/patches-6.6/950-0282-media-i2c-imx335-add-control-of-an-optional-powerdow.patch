From 19458fd268c45e984ab239318cdbad9327e68960 Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Fri, 5 Aug 2022 17:02:17 +0200
Subject: [PATCH] media: i2c: imx335: add control of an optional powerdown gpio

On some module, the sensor is controlled by both reset & powerdown
gpios.  Add a optional gpio to control this powerdown gpio.

Change-Id: Ic86e03eb4dd9a34fb5ab0613795ad07f0a5c9df6
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/262356
Reviewed-by: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Reviewed-by: Raphael GALLAIS-POU <raphael.gallais-pou@foss.st.com>
Reviewed-by: Hugues FRUCHET <hugues.fruchet@st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@foss.st.com>
Tested-by: Raphael GALLAIS-POU <raphael.gallais-pou@foss.st.com>
---
 drivers/media/i2c/imx335.c | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/drivers/media/i2c/imx335.c b/drivers/media/i2c/imx335.c
index dba4ca4986c6..c30ac9410471 100644
--- a/drivers/media/i2c/imx335.c
+++ b/drivers/media/i2c/imx335.c
@@ -122,6 +122,7 @@ struct imx335_mode {
  * @sd: V4L2 sub-device
  * @pad: Media pad. Only one pad supported
  * @reset_gpio: Sensor reset gpio
+ * @powerdown_gpio: Sensor powerdown gpio
  * @supplies: Regulator supplies to handle power control
  * @inclk: Sensor input clock
  * @ctrl_handler: V4L2 control handler
@@ -143,8 +144,8 @@ struct imx335 {
 	struct v4l2_subdev sd;
 	struct media_pad pad;
 	struct gpio_desc *reset_gpio;
+	struct gpio_desc *powerdown_gpio;
 	struct regulator_bulk_data supplies[ARRAY_SIZE(imx335_supply_name)];
-
 	struct clk *inclk;
 	struct v4l2_ctrl_handler ctrl_handler;
 	struct v4l2_ctrl *link_freq_ctrl;
@@ -905,6 +906,15 @@ static int imx335_parse_hw_config(struct imx335 *imx335)
 		return PTR_ERR(imx335->reset_gpio);
 	}
 
+	/* Request optional powerdown pin */
+	imx335->powerdown_gpio = devm_gpiod_get_optional(imx335->dev, "powerdown",
+							 GPIOD_OUT_LOW);
+	if (IS_ERR(imx335->powerdown_gpio)) {
+		dev_err(imx335->dev, "failed to get powerdown gpio %ld",
+			PTR_ERR(imx335->powerdown_gpio));
+		return PTR_ERR(imx335->powerdown_gpio);
+	}
+
 	for (i = 0; i < ARRAY_SIZE(imx335_supply_name); i++)
 		imx335->supplies[i].supply = imx335_supply_name[i];
 
@@ -1008,6 +1018,8 @@ static int imx335_power_on(struct device *dev)
 		return ret;
 	}
 
+	gpiod_set_value_cansleep(imx335->powerdown_gpio, 1);
+
 	usleep_range(500, 550); /* Tlow */
 
 	/* Set XCLR */
@@ -1025,6 +1037,7 @@ static int imx335_power_on(struct device *dev)
 
 error_reset:
 	gpiod_set_value_cansleep(imx335->reset_gpio, 0);
+	gpiod_set_value_cansleep(imx335->powerdown_gpio, 0);
 	regulator_bulk_disable(ARRAY_SIZE(imx335_supply_name), imx335->supplies);
 
 	return ret;
@@ -1042,6 +1055,7 @@ static int imx335_power_off(struct device *dev)
 	struct imx335 *imx335 = to_imx335(sd);
 
 	gpiod_set_value_cansleep(imx335->reset_gpio, 0);
+	gpiod_set_value_cansleep(imx335->powerdown_gpio, 0);
 	clk_disable_unprepare(imx335->inclk);
 	regulator_bulk_disable(ARRAY_SIZE(imx335_supply_name), imx335->supplies);
 
-- 
2.39.5

