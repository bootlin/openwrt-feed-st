From 2b0bb3563d9eb6cebe5a99da9850eeb3b3f8b470 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Tue, 4 Oct 2022 18:01:27 +0200
Subject: [PATCH] remoteproc: stm32: Manage the boot address get from the elf
 file

On the stm32mp257 Soc, when the firmware is not delegated to the
remoteproc TEE, the non-secure vector table pointer needs to be specified.
The principle is to look for the ".isr_vectors" section in ELF file to
get the vector table address and to store it in the appropriate
HW configuration register.

Notice that the "rproc_elf_get_boot_addr" helper can not be used as
the address returned corresponds to the reset handler function (elf
entry point) not to the expected vector table address.
Moreover the strategy that consists in updating the ELF entry point to
point to the vector table is not reliable as the entry point address is
a ELF generic property(for instance used by the GDB tools to jump in
code after the firmware load).

In addition the "st,syscfg-nsvtor" property is also used to determine
if the firmware will be loaded by the Linux or the secure context.
If defined the driver considers that it has to manage the firmware.

Change-Id: I8e724307a0a2f9aee9b12230a2465b36a66b135f
Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/269211
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/347953
Tested-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/remoteproc/stm32_rproc.c | 84 ++++++++++++++++++++++++++++++--
 1 file changed, 79 insertions(+), 5 deletions(-)

diff --git a/drivers/remoteproc/stm32_rproc.c b/drivers/remoteproc/stm32_rproc.c
index f900b0cf4855..344a8a2757c8 100644
--- a/drivers/remoteproc/stm32_rproc.c
+++ b/drivers/remoteproc/stm32_rproc.c
@@ -23,6 +23,7 @@
 #include <linux/tee_remoteproc.h>
 
 #include "remoteproc_internal.h"
+#include "remoteproc_elf_helpers.h"
 
 #define HOLD_BOOT		0
 #define RELEASE_BOOT		1
@@ -95,6 +96,7 @@ struct stm32_rproc {
 	struct stm32_syscon pdds;
 	struct stm32_syscon cm_state;
 	struct stm32_syscon rsctbl;
+	struct stm32_syscon boot_vec;
 	int wdg_irq;
 	u32 nb_rmems;
 	struct stm32_rproc_mem *rmems;
@@ -106,6 +108,56 @@ struct stm32_rproc {
 	void __iomem *rsc_va;
 };
 
+static u64 stm32_rproc_get_vect_table(struct rproc *rproc, const struct firmware *fw)
+{
+	struct device *dev = rproc->dev.parent;
+	struct stm32_rproc *ddata = rproc->priv;
+	const void *shdr, *name_table_shdr;
+	const char *name_table;
+	const u8 *elf_data = (void *)fw->data;
+	const void *ehdr = elf_data;
+	size_t fw_size = fw->size;
+	int i;
+	u8 class = fw_elf_get_class(fw);
+	u32 elf_shdr_get_size = elf_size_of_shdr(class);
+	u16 shnum = elf_hdr_get_e_shnum(class, ehdr);
+	u16 shstrndx = elf_hdr_get_e_shstrndx(class, ehdr);
+
+	/*
+	 * If the platform does not support the boot address configuration set
+	 * the boot address to default value 0.
+	 */
+	if (!ddata->boot_vec.map)
+		return 0;
+
+	/* Look for the vector table  in the ELF image*/
+	/* First, get the section header according to the elf class */
+	shdr = elf_data + elf_hdr_get_e_shoff(class, ehdr);
+	/* Compute name table section header entry in shdr array */
+	name_table_shdr = shdr + (shstrndx * elf_shdr_get_size);
+	/* Finally, compute the name table section address in elf */
+	name_table = elf_data + elf_shdr_get_sh_offset(class, name_table_shdr);
+
+	for (i = 0; i < shnum; i++, shdr += elf_shdr_get_size) {
+		u64 size = elf_shdr_get_sh_size(class, shdr);
+		u64 offset = elf_shdr_get_sh_offset(class, shdr);
+		u32 name = elf_shdr_get_sh_name(class, shdr);
+
+		if (strcmp(name_table + name, ".isr_vectors"))
+			continue;
+
+		/* make sure we have the entire table */
+		if (offset + size > fw_size || offset + size < size) {
+			dev_err(dev, "vector table truncated\n");
+			return 0;
+		}
+
+		return elf_shdr_get_sh_addr(class, shdr);
+	}
+
+	return 0;
+}
+
 static int stm32_rproc_pa_to_da(struct rproc *rproc, phys_addr_t pa, u64 *da)
 {
 	unsigned int i;
@@ -635,6 +687,22 @@ static int stm32_rproc_start(struct rproc *rproc)
 		}
 	}
 
+	/* Configure the boot vector register with the vector table address read in the ELF. */
+	if (ddata->boot_vec.map) {
+		if (rproc->bootaddr & ~ddata->boot_vec.mask) {
+			dev_err(&rproc->dev, "Boot address is %#llx no aligned on mask %#x\n",
+				rproc->bootaddr, ddata->boot_vec.mask);
+			return err;
+		}
+		dev_dbg(&rproc->dev, "boot vector address = %#llx", rproc->bootaddr);
+		err = regmap_update_bits(ddata->boot_vec.map, ddata->boot_vec.reg,
+					 ddata->boot_vec.mask, rproc->bootaddr);
+		if (err) {
+			dev_err(&rproc->dev, "failed to set boot_vec\n");
+			return err;
+		}
+	}
+
 	err = stm32_rproc_set_hold_boot(rproc, false);
 	if (err)
 		return err;
@@ -792,7 +860,7 @@ static const struct rproc_ops st_rproc_ops = {
 	.find_loaded_rsc_table = rproc_elf_find_loaded_rsc_table,
 	.get_loaded_rsc_table = stm32_rproc_get_loaded_rsc_table,
 	.sanity_check	= rproc_elf_sanity_check,
-	.get_boot_addr	= rproc_elf_get_boot_addr,
+	.get_boot_addr = stm32_rproc_get_vect_table,
 };
 
 static const struct rproc_ops st_rproc_tee_ops = {
@@ -1011,6 +1079,11 @@ static int stm32_rproc_parse_dt(struct platform_device *pdev,
 		dev_warn(dev, "rsc tbl syscon not supported\n");
 	}
 
+	/* See if we can get the optional non secure boot address register */
+	err = stm32_rproc_get_syscon(np, "st,syscfg-nsvtor", &ddata->boot_vec);
+	if (err)
+		dev_dbg(dev, "nsvector sys config not defined\n");
+
 	return 0;
 }
 
@@ -1055,6 +1128,11 @@ static int stm32_rproc_probe(struct platform_device *pdev)
 	ddata = rproc->priv;
 	ddata->desc = desc;
 	ddata->trproc = trproc;
+
+	ret = stm32_rproc_parse_dt(pdev, ddata, &rproc->auto_boot);
+	if (ret)
+		goto free_rproc;
+
 	if (trproc) {
 		trproc->rproc = rproc;
 		rproc->fw_format = RPROC_FW_TEE;
@@ -1064,10 +1142,6 @@ static int stm32_rproc_probe(struct platform_device *pdev)
 
 	rproc_coredump_set_elf_info(rproc, ELFCLASS32, EM_NONE);
 
-	ret = stm32_rproc_parse_dt(pdev, ddata, &rproc->auto_boot);
-	if (ret)
-		goto free_rproc;
-
 	ret = stm32_rproc_of_memory_translations(pdev, ddata);
 	if (ret)
 		goto free_rproc;
-- 
2.39.5

