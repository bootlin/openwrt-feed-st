From ecb2d24679bec4562b42bbc762227357770db8d1 Mon Sep 17 00:00:00 2001
From: Raphael Gallais-Pou <raphael.gallais-pou@foss.st.com>
Date: Fri, 9 Jun 2023 17:40:33 +0200
Subject: [PATCH] drm/stm: dsi: expose DSI PHY internal clock

	DSISRC __________
	               __\_
	              |    \
	pll4_p_ck   ->|  1  |____dsi_k
	ck_dsi_phy  ->|  0  |
	              |____/

A DSI clock is missing in the clock framework. Looking at the
clk_summary, it appears that 'ck_dsi_phy' is not implemented. Since the
DSI kernel clock is based on the internal DSI pll. The common clock
driver can not directly expose this 'ck_dsi_phy' clock because it does
not contain any common registers with the DSI. Thus it needs to be done
directly within the DSI phy driver.

Change-Id: I8f525601107f8a2a501814599b56fa1f3aa47480
Signed-off-by: Raphael Gallais-Pou <raphael.gallais-pou@foss.st.com>
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
---
 drivers/gpu/drm/stm/dw_mipi_dsi-stm.c | 519 ++++++++++++++++++--------
 1 file changed, 353 insertions(+), 166 deletions(-)

diff --git a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
index 5274cb726d50..9b79c9e29fce 100644
--- a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
+++ b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
@@ -8,7 +8,9 @@
  */
 
 #include <linux/clk.h>
+#include <linux/clk-provider.h>
 #include <linux/iopoll.h>
+#include <linux/kernel.h>
 #include <linux/mod_devicetable.h>
 #include <linux/module.h>
 #include <linux/of_device.h>
@@ -129,8 +131,11 @@ enum dsi_color {
 
 struct dw_mipi_dsi_stm {
 	void __iomem *base;
+	struct device *dev;
 	struct clk *pllref_clk;
 	struct clk *pclk;
+	struct clk *px_clk;
+	struct clk_hw txbyte_clk;
 	struct dw_mipi_dsi *dsi;
 	u32 hw_version;
 	int lane_min_kbps;
@@ -252,40 +257,6 @@ static int dsi_pll_get_params(struct dw_mipi_dsi_stm *dsi,
 	return 0;
 }
 
-static int dsi_phy_141_pll_get_params(struct dw_mipi_dsi_stm *dsi,
-				      int clkin_khz, int clkout_khz,
-				      int *idf, int *ndiv, int *odf)
-{
-	int i, n;
-	int delta, best_delta; /* all in khz */
-
-	/* Early checks preventing division by 0 & odd results */
-	if (clkin_khz <= 0 || clkout_khz <= 0)
-		return -EINVAL;
-
-	best_delta = 1000000; /* big started value (1000000khz) */
-
-	for (i = IDF_PHY_141_MIN; i <= IDF_PHY_141_MAX; i++) {
-		for (n = NDIV_PHY_141_MIN; n <= NDIV_PHY_141_MAX; n++) {
-			/* Check if new delta is better & saves parameters */
-			delta = dsi_pll_get_clkout_khz(clkin_khz, i, n, *odf) - clkout_khz;
-
-			if (delta < 0)
-				delta = -delta;
-			if (delta < best_delta) {
-				*idf = i;
-				*ndiv = n;
-				best_delta = delta;
-			}
-			/* fast return in case of "perfect result" */
-			if (!delta)
-				return 0;
-		}
-	}
-
-	return 0;
-}
-
 struct dphy_pll_parameter_map {
 	u32 data_rate;	/* upper margin of frequency range */
 	u8 hs_freq;	/* hsfreqrange */
@@ -360,12 +331,60 @@ static const struct dphy_pll_parameter_map dppa_map[] = {
 	{2500, 0x49, 0x00, 0x01, 0x0C}
 };
 
+static int dsi_phy_141_pll_get_params(struct dw_mipi_dsi_stm *dsi,
+				      int clkin_khz, int clkout_khz,
+				      int *idf, int *ndiv, int *odf, int *index)
+{
+	int i, n;
+	int delta, best_delta; /* all in khz */
+
+	/* Early checks preventing division by 0 & odd results */
+	if (clkin_khz <= 0 || clkout_khz <= 0)
+		return -EINVAL;
+
+	/* find frequency mapping */
+	for (i = 0; i < ARRAY_SIZE(dppa_map); i++) {
+		if (dsi->lane_mbps < dppa_map[i].data_rate) {
+			if (i == ARRAY_SIZE(dppa_map) - 1)
+				DRM_WARN("Could not find frequency mapped index\n");
+			i--;
+			break;
+		}
+	}
+
+	/* Save index only if reference exists */
+	if (index)
+		*index = i;
+
+	*odf = int_pow(2, ((dppa_map[i].odf & WRPCR1_ODF) >> 28));
+
+	best_delta = 1000000; /* big started value (1000000khz) */
+
+	for (i = IDF_PHY_141_MIN; i <= IDF_PHY_141_MAX; i++) {
+		for (n = NDIV_PHY_141_MIN; n <= NDIV_PHY_141_MAX; n++) {
+			/* Check if new delta is better & saves parameters */
+			delta = dsi_pll_get_clkout_khz(clkin_khz, i, n, *odf) - clkout_khz;
+
+			if (delta < 0)
+				delta = -delta;
+			if (delta < best_delta) {
+				*idf = i;
+				*ndiv = n;
+				best_delta = delta;
+			}
+			/* fast return in case of "perfect result" */
+			if (!delta)
+				return 0;
+		}
+	}
+
+	return 0;
+}
+
 static int dw_mipi_dsi_phy_141_init(void *priv_data)
 {
 	struct dw_mipi_dsi_stm *dsi = priv_data;
-	u32 val, ccf, prop, gmp, int1, bias, vco, ndiv, odf, idf;
-	unsigned int pll_in_khz, pll_out_khz, hsfreq;
-	int ret, i;
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
@@ -392,78 +411,16 @@ static int dw_mipi_dsi_phy_141_init(void *priv_data)
 	dsi_clear(dsi, DSI_PTCR0, PTCR0_TRSEN);
 	mdelay(1);
 
-	/* Compute requested pll out, pll out is the half of the lane data rate */
-	pll_out_khz = dsi->lane_mbps * 1000 / 2;
-	pll_in_khz = (unsigned int)(clk_get_rate(dsi->pllref_clk) / 1000);
-
-	/* find frequency mapping */
-	for (i = 0; i < ARRAY_SIZE(dppa_map); i++) {
-		if (dsi->lane_mbps < dppa_map[i].data_rate) {
-			i--;
-			break;
-		}
-	}
-
-	/* TODO check odf value */
-	switch (dppa_map[i].odf) {
-	case(3):
-		odf = 8;
-		break;
-	case(2):
-		odf = 4;
-		break;
-	case(1):
-		odf = 2;
-		break;
-	default:
-		odf = 1;
-		break;
-	}
-
-	dsi_phy_141_pll_get_params(dsi, pll_in_khz, pll_out_khz, &idf, &ndiv, &odf);
-
-	ccf = ((pll_in_khz / 1000 - 17)) * 4;
-	hsfreq = dppa_map[i].hs_freq;
-
-	vco = dppa_map[i].vco;
-	bias = 0x10;
-	int1 = 0x00;
-	gmp = 0x01;
-	prop = dppa_map[i].prop;
-
-	/* set DLD, HSFR & CCF */
-	val = (hsfreq << 8) | ccf;
-	dsi_write(dsi, DSI_WPCR1, val);
-
-	val = ((ndiv - 2) << 4) | (idf - 1);
-	dsi_write(dsi, DSI_WRPCR0, val);
-
-	val = ((odf - 1) << 28) | (vco << 24) | (bias << 16) | (int1 << 8) | (gmp << 6) | prop;
-	dsi_write(dsi, DSI_WRPCR1, val);
-
-	dsi_write(dsi, DSI_PCTLR, PCTLR_CKEN);
-
-	dsi_update_bits(dsi, DSI_WRPCR2, WRPCR2_SEL, 0x01);
-
-	dsi_set(dsi, DSI_WRPCR2, WRPCR2_UPD);
-	mdelay(1);
-
-	dsi_clear(dsi, DSI_WRPCR2, WRPCR2_UPD);
-	mdelay(1);
-
-	dsi_set(dsi, DSI_PCTLR, PCTLR_PWEN | PCTLR_DEN);
+	/* dummy set rate ... */
+	clk_set_rate(dsi->txbyte_clk.clk, dsi->lane_mbps * 1000000);
 
-	ret = readl_poll_timeout(dsi->base + DSI_PSR, val, val & PSR_PSSC,
-				 SLEEP_US, TIMEOUT_US);
+	ret = clk_set_rate(dsi->txbyte_clk.clk, dsi->lane_mbps * 1000000 / 2);
 	if (ret)
-		DRM_ERROR("!TIMEOUT! waiting PLL, let's continue\n");
-
-	DRM_DEBUG_DRIVER("IDF %d ODF %d NDIV %d\n", idf, odf, ndiv);
-	DRM_DEBUG_DRIVER("VCO %d BIAS %d INT %d GMP %d PROP %d\n", vco, bias, int1, gmp, prop);
+		return ret;
 
-	dsi_set(dsi, DSI_WRPCR2, WRPCR2_PLLEN);
+	ret = clk_prepare_enable(dsi->txbyte_clk.clk);
 
-	return 0;
+	return ret;
 }
 
 static int
@@ -475,7 +432,7 @@ dw_mipi_dsi_phy_141_get_lane_mbps(void *priv_data,
 	struct dw_mipi_dsi_stm *dsi = priv_data;
 	unsigned int pll_out_khz, pll_in_khz;
 	u32 ndiv, odf, idf;
-	int bpp, i;
+	int bpp;
 
 	/* Compute requested pll out */
 	dsi->format = format;
@@ -497,31 +454,7 @@ dw_mipi_dsi_phy_141_get_lane_mbps(void *priv_data,
 
 	pll_in_khz = (unsigned int)(clk_get_rate(dsi->pllref_clk) / 1000);
 
-	/* find frequency mapping */
-	for (i = 0; i < ARRAY_SIZE(dppa_map); i++) {
-		if (dsi->lane_mbps < dppa_map[i].data_rate) {
-			i--;
-			break;
-		}
-	}
-
-	/* TODO check odf value */
-	switch (dppa_map[i].odf) {
-	case(3):
-		odf = 8;
-		break;
-	case(2):
-		odf = 4;
-		break;
-	case(1):
-		odf = 2;
-		break;
-	default:
-		odf = 1;
-		break;
-	}
-
-	dsi_phy_141_pll_get_params(dsi, pll_in_khz, pll_out_khz, &idf, &ndiv, &odf);
+	dsi_phy_141_pll_get_params(dsi, pll_in_khz, pll_out_khz, &idf, &ndiv, &odf, NULL);
 
 	/* Get the adjusted lane data rate value, lane data rate = 2 * pll output */
 	*lane_mbps = 2 * dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf) / 1000;
@@ -532,29 +465,287 @@ dw_mipi_dsi_phy_141_get_lane_mbps(void *priv_data,
 	return 0;
 }
 
-static int dw_mipi_dsi_phy_init(void *priv_data)
+#define clk_to_dw_mipi_dsi_stm(clk) \
+	container_of(clk, struct dw_mipi_dsi_stm, txbyte_clk)
+
+static void dw_mipi_dsi_clk_disable(struct clk_hw *clk)
 {
-	struct dw_mipi_dsi_stm *dsi = priv_data;
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(clk);
+
+	DRM_DEBUG_DRIVER("\n");
+
+	if (dsi->hw_version == HWVER_141) {
+		/* Disable the DSI PLL */
+		dsi_clear(dsi, DSI_WRPCR2, WRPCR2_PLLEN);
+	} else {
+		/* Disable the DSI PLL */
+		dsi_clear(dsi, DSI_WRPCR, WRPCR_PLLEN);
+
+		/* Disable the regulator */
+		dsi_clear(dsi, DSI_WRPCR, WRPCR_REGEN | WRPCR_BGREN);
+	}
+}
+
+static int dw_mipi_dsi_clk_enable(struct clk_hw *clk)
+{
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(clk);
 	u32 val;
 	int ret;
 
-	/* Enable the regulator */
-	dsi_set(dsi, DSI_WRPCR, WRPCR_REGEN | WRPCR_BGREN);
-	ret = readl_poll_timeout(dsi->base + DSI_WISR, val, val & WISR_RRS,
-				 SLEEP_US, TIMEOUT_US);
-	if (ret)
-		DRM_DEBUG_DRIVER("!TIMEOUT! waiting REGU, let's continue\n");
+	DRM_DEBUG_DRIVER("\n");
+
+	if (dsi->hw_version == HWVER_141) {
+		ret = readl_poll_timeout_atomic(dsi->base + DSI_PSR, val, val & PSR_PSSC,
+						SLEEP_US, TIMEOUT_US);
+		if (ret)
+			DRM_ERROR("!TIMEOUT! waiting PLL, let's continue\n");
 
-	/* Enable the DSI PLL & wait for its lock */
-	dsi_set(dsi, DSI_WRPCR, WRPCR_PLLEN);
-	ret = readl_poll_timeout(dsi->base + DSI_WISR, val, val & WISR_PLLLS,
-				 SLEEP_US, TIMEOUT_US);
+		dsi_set(dsi, DSI_WRPCR2, WRPCR2_PLLEN);
+	} else {
+		/* Enable the regulator */
+		dsi_set(dsi, DSI_WRPCR, WRPCR_REGEN | WRPCR_BGREN);
+		ret = readl_poll_timeout_atomic(dsi->base + DSI_WISR, val, val & WISR_RRS,
+						SLEEP_US, TIMEOUT_US);
+		if (ret)
+			DRM_DEBUG_DRIVER("!TIMEOUT! waiting REGU, let's continue\n");
+
+		/* Enable the DSI PLL & wait for its lock */
+		dsi_set(dsi, DSI_WRPCR, WRPCR_PLLEN);
+		ret = readl_poll_timeout_atomic(dsi->base + DSI_WISR, val, val & WISR_PLLLS,
+						SLEEP_US, TIMEOUT_US);
+		if (ret)
+			DRM_DEBUG_DRIVER("!TIMEOUT! waiting PLL, let's continue\n");
+	}
+
+	return 0;
+}
+
+static int dw_mipi_dsi_clk_is_enabled(struct clk_hw *hw)
+{
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+
+	if (dsi->hw_version == HWVER_141)
+		return dsi_read(dsi, DSI_WRPCR2) & WRPCR2_PLLEN;
+	else
+		return dsi_read(dsi, DSI_WRPCR) & WRPCR_PLLEN;
+}
+
+static unsigned long dw_mipi_dsi_clk_recalc_rate(struct clk_hw *hw,
+						 unsigned long parent_rate)
+{
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz;
+	u32 val;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	pll_in_khz = (unsigned int)(parent_rate / 1000);
+
+	if (dsi->hw_version == HWVER_141) {
+		val = dsi_read(dsi, DSI_WRPCR0);
+
+		idf = (val & WRPCR0_IDF) + 1;
+		ndiv = ((val & WRPCR0_NDIV) >> 4) + 2;
+
+		val = dsi_read(dsi, DSI_WRPCR1);
+
+		odf = int_pow(2, (val & WRPCR1_ODF) >> 28);
+	} else {
+		val = dsi_read(dsi, DSI_WRPCR);
+
+		idf = (val & WRPCR_IDF) >> 11;
+		if (!idf)
+			idf = 1;
+		ndiv = (val & WRPCR_NDIV) >> 2;
+		odf = int_pow(2, (val & WRPCR_ODF) >> 16);
+	}
+
+	/* Get the adjusted pll out value */
+	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
+
+	return (unsigned long)pll_out_khz * 1000;
+}
+
+static long dw_mipi_dsi_clk_round_rate(struct clk_hw *hw, unsigned long rate,
+				       unsigned long *parent_rate)
+{
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz;
+	int ret;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	pll_in_khz = (unsigned int)(*parent_rate / 1000);
+
+	/* Compute best pll parameters */
+	idf = 0;
+	ndiv = 0;
+	odf = 0;
+
+	if (dsi->hw_version == HWVER_141)
+		ret = dsi_phy_141_pll_get_params(dsi, pll_in_khz, rate / 1000,
+						 &idf, &ndiv, &odf, NULL);
+	else
+		ret = dsi_pll_get_params(dsi, pll_in_khz, rate / 1000,
+					 &idf, &ndiv, &odf);
 	if (ret)
-		DRM_DEBUG_DRIVER("!TIMEOUT! waiting PLL, let's continue\n");
+		DRM_WARN("Warning dsi_pll_get_params(): bad params\n");
+
+	/* Get the adjusted pll out value */
+	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
+
+	return pll_out_khz * 1000;
+}
+
+static int dw_mipi_dsi_clk_set_rate(struct clk_hw *hw, unsigned long rate,
+				    unsigned long parent_rate)
+{
+	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+	u32 val, ccf, prop, gmp, int1, bias, vco;
+	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz, hsfreq;
+	int ret, dppa_index;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	pll_in_khz = (unsigned int)(parent_rate / 1000);
+
+	/* Compute best pll parameters */
+	idf = 0;
+	ndiv = 0;
+	odf = 0;
+
+	if (dsi->hw_version == HWVER_141) {
+		/* Compute requested pll out, pll out is the half of the lane data rate */
+		pll_out_khz = dsi->lane_mbps * 1000 / 2;
+
+		ret = dsi_phy_141_pll_get_params(dsi, pll_in_khz, pll_out_khz,
+						 &idf, &ndiv, &odf, &dppa_index);
+		if (ret)
+			DRM_WARN("Warning dsi_pll_get_params(): bad params\n");
+
+		ccf = ((pll_in_khz / 1000 - 17)) * 4;
+		hsfreq = dppa_map[dppa_index].hs_freq;
+
+		vco = dppa_map[dppa_index].vco;
+		bias = 0x10;
+		int1 = 0x00;
+		gmp = 0x01;
+		prop = dppa_map[dppa_index].prop;
+
+		/* set DLD, HSFR & CCF */
+		val = (hsfreq << 8) | ccf;
+		dsi_write(dsi, DSI_WPCR1, val);
+
+		val = ((ndiv - 2) << 4) | (idf - 1);
+		dsi_write(dsi, DSI_WRPCR0, val);
+
+		val = ((odf - 1) << 28) | (vco << 24) | (bias << 16)
+		       | (int1 << 8) | (gmp << 6) | prop;
+		dsi_write(dsi, DSI_WRPCR1, val);
+
+		dsi_write(dsi, DSI_PCTLR, PCTLR_CKEN);
+
+		dsi_update_bits(dsi, DSI_WRPCR2, WRPCR2_SEL, 0x01);
+
+		dsi_set(dsi, DSI_WRPCR2, WRPCR2_UPD);
+		mdelay(1);
+
+		dsi_clear(dsi, DSI_WRPCR2, WRPCR2_UPD);
+		mdelay(1);
+
+		dsi_set(dsi, DSI_PCTLR, PCTLR_PWEN | PCTLR_DEN);
+	} else {
+		ret = dsi_pll_get_params(dsi, pll_in_khz, rate / 1000,
+					 &idf, &ndiv, &odf);
+		if (ret)
+			DRM_WARN("Warning dsi_pll_get_params(): bad params\n");
+
+		/* Get the adjusted pll out value */
+		pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
+
+		/* Set the PLL division factors */
+		dsi_update_bits(dsi, DSI_WRPCR, WRPCR_NDIV | WRPCR_IDF | WRPCR_ODF,
+				(ndiv << 2) | (idf << 11) | ((ffs(odf) - 1) << 16));
+
+		/* Compute uix4 & set the bit period in high-speed mode */
+		val = 4000000 / pll_out_khz;
+		dsi_update_bits(dsi, DSI_WPCR0, WPCR0_UIX4, val);
+	}
 
 	return 0;
 }
 
+static void dw_mipi_dsi_clk_unregister(void *data)
+{
+	struct dw_mipi_dsi_stm *dsi = data;
+
+	DRM_DEBUG_DRIVER("\n");
+
+	of_clk_del_provider(dsi->dev->of_node);
+	clk_hw_unregister(&dsi->txbyte_clk);
+}
+
+static const struct clk_ops dw_mipi_dsi_stm_clk_ops = {
+	.enable = dw_mipi_dsi_clk_enable,
+	.disable = dw_mipi_dsi_clk_disable,
+	.is_enabled = dw_mipi_dsi_clk_is_enabled,
+	.recalc_rate = dw_mipi_dsi_clk_recalc_rate,
+	.round_rate = dw_mipi_dsi_clk_round_rate,
+	.set_rate = dw_mipi_dsi_clk_set_rate,
+};
+
+static struct clk_init_data cdata_init = {
+	.name = "ck_dsi_phy",
+	.ops = &dw_mipi_dsi_stm_clk_ops,
+	.parent_names = (const char * []) {"ck_hse"},
+	.num_parents = 1,
+};
+
+static struct clk_init_data cdata_init_141 = {
+	.name = "txbyteclk",
+	.ops = &dw_mipi_dsi_stm_clk_ops,
+	.parent_names = (const char * []) {"clk_phy_dsi"},
+	.num_parents = 1,
+};
+
+static int dw_mipi_dsi_clk_register(struct dw_mipi_dsi_stm *dsi,
+				    struct device *dev)
+{
+	struct device_node *node = dev->of_node;
+	int ret;
+
+	DRM_DEBUG_DRIVER("Registering clk\n");
+
+	if (dsi->hw_version == HWVER_131 || dsi->hw_version == HWVER_130) {
+		dsi->txbyte_clk.init = &cdata_init;
+	} else if (dsi->hw_version == HWVER_141) {
+		dsi->txbyte_clk.init = &cdata_init_141;
+	} else {
+		DRM_ERROR("Version hw_clk not supported\n");
+		return -ENODEV;
+	}
+
+	ret = clk_hw_register(dev, &dsi->txbyte_clk);
+	if (ret)
+		return ret;
+
+	ret = of_clk_add_hw_provider(node, of_clk_hw_simple_get,
+				     &dsi->txbyte_clk);
+	if (ret)
+		clk_hw_unregister(&dsi->txbyte_clk);
+
+	return ret;
+}
+
+static int dw_mipi_dsi_phy_init(void *priv_data)
+{
+	struct dw_mipi_dsi_stm *dsi = priv_data;
+	int ret;
+
+	ret = clk_prepare_enable(dsi->txbyte_clk.clk);
+	return ret;
+}
+
 static void dw_mipi_dsi_phy_power_on(void *priv_data)
 {
 	struct dw_mipi_dsi_stm *dsi = priv_data;
@@ -571,6 +762,8 @@ static void dw_mipi_dsi_phy_power_off(void *priv_data)
 
 	DRM_DEBUG_DRIVER("\n");
 
+	clk_disable_unprepare(dsi->txbyte_clk.clk);
+
 	/* Disable the DSI wrapper */
 	dsi_clear(dsi, DSI_WCR, WCR_DSIEN);
 }
@@ -581,9 +774,8 @@ dw_mipi_dsi_get_lane_mbps(void *priv_data, const struct drm_display_mode *mode,
 			  unsigned int *lane_mbps)
 {
 	struct dw_mipi_dsi_stm *dsi = priv_data;
-	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz;
+	unsigned int pll_in_khz, pll_out_khz;
 	int ret, bpp;
-	u32 val;
 
 	pll_in_khz = (unsigned int)(clk_get_rate(dsi->pllref_clk) / 1000);
 
@@ -604,25 +796,10 @@ dw_mipi_dsi_get_lane_mbps(void *priv_data, const struct drm_display_mode *mode,
 		DRM_WARN("Warning min phy mbps is used\n");
 	}
 
-	/* Compute best pll parameters */
-	idf = 0;
-	ndiv = 0;
-	odf = 0;
-	ret = dsi_pll_get_params(dsi, pll_in_khz, pll_out_khz,
-				 &idf, &ndiv, &odf);
+	ret = clk_set_rate((dsi->txbyte_clk.clk), pll_out_khz * 1000);
 	if (ret)
-		DRM_WARN("Warning dsi_pll_get_params(): bad params\n");
-
-	/* Get the adjusted pll out value */
-	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
-
-	/* Set the PLL division factors */
-	dsi_update_bits(dsi, DSI_WRPCR,	WRPCR_NDIV | WRPCR_IDF | WRPCR_ODF,
-			(ndiv << 2) | (idf << 11) | ((ffs(odf) - 1) << 16));
-
-	/* Compute uix4 & set the bit period in high-speed mode */
-	val = 4000000 / pll_out_khz;
-	dsi_update_bits(dsi, DSI_WPCR0, WPCR0_UIX4, val);
+		DRM_DEBUG_DRIVER("ERROR Could not set rate of %d to %s clk->name",
+				 pll_out_khz, clk_hw_get_name(&dsi->txbyte_clk));
 
 	/* Select video mode by resetting DSIM bit */
 	dsi_clear(dsi, DSI_WCFGR, WCFGR_DSIM);
@@ -1016,10 +1193,19 @@ static int dw_mipi_dsi_stm_probe(struct platform_device *pdev)
 		goto err_dsi_probe;
 	}
 
+	ret = dw_mipi_dsi_clk_register(dsi, dev);
+	if (ret) {
+		DRM_ERROR("Failed to register DSI pixel clock: %d\n", ret);
+		goto err_dsi_probe;
+	}
+
+	dsi->px_clk = devm_clk_get(dev, "px_clk");
+	/* No need to return since only MP25 has it */
+	if (IS_ERR(dsi->px_clk))
+		dev_err_probe(dev, PTR_ERR(dsi->px_clk), "Unable to get px_clk clock\n");
+
 	clk_disable_unprepare(dsi->pclk);
 	regulator_disable(dsi->vdd_supply);
-	if (dsi->vdda18_supply)
-		regulator_disable(dsi->vdda18_supply);
 
 	return 0;
 
@@ -1039,6 +1225,7 @@ static void dw_mipi_dsi_stm_remove(struct platform_device *pdev)
 	struct dw_mipi_dsi_stm *dsi = platform_get_drvdata(pdev);
 
 	dw_mipi_dsi_remove(dsi->dsi);
+	dw_mipi_dsi_clk_unregister(dsi);
 }
 
 static int __maybe_unused dw_mipi_dsi_stm_suspend(struct device *dev)
-- 
2.39.5

