From e53a496b5d8680e99948ea3ee1190139a5f93080 Mon Sep 17 00:00:00 2001
From: Amit Mittal <amit.mittal@st.com>
Date: Wed, 24 Jul 2024 16:29:36 +0530
Subject: [PATCH] remoteproc: stm32_rproc: Add cluster and retention PM domains

For the stmp32mp25 this change let rproc to attach to either of
cluster or retention PM domain based on coproc m33 running from
ddr or sram respectively. It prevent the system from entering
suspend when coproc m33 running on ddr while let cm33 self-enter
low power modes when running on sram.

Change-Id: Ibe366aa5cd65ab5d4e4d213e6d9089e9e4d5ba23
Signed-off-by: Amit Mittal <amit.mittal@st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/395051
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
---
 drivers/remoteproc/stm32_rproc.c | 84 +++++++++++++++++++++++++++++++-
 1 file changed, 82 insertions(+), 2 deletions(-)

diff --git a/drivers/remoteproc/stm32_rproc.c b/drivers/remoteproc/stm32_rproc.c
index 3f3a604d30e1..4b42b95b647d 100644
--- a/drivers/remoteproc/stm32_rproc.c
+++ b/drivers/remoteproc/stm32_rproc.c
@@ -16,6 +16,8 @@
 #include <linux/of.h>
 #include <linux/of_reserved_mem.h>
 #include <linux/platform_device.h>
+#include <linux/pm_domain.h>
+#include <linux/pm_runtime.h>
 #include <linux/pm_wakeirq.h>
 #include <linux/regmap.h>
 #include <linux/remoteproc.h>
@@ -98,6 +100,10 @@ struct stm32_rproc {
 	struct stm32_syscon cm_state;
 	struct stm32_syscon rsctbl;
 	struct stm32_syscon boot_vec;
+
+	struct device *genpd_dev;
+	struct device_link *genpd_dev_link;
+
 	int wdg_irq;
 	u32 nb_rmems;
 	struct stm32_rproc_mem *rmems;
@@ -401,8 +407,17 @@ stm32_rproc_tee_elf_find_loaded_rsc_table(struct rproc *rproc,
 static int stm32_rproc_tee_start(struct rproc *rproc)
 {
 	struct stm32_rproc *ddata = rproc->priv;
+	int err;
+
+	err = pm_runtime_resume_and_get(rproc->dev.parent);
+	if (err)
+		return err;
 
-	return tee_rproc_start(ddata->trproc);
+	err = tee_rproc_start(ddata->trproc);
+	if (err)
+		return pm_runtime_put(rproc->dev.parent);
+
+	return err;
 }
 
 static int stm32_rproc_tee_attach(struct rproc *rproc)
@@ -418,6 +433,10 @@ static int stm32_rproc_tee_stop(struct rproc *rproc)
 
 	stm32_rproc_request_shutdown(rproc);
 
+	err = pm_runtime_put(rproc->dev.parent);
+	if (err < 0)
+		return err;
+
 	err = tee_rproc_stop(ddata->trproc);
 	if (err)
 		return err;
@@ -705,6 +724,10 @@ static int stm32_rproc_start(struct rproc *rproc)
 		}
 	}
 
+	err = pm_runtime_resume_and_get(rproc->dev.parent);
+	if (err)
+		return err;
+
 	err = stm32_rproc_set_hold_boot(rproc, false);
 	if (err)
 		return err;
@@ -714,8 +737,14 @@ static int stm32_rproc_start(struct rproc *rproc)
 
 static int stm32_rproc_attach(struct rproc *rproc)
 {
+	int err;
+
 	stm32_rproc_add_coredump_trace(rproc);
 
+	err = pm_runtime_resume_and_get(rproc->dev.parent);
+	if (err)
+		return err;
+
 	return stm32_rproc_set_hold_boot(rproc, true);
 }
 
@@ -753,6 +782,10 @@ static int stm32_rproc_stop(struct rproc *rproc)
 		return err;
 	}
 
+	err = pm_runtime_put(rproc->dev.parent);
+	if (err < 0)
+		dev_err(&rproc->dev, "failed to disable PM runtime:%d\n", err);
+
 	return stm32_rproc_release(rproc);
 }
 
@@ -1087,6 +1120,43 @@ static int stm32_rproc_parse_dt(struct platform_device *pdev,
 	return 0;
 }
 
+static void stm32_rproc_powerdomain_remove(struct device *dev,
+					   struct stm32_rproc *ddata)
+{
+	if (ddata->genpd_dev_link)
+		device_link_del(ddata->genpd_dev_link);
+	if (!IS_ERR_OR_NULL(ddata->genpd_dev))
+		dev_pm_domain_detach(ddata->genpd_dev, true);
+}
+
+static int stm32_rproc_powerdomain_init(struct device *dev,
+					struct stm32_rproc *ddata)
+{
+	int err;
+
+	if (!device_property_present(dev, "power-domains"))
+		return 0;
+
+	if (device_property_present(dev, "keep-power-in-suspend"))
+		ddata->genpd_dev = dev_pm_domain_attach_by_name(dev, "sleep");
+	else
+		ddata->genpd_dev = dev_pm_domain_attach_by_name(dev, "default");
+	if (IS_ERR_OR_NULL(ddata->genpd_dev)) {
+		err = ddata->genpd_dev ? PTR_ERR(ddata->genpd_dev) : -ENODEV;
+		dev_err(dev, "failed to get pm-domain: %d\n", err);
+		return err;
+	}
+
+	ddata->genpd_dev_link = device_link_add(dev, ddata->genpd_dev,
+						DL_FLAG_PM_RUNTIME | DL_FLAG_STATELESS);
+	if (!ddata->genpd_dev_link) {
+		dev_pm_domain_detach(ddata->genpd_dev, true);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
 static int stm32_rproc_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -1163,7 +1233,11 @@ static int stm32_rproc_probe(struct platform_device *pdev)
 	if (ret)
 		goto free_mb;
 
-	return 0;
+	ret = stm32_rproc_powerdomain_init(dev, ddata);
+	if (ret < 0)
+		return ret;
+
+	return devm_pm_runtime_enable(dev);
 
 free_mb:
 	stm32_rproc_free_mbox(rproc);
@@ -1191,6 +1265,8 @@ static void stm32_rproc_remove(struct platform_device *pdev)
 	if (atomic_read(&rproc->power) > 0)
 		rproc_shutdown(rproc);
 
+	stm32_rproc_powerdomain_remove(dev, ddata);
+
 	rproc_del(rproc);
 	stm32_rproc_free_mbox(rproc);
 
@@ -1217,6 +1293,10 @@ static int stm32_rproc_suspend(struct device *dev)
 	struct rproc *rproc = dev_get_drvdata(dev);
 	struct stm32_rproc *ddata = rproc->priv;
 
+	if (ddata->genpd_dev && rproc->state != RPROC_OFFLINE &&
+	    !device_property_present(dev, "keep-power-in-suspend"))
+		return -EBUSY;
+
 	if (device_may_wakeup(dev))
 		return enable_irq_wake(ddata->wdg_irq);
 
-- 
2.39.5

