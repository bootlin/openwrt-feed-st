From 39c8af98bdfc224abce5a15201cca351d707bf11 Mon Sep 17 00:00:00 2001
From: Antonio Borneo <antonio.borneo@foss.st.com>
Date: Tue, 28 May 2024 10:16:39 +0200
Subject: [PATCH] irqchip/stm32-exti: Set the GPIO interrupt mux

Current EXTI driver does not progran the mux to propagate the GPIO
interrupt to the GIC; the pinctrl driver writes in EXTI registers
thanks to "syscon" compatible.
This patch decouples EXTI from pinctrl.

Keep backward compatibility with old device-trees when "syscon"
compatible is present, keeping pinctrl driver to program the mux.

When "syscon" compatible is missing, extract the GPIO bank number
from the bits [23:16] of the second interrupt specifier and use it
to program the interrupt mux.
Don't propagate to parent domain the GPIO bank number.
Keep track that the mux is in use and record the GPIO bank number.

Signed-off-by: Antonio Borneo <antonio.borneo@foss.st.com>
Change-Id: I1a2d066065a24ba249f882653274735575177c79
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/383202
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
---
 drivers/irqchip/irq-stm32mp-exti.c | 159 +++++++++++++++++++++++++++--
 1 file changed, 152 insertions(+), 7 deletions(-)

diff --git a/drivers/irqchip/irq-stm32mp-exti.c b/drivers/irqchip/irq-stm32mp-exti.c
index b75d8620570a..f7cdda0d600c 100644
--- a/drivers/irqchip/irq-stm32mp-exti.c
+++ b/drivers/irqchip/irq-stm32mp-exti.c
@@ -5,6 +5,7 @@
  * Author:  Maxime Coquelin <mcoquelin.stm32@gmail.com>
  */
 
+#include <linux/bitfield.h>
 #include <linux/bitops.h>
 #include <linux/hwspinlock.h>
 #include <linux/interrupt.h>
@@ -23,8 +24,17 @@
 
 #define IRQS_PER_BANK			32
 
+#define STM32MP_GPIO_IRQ_LINES		16
+
+/* to receive bank_ioport_nr from GPIO in struct irq_fwspec::param[1] */
+#define STM32MP_GPIO_BANK_MASK		GENMASK(23, 16)
+
 #define HWSPNLCK_TIMEOUT		1000 /* usec */
 
+#define EXTI_CR(n)			(0x060 + ((n) / 4) * 4)
+#define EXTI_CR_SHIFT(n)		(((n) % 4) * 8)
+#define EXTI_CR_MASK(n)			(GENMASK(7, 0) << EXTI_CR_SHIFT(n))
+
 #define EXTI_EnCIDCFGR(n)		(0x180 + (n) * 4)
 #define EXTI_HWCFGR1			0x3f0
 
@@ -73,6 +83,9 @@ struct stm32mp_exti_host_data {
 	const struct stm32mp_exti_drv_data *drv_data;
 	struct hwspinlock *hwlock;
 	bool dt_has_irqs_desc; /* skip internal desc_irqs array and get it from DT */
+	bool has_syscon; /* using old DT; keep backward compatibility */
+	DECLARE_BITMAP(gpio_mux_used, STM32MP_GPIO_IRQ_LINES);
+	u8 gpio_mux_pos[STM32MP_GPIO_IRQ_LINES];
 };
 
 static const struct stm32mp_exti_bank stm32mp_exti_b1 = {
@@ -439,6 +452,26 @@ static int stm32mp_exti_suspend(struct device *dev)
 	return 0;
 }
 
+static void stm32mp_exti_resume_gpio_mux(struct stm32mp_exti_host_data *host_data)
+{
+	bool write_cr = false;
+	unsigned int i;
+	u32 cr = 0;
+
+	for (i = 0; i < STM32MP_GPIO_IRQ_LINES; i++) {
+		if (test_bit(i, host_data->gpio_mux_used)) {
+			write_cr = true;
+			cr |= (host_data->gpio_mux_pos[i] << EXTI_CR_SHIFT(i)) & EXTI_CR_MASK(i);
+		}
+
+		if ((i % 4) == 3 && write_cr) {
+			writel_relaxed(cr, host_data->base + EXTI_CR(i));
+			write_cr = false;
+			cr = 0;
+		}
+	}
+}
+
 static int stm32mp_exti_resume(struct device *dev)
 {
 	struct stm32mp_exti_host_data *host_data = dev_get_drvdata(dev);
@@ -447,6 +480,8 @@ static int stm32mp_exti_resume(struct device *dev)
 
 	for (i = 0; i < host_data->drv_data->bank_nr; i++) {
 		chip_data = &host_data->chips_data[i];
+		if (i == 0)
+			stm32mp_exti_resume_gpio_mux(host_data);
 		stm32mp_chip_resume(chip_data, chip_data->mask_cache);
 	}
 
@@ -495,6 +530,20 @@ static struct irq_chip stm32mp_exti_chip_direct = {
 	.irq_set_affinity	= IS_ENABLED(CONFIG_SMP) ? irq_chip_set_affinity_parent : NULL,
 };
 
+static bool stm32mp_exti_test_gpio_mux_available(struct stm32mp_exti_host_data *host_data,
+						 unsigned int bank_nr,
+						 unsigned int gpio_nr)
+{
+	if (gpio_nr >= STM32MP_GPIO_IRQ_LINES)
+		return false;
+
+	if (!test_bit(gpio_nr, host_data->gpio_mux_used) ||
+	    bank_nr == host_data->gpio_mux_pos[gpio_nr])
+		return true;
+
+	return false;
+}
+
 static int stm32mp_exti_domain_match(struct irq_domain *dm,
 				     struct device_node *node,
 				     enum irq_domain_bus_token bus_token)
@@ -523,6 +572,7 @@ static int stm32mp_exti_domain_select(struct irq_domain *dm,
 	struct stm32mp_exti_host_data *host_data = dm->host_data;
 	irq_hw_number_t hwirq = fwspec->param[0];
 	struct of_phandle_args out_irq;
+	u32 gpio_bank;
 	int ret;
 
 	if (!fwnode ||
@@ -535,6 +585,13 @@ static int stm32mp_exti_domain_select(struct irq_domain *dm,
 	if (fwnode != of_node_to_fwnode(host_data->dev->of_node))
 		return 0;
 
+	gpio_bank = FIELD_GET(STM32MP_GPIO_BANK_MASK, fwspec->param[1]);
+
+	if (hwirq < STM32MP_GPIO_IRQ_LINES && !host_data->has_syscon &&
+	    ((host_data->chips_data[0].event_reserved & BIT(hwirq)) ||
+	     !stm32mp_exti_test_gpio_mux_available(host_data, gpio_bank, hwirq)))
+		return 0;
+
 	ret = of_irq_parse_one(host_data->dev->of_node, hwirq, &out_irq);
 	if (ret)
 		return 0;
@@ -542,6 +599,66 @@ static int stm32mp_exti_domain_select(struct irq_domain *dm,
 	return (dm->parent->fwnode == of_node_to_fwnode(out_irq.np));
 }
 
+static int stm32mp_exti_gpio_bank_alloc(struct irq_domain *dm, struct irq_fwspec *fwspec)
+{
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
+	struct hwspinlock *hwlock = host_data->hwlock;
+	irq_hw_number_t hwirq = fwspec->param[0];
+	void __iomem *base = host_data->base;
+	u32 cr, gpio_bank;
+	int ret;
+
+	if (host_data->has_syscon)
+		return 0;
+
+	if (hwirq >= STM32MP_GPIO_IRQ_LINES)
+		return 0;
+
+	gpio_bank = FIELD_GET(STM32MP_GPIO_BANK_MASK, fwspec->param[1]);
+
+	if (!stm32mp_exti_test_gpio_mux_available(host_data, gpio_bank, hwirq)) {
+		pr_debug("GPIO IRQ %ld already in use\n", hwirq);
+		return -EBUSY;
+	}
+
+	raw_spin_lock(&host_data->chips_data[0].rlock);
+
+	if (hwlock) {
+		ret = hwspin_lock_timeout_in_atomic(hwlock, HWSPNLCK_TIMEOUT);
+		if (ret) {
+			pr_err("%s can't get hwspinlock (%d)\n", __func__, ret);
+			raw_spin_unlock(&host_data->chips_data[0].rlock);
+			return ret;
+		}
+	}
+
+	cr = readl_relaxed(base + EXTI_CR(hwirq));
+	cr &= ~EXTI_CR_MASK(hwirq);
+	cr |= (gpio_bank << EXTI_CR_SHIFT(hwirq)) & EXTI_CR_MASK(hwirq);
+	writel_relaxed(cr, base + EXTI_CR(hwirq));
+
+	if (hwlock)
+		hwspin_unlock_in_atomic(hwlock);
+
+	raw_spin_unlock(&host_data->chips_data[0].rlock);
+
+	set_bit(hwirq, host_data->gpio_mux_used);
+	host_data->gpio_mux_pos[hwirq] = gpio_bank;
+
+	return 0;
+}
+
+static void stm32mp_exti_gpio_bank_free(struct irq_domain *dm, irq_hw_number_t hwirq)
+{
+	struct stm32mp_exti_host_data *host_data = dm->host_data;
+
+	if (host_data->has_syscon)
+		return;
+
+	if (hwirq < STM32MP_GPIO_IRQ_LINES)
+		clear_bit(hwirq, host_data->gpio_mux_used);
+}
+
 static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 				     unsigned int virq,
 				     unsigned int nr_irqs, void *data)
@@ -552,7 +669,7 @@ static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 	struct irq_fwspec *fwspec = data;
 	struct irq_fwspec p_fwspec;
 	irq_hw_number_t hwirq;
-	int bank;
+	int bank, ret;
 	u32 event_trg;
 	struct irq_chip *chip;
 
@@ -569,6 +686,10 @@ static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 		return -EPERM;
 	}
 
+	ret = stm32mp_exti_gpio_bank_alloc(dm, fwspec);
+	if (ret)
+		return ret;
+
 	event_trg = readl_relaxed(host_data->base + chip_data->reg_bank->trg_ofst);
 	chip = (event_trg & BIT(hwirq % IRQS_PER_BANK)) ?
 	       &stm32mp_exti_chip : &stm32mp_exti_chip_direct;
@@ -577,20 +698,27 @@ static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 
 	if (host_data->dt_has_irqs_desc) {
 		struct of_phandle_args out_irq;
-		int ret;
 
 		ret = of_irq_parse_one(host_data->dev->of_node, hwirq, &out_irq);
-		if (ret)
+		if (ret) {
+			stm32mp_exti_gpio_bank_free(dm, hwirq);
 			return ret;
+		}
 
 		of_phandle_args_to_fwspec(out_irq.np, out_irq.args,
 					  out_irq.args_count, &p_fwspec);
 
-		return irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
+		ret = irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
+		if (ret)
+			stm32mp_exti_gpio_bank_free(dm, hwirq);
+
+		return ret;
 	}
 
-	if (!host_data->drv_data->desc_irqs)
+	if (!host_data->drv_data->desc_irqs) {
+		stm32mp_exti_gpio_bank_free(dm, hwirq);
 		return -EINVAL;
+	}
 
 	desc_irq = host_data->drv_data->desc_irqs[hwirq];
 	if (desc_irq != EXTI_INVALID_IRQ) {
@@ -600,12 +728,26 @@ static int stm32mp_exti_domain_alloc(struct irq_domain *dm,
 		p_fwspec.param[1] = desc_irq;
 		p_fwspec.param[2] = IRQ_TYPE_LEVEL_HIGH;
 
-		return irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
+		ret = irq_domain_alloc_irqs_parent(dm, virq, 1, &p_fwspec);
+		if (ret)
+			stm32mp_exti_gpio_bank_free(dm, hwirq);
+
+		return ret;
 	}
 
 	return 0;
 }
 
+static void stm32mp_exti_domain_free(struct irq_domain *dm, unsigned int virq,
+				     unsigned int nr_irqs)
+{
+	struct irq_data *irq_data = irq_domain_get_irq_data(dm, virq);
+
+	stm32mp_exti_gpio_bank_free(dm, irq_data->hwirq);
+
+	irq_domain_free_irqs_common(dm, virq, nr_irqs);
+}
+
 static struct
 stm32mp_exti_chip_data *stm32mp_exti_chip_init(struct stm32mp_exti_host_data *h_data,
 					       u32 bank_idx,
@@ -640,7 +782,7 @@ static const struct irq_domain_ops stm32mp_exti_domain_ops = {
 	.match	= stm32mp_exti_domain_match,
 	.select = stm32mp_exti_domain_select,
 	.alloc	= stm32mp_exti_domain_alloc,
-	.free	= irq_domain_free_irqs_common,
+	.free	= stm32mp_exti_domain_free,
 	.xlate = irq_domain_xlate_twocell,
 };
 
@@ -694,6 +836,9 @@ static int stm32mp_exti_probe(struct platform_device *pdev)
 	dev_set_drvdata(dev, host_data);
 	host_data->dev = dev;
 
+	if (of_device_is_compatible(np, "syscon"))
+		host_data->has_syscon = true;
+
 	/* check for optional hwspinlock which may be not available yet */
 	ret = of_hwspin_lock_get_id(np, 0);
 	if (ret == -EPROBE_DEFER)
-- 
2.39.5

