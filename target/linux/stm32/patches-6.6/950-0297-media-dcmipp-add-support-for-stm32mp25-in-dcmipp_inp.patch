From 275f6654fe299c6c19867eaa366a4ce0e604c5fc Mon Sep 17 00:00:00 2001
From: Alain Volmat <alain.volmat@foss.st.com>
Date: Wed, 14 Feb 2024 14:07:18 +0100
Subject: [PATCH] media: dcmipp: add support for stm32mp25 in dcmipp_input

In case of stm32mp25, the input subdev is now in charge of configuration
of each pipeline (Dump, Main & Aux) which can select to receive all the
input stream or only selected DT/VC. Since input of each pipes can be
different (in term of DT/VC), there are now 3 source pads on the subdev,
one for each pipeline.

Change-Id: I79448ea13b3ccfcd51a390f2b3b06fc54acc8d9c
Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
---
 .../st/stm32/stm32-dcmipp/dcmipp-input.c      | 89 ++++++++++++++-----
 1 file changed, 69 insertions(+), 20 deletions(-)

--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c
@@ -39,12 +39,18 @@
 #define DCMIPP_CMCR_INSEL	BIT(0)
 
 #define DCMIPP_P0FSCR	0x404
-#define DCMIPP_P0FSCR_DTMODE_MASK	GENMASK(17, 16)
-#define DCMIPP_P0FSCR_DTMODE_SHIFT	16
-#define DCMIPP_P0FSCR_DTMODE_DTIDA	0x00
+#define DCMIPP_P1FSCR	0x804
+#define DCMIPP_P2FSCR	0xC04
+#define DCMIPP_PxFSCR_DTMODE_MASK	GENMASK(17, 16)
+#define DCMIPP_PxFSCR_DTMODE_SHIFT	16
+#define DCMIPP_PxFSCR_DTMODE_DTIDA	0x00
 #define DCMIPP_P0FSCR_DTMODE_ALLDT	0x03
-#define DCMIPP_P0FSCR_DTIDA_MASK	GENMASK(5, 0)
-#define DCMIPP_P0FSCR_DTIDA_SHIFT	0
+#define DCMIPP_PxFSCR_DTIDA_MASK	GENMASK(5, 0)
+#define DCMIPP_PxFSCR_DTIDA_SHIFT	0
+
+#define DCMIPP_PxFSCR(a) (((a) == 0) ? DCMIPP_P0FSCR :\
+			  ((a) == 1) ? DCMIPP_P1FSCR :\
+			   DCMIPP_P2FSCR)
 
 #define IS_SINK(pad) (!(pad))
 #define IS_SRC(pad)  ((pad))
@@ -265,6 +271,7 @@ static int dcmipp_inp_set_fmt(struct v4l
 {
 	struct dcmipp_inp_device *inp = v4l2_get_subdevdata(sd);
 	struct v4l2_mbus_framefmt *mf;
+	int i;
 
 	if (inp->streaming)
 		return -EBUSY;
@@ -289,9 +296,11 @@ static int dcmipp_inp_set_fmt(struct v4l
 
 	/* When setting the sink format, report that format on the src pad */
 	if (IS_SINK(fmt->pad)) {
-		mf = v4l2_subdev_state_get_format(sd_state, 1);
-		*mf = fmt->format;
-		dcmipp_inp_adjust_fmt(inp, mf, 1);
+		for (i = 1; i < sd->entity.num_pads; i++) {
+			mf = v4l2_subdev_state_get_format(sd_state, i);
+			*mf = fmt->format;
+			dcmipp_inp_adjust_fmt(inp, mf, 1);
+		}
 	}
 
 	return 0;
@@ -379,7 +388,8 @@ static int dcmipp_inp_configure_parallel
 	return 0;
 }
 
-static int dcmipp_inp_configure_csi(struct dcmipp_inp_device *inp)
+static int dcmipp_inp_configure_csi_dt(struct dcmipp_inp_device *inp,
+				       u32 pipe_id)
 {
 	const struct dcmipp_inp_pix_map *vpix;
 	struct v4l2_subdev_state *state;
@@ -389,31 +399,61 @@ static int dcmipp_inp_configure_csi(stru
 	/* Get format information */
 	state = v4l2_subdev_lock_and_get_active_state(&inp->sd);
 	sink_fmt = v4l2_subdev_state_get_format(state, 0);
-	src_fmt = v4l2_subdev_state_get_format(state, 1);
+	src_fmt = v4l2_subdev_state_get_format(state, 1 + pipe_id);
 	v4l2_subdev_unlock_state(state);
 
+	/* Only configure Pipe #2 input if is enabled */
+	if (pipe_id == 2 && !media_pad_remote_pad_first(&inp->ved.pads[3])) {
+		dev_dbg(inp->dev, "Skip disabled pipe %d\n", pipe_id);
+		return 0;
+	}
+
 	vpix = dcmipp_inp_pix_map_by_code(sink_fmt->code, src_fmt->code);
 	if (!vpix) {
 		dev_err(inp->dev, "Invalid sink/src format configuration\n");
 		return -EINVAL;
 	}
 
-	/* Apply configuration on each input pipe */
-	reg_clear(inp, DCMIPP_P0FSCR,
-		  DCMIPP_P0FSCR_DTMODE_MASK | DCMIPP_P0FSCR_DTIDA_MASK);
+	/* We cannot handle JPEG data on main - aux pipes */
+	if (pipe_id && !vpix->dt) {
+		dev_dbg(inp->dev, "Skip null DT config on pipe %d\n", pipe_id);
+		return 0;
+	}
+
+	reg_clear(inp, DCMIPP_PxFSCR(pipe_id),
+		  DCMIPP_PxFSCR_DTMODE_MASK | DCMIPP_PxFSCR_DTIDA_MASK);
 
 	/* In case of JPEG we don't know the DT so we allow all data */
 	/*
 	 * TODO - check instead dt == 0 for the time being to allow other
 	 * unknown data-type
 	 */
-	if (!vpix->dt)
+	if (!vpix->dt) {
 		reg_set(inp, DCMIPP_P0FSCR,
-			DCMIPP_P0FSCR_DTMODE_ALLDT << DCMIPP_P0FSCR_DTMODE_SHIFT);
+			DCMIPP_P0FSCR_DTMODE_ALLDT << DCMIPP_PxFSCR_DTMODE_SHIFT);
+	} else {
+		reg_set(inp, DCMIPP_PxFSCR(pipe_id),
+			vpix->dt << DCMIPP_PxFSCR_DTIDA_SHIFT |
+			DCMIPP_PxFSCR_DTMODE_DTIDA);
+	}
+
+	return 0;
+}
+
+static int dcmipp_inp_configure_csi(struct dcmipp_inp_device *inp)
+{
+	int i, pipe_nb, ret;
+
+	if (of_device_is_compatible(inp->dev->of_node, "st,stm32mp25-dcmipp"))
+		pipe_nb = 3;
 	else
-		reg_set(inp, DCMIPP_P0FSCR,
-			vpix->dt << DCMIPP_P0FSCR_DTIDA_SHIFT |
-			DCMIPP_P0FSCR_DTMODE_DTIDA);
+		pipe_nb = 1;
+
+	for (i = 0; i < pipe_nb; i++) {
+		ret = dcmipp_inp_configure_csi_dt(inp, i);
+		if (ret)
+			return ret;
+	}
 
 	/* Select the DCMIPP CSI interface */
 	reg_write(inp, DCMIPP_CMCR, DCMIPP_CMCR_INSEL);
@@ -502,16 +542,25 @@ void dcmipp_inp_ent_release(struct dcmip
 	dcmipp_ent_sd_unregister(ved, &inp->sd);
 }
 
+#define DCMIPP_INP_SINK_PAD_NB_MP13	1
+#define DCMIPP_INP_SINK_PAD_NB_MP25	3
 struct dcmipp_ent_device *dcmipp_inp_ent_init(const char *entity_name,
 					      struct dcmipp_device *dcmipp)
 {
 	struct dcmipp_inp_device *inp;
-	const unsigned long pads_flag[] = {
+	const unsigned long pads_flag_stm32mp25[] = {
 		MEDIA_PAD_FL_SINK, MEDIA_PAD_FL_SOURCE,
+		MEDIA_PAD_FL_SOURCE, MEDIA_PAD_FL_SOURCE,
 	};
 	struct device *dev = dcmipp->dev;
+	u16 pads_nb = DCMIPP_INP_SINK_PAD_NB_MP25 + 1;
 	int ret;
 
+	if (of_device_is_compatible(dev->of_node, "st,stm32mp13-dcmipp"))
+		pads_nb = DCMIPP_INP_SINK_PAD_NB_MP13 + 1;
+	else if (of_device_is_compatible(dev->of_node, "st,stm32mp25-dcmipp"))
+		pads_nb = DCMIPP_INP_SINK_PAD_NB_MP25 + 1;
+
 	/* Allocate the inp struct */
 	inp = kzalloc(sizeof(*inp), GFP_KERNEL);
 	if (!inp)
@@ -522,7 +571,7 @@ struct dcmipp_ent_device *dcmipp_inp_ent
 	/* Initialize ved and sd */
 	ret = dcmipp_ent_sd_register(&inp->ved, &inp->sd, &dcmipp->v4l2_dev,
 				     entity_name, MEDIA_ENT_F_VID_IF_BRIDGE,
-				     ARRAY_SIZE(pads_flag), pads_flag,
+				     pads_nb, pads_flag_stm32mp25,
 				     &dcmipp_inp_int_ops, &dcmipp_inp_ops,
 				     NULL, NULL);
 	if (ret) {
