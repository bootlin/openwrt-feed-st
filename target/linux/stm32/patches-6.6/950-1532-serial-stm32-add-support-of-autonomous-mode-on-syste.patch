From 3ab1ab7eeeaabacc294dc6577c0e3155848e45e9 Mon Sep 17 00:00:00 2001
From: Cheick Traore <cheick.traore@foss.st.com>
Date: Wed, 9 Oct 2024 12:04:18 +0200
Subject: [PATCH] serial: stm32: add support of autonomous mode on system
 suspend

Add support to manage an extra clock for LPUART wakeup feature, which
needs to use an additional autonomous clock during system suspend.
The first clock is used during system runtime and the second
is used on suspend. So if the peripheral has 2 clocks defined, it will
be supposed that the peripheral supports autonomous mode and will be set
on this mode on system suspend.

Change-Id: Iebd68d56102d6a4e655932de841c5b5917790f80
Signed-off-by: Cheick Traore <cheick.traore@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/410082
Tested-by: Cheick TRAORE <cheick.traore-ext@st.com>
Reviewed-by: Cheick TRAORE <cheick.traore-ext@st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
Reviewed-by: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
---
 drivers/tty/serial/stm32-usart.c | 51 +++++++++++++++++++++++++++++---
 drivers/tty/serial/stm32-usart.h |  6 ++++
 2 files changed, 53 insertions(+), 4 deletions(-)

--- a/drivers/tty/serial/stm32-usart.c
+++ b/drivers/tty/serial/stm32-usart.c
@@ -99,6 +99,7 @@ static struct stm32_usart_info __maybe_u
 		.tdr		= 0x28,
 		.presc		= 0x2c,
 		.hwcfgr1	= 0x3f0,
+		.hwcfgr2	= 0x3ec,
 	},
 	.cfg = {
 		.uart_enable_bit = 0,
@@ -1023,6 +1024,22 @@ static void stm32_usart_transmit_chars(s
 	}
 }
 
+static void stm32_usart_enable_am(struct stm32_port *stm32_port)
+{
+	if (!stm32_port->wakeup_am) {
+		clk_prepare_enable(stm32_port->clk_am);
+		stm32_port->wakeup_am = true;
+	}
+}
+
+static void stm32_usart_disable_am(struct stm32_port *stm32_port)
+{
+	if (stm32_port->wakeup_am) {
+		clk_disable_unprepare(stm32_port->clk_am);
+		stm32_port->wakeup_am = false;
+	}
+}
+
 static irqreturn_t stm32_usart_interrupt(int irq, void *ptr)
 {
 	struct uart_port *port = ptr;
@@ -1054,7 +1071,11 @@ static irqreturn_t stm32_usart_interrupt
 	if (irqd_is_wakeup_set(irq_get_irq_data(port->irq)) &&
 	    (cr1 & USART_CR1_RXNEIE) && (sr & USART_SR_RXNE)) {
 		stm32_usart_clr_bits(port, ofs->cr1, USART_CR1_RXNEIE);
+		if (stm32_port->clk_am)
+			stm32_usart_disable_am(stm32_port);
+
 		pm_wakeup_event(tport->tty->dev, 0);
+
 		ret = IRQ_HANDLED;
 	}
 
@@ -1762,7 +1783,8 @@ static int stm32_usart_init_port(struct
 {
 	struct uart_port *port = &stm32port->port;
 	struct resource *res;
-	int ret, irq;
+	struct clk_bulk_data *clks = NULL;
+	int ret, irq, num_clks;
 
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0)
@@ -1796,10 +1818,11 @@ static int stm32_usart_init_port(struct
 
 	spin_lock_init(&port->lock);
 
-	stm32port->clk = devm_clk_get(&pdev->dev, NULL);
-	if (IS_ERR(stm32port->clk))
-		return PTR_ERR(stm32port->clk);
+	num_clks = devm_clk_bulk_get_all(&pdev->dev, &clks);
+	if (num_clks <= 0)
+		return num_clks ? : -ENOENT;
 
+	stm32port->clk = clks[0].clk;
 	/* Ensure that clk rate is correct by enabling the clk */
 	ret = clk_prepare_enable(stm32port->clk);
 	if (ret)
@@ -1811,6 +1834,18 @@ static int stm32_usart_init_port(struct
 		goto err_clk;
 	}
 
+	if (stm32port->info->ofs.hwcfgr2 != UNDEF_REG) {
+		u32 hwcfgr2 = readl_relaxed(stm32port->port.membase +
+					    stm32port->info->ofs.hwcfgr2);
+		if (FIELD_GET(USART_HWCFCR2_CFG3, hwcfgr2)) {
+			if (num_clks > 1)
+				stm32port->clk_am = clks[1].clk;
+			else
+				dev_warn(&pdev->dev,
+					 "Wakeup might not be available: No autonomous clock\n");
+		}
+	}
+
 	stm32port->fifoen = stm32port->info->cfg.has_fifo;
 	if (stm32port->fifoen) {
 		stm32_usart_get_ftcfg(pdev, stm32port, "rx-threshold", &stm32port->rxftcfg);
@@ -2354,6 +2389,7 @@ static int __maybe_unused stm32_usart_se
 static int __maybe_unused stm32_usart_serial_suspend(struct device *dev)
 {
 	struct uart_port *port = dev_get_drvdata(dev);
+	struct stm32_port *stm32port = to_stm32_port(port);
 	int ret;
 
 	uart_suspend_port(&stm32_usart_driver, port);
@@ -2362,6 +2398,9 @@ static int __maybe_unused stm32_usart_se
 		ret = stm32_usart_serial_en_wakeup(port, true);
 		if (ret)
 			return ret;
+
+		if (stm32port->clk_am)
+			stm32_usart_enable_am(stm32port);
 	}
 
 	/*
@@ -2383,11 +2422,15 @@ static int __maybe_unused stm32_usart_se
 static int __maybe_unused stm32_usart_serial_resume(struct device *dev)
 {
 	struct uart_port *port = dev_get_drvdata(dev);
+	struct stm32_port *stm32port = to_stm32_port(port);
 	int ret;
 
 	pinctrl_pm_select_default_state(dev);
 
 	if (device_may_wakeup(dev) || device_wakeup_path(dev)) {
+		if (stm32port->clk_am)
+			stm32_usart_disable_am(stm32port);
+
 		ret = stm32_usart_serial_en_wakeup(port, false);
 		if (ret)
 			return ret;
--- a/drivers/tty/serial/stm32-usart.h
+++ b/drivers/tty/serial/stm32-usart.h
@@ -27,6 +27,7 @@ struct stm32_usart_offsets {
 	u16 tdr;
 	u16 presc;
 	u16 hwcfgr1;
+	u16 hwcfgr2;
 };
 
 struct stm32_backup_regs {
@@ -206,6 +207,9 @@ static const unsigned int STM32_USART_PR
 #define USART_HWCFCR1_CFG7	GENMASK(27, 24)	/* MP1 */
 #define USART_HWCFCR1_CFG8	GENMASK(31, 28)	/* MP1 */
 
+/* USART_HWCFCR2 */
+#define USART_HWCFCR2_CFG3	GENMASK(11, 8)	/* MP2 */
+
 #define STM32_SERIAL_NAME "ttySTM"
 #define STM32_MAX_PORTS 9
 #define STM32H7_USART_FIFO_SIZE 16
@@ -221,6 +225,7 @@ static const unsigned int STM32_USART_PR
 struct stm32_port {
 	struct uart_port port;
 	struct clk *clk;
+	struct clk *clk_am;
 	const struct stm32_usart_info *info;
 	struct dma_chan *rx_ch;  /* dma rx channel            */
 	dma_addr_t rx_dma_buf;   /* dma rx buffer bus address */
@@ -243,6 +248,7 @@ struct stm32_port {
 	int rxftcfg;		/* RX FIFO threshold CFG      */
 	int txftcfg;		/* TX FIFO threshold CFG      */
 	bool wakeup_src;
+	bool wakeup_am;		/* Autonomous mode enabled */
 	int rdr_mask;		/* receive data register mask */
 	struct mctrl_gpios *gpios; /* modem control gpios */
 	struct dma_tx_state rx_dma_state;
