From d395bb38df16d2ab1ffa6afe6de442f05ed5dfb8 Mon Sep 17 00:00:00 2001
From: Rahul Kumar <rahul.kumar05@st.com>
Date: Mon, 13 May 2024 15:43:45 +0530
Subject: [PATCH] phy: stm32: add support for stm32mp21

The MP25 has heterogeneous features and bit mapping,
in between the two PHYs, whereas MP21 has the same bit
mapping for the two PHYs.
So add hardware configuration data, with the compatible
to manage this diversity.

Change-Id: I06b5a3bcc9ddc01d41f89a01499752a48e963495
Signed-off-by: Rahul Kumar <rahul.kumar05@st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/378215
Tested-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/phy/st/phy-stm32-usb2phy.c | 91 +++++++++++++++++++++---------
 1 file changed, 64 insertions(+), 27 deletions(-)

--- a/drivers/phy/st/phy-stm32-usb2phy.c
+++ b/drivers/phy/st/phy-stm32-usb2phy.c
@@ -90,6 +90,7 @@ struct stm32_usb2phy {
 enum stm32_usb2phy_mode {
 	USB2_MODE_HOST_ONLY,
 	USB2_MODE_DRD,
+	USB2_MODE_OTG,
 };
 
 struct stm32mp2_usb2phy_hw_data {
@@ -97,7 +98,28 @@ struct stm32mp2_usb2phy_hw_data {
 	enum stm32_usb2phy_mode valid_mode;
 };
 
-static const struct stm32mp2_usb2phy_hw_data stm32mp2_usb2phy_hwdata[] = {
+static const struct stm32mp2_usb2phy_hw_data stm32mp21_usb2phy_hwdata[] = {
+	{
+		.cr_offset = PHY1CR_OFFSET,
+		.trim1_offset = PHY1TRIM1_OFFSET,
+		.trim2_offset = PHY1TRIM2_OFFSET,
+		.valid_mode = USB2_MODE_HOST_ONLY,
+		.phyrefsel_mask = 0x7,
+		.phyrefsel_bitpos = 4,
+	},
+	{
+		.cr_offset = PHY2CR_OFFSET,
+		.trim1_offset = PHY2TRIM1_OFFSET,
+		.trim2_offset = PHY2TRIM2_OFFSET,
+		.valid_mode = USB2_MODE_OTG,
+		.phyrefsel_mask = 0x7,
+		.phyrefsel_bitpos = 4,
+	},
+	{
+	}
+};
+
+static const struct stm32mp2_usb2phy_hw_data stm32mp25_usb2phy_hwdata[] = {
 	{
 		.cr_offset = PHY1CR_OFFSET,
 		.trim1_offset = PHY1TRIM1_OFFSET,
@@ -113,6 +135,8 @@ static const struct stm32mp2_usb2phy_hw_
 		.valid_mode = USB2_MODE_DRD,
 		.phyrefsel_mask = 0x7,
 		.phyrefsel_bitpos = 12,
+	},
+	{
 	}
 };
 
@@ -121,16 +145,20 @@ static const struct stm32mp2_usb2phy_hw_
  * depending on the instance. So identify the instance by using CR offset to report
  * the correct bitfields & modes to use
  */
-static const struct stm32mp2_usb2phy_hw_data *stm32_usb2phy_get_hwdata(unsigned long offset)
+static const struct stm32mp2_usb2phy_hw_data *stm32_usb2phy_get_hwdata(struct device *dev,
+								       unsigned long offset)
 {
 	int i;
+	const struct stm32mp2_usb2phy_hw_data *hwdata = device_get_match_data(dev);
 
-	for (i = 0; i < sizeof(stm32mp2_usb2phy_hwdata); i++)
-		if (stm32mp2_usb2phy_hwdata[i].cr_offset == offset)
-			break;
+	if (!hwdata)
+		return NULL;
 
-	if (i < sizeof(stm32mp2_usb2phy_hwdata))
-		return &stm32mp2_usb2phy_hwdata[i];
+	for (i = 0; i < (hwdata[i].cr_offset != offset) && (hwdata[i].cr_offset); i++)
+		;
+
+	if (hwdata[i].cr_offset)
+		return &hwdata[i];
 
 	return NULL;
 }
@@ -345,7 +373,8 @@ static int stm32_usb2phy_set_mode(struct
 
 	switch (mode) {
 	case PHY_MODE_USB_HOST:
-		if (phy_data->valid_mode == USB2_MODE_HOST_ONLY)
+		if (phy_data->valid_mode == USB2_MODE_HOST_ONLY ||
+		    phy_data->valid_mode == USB2_MODE_OTG)
 			ret = regmap_update_bits(phy_dev->regmap,
 						 phy_data->cr_offset,
 						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK,
@@ -374,25 +403,32 @@ static int stm32_usb2phy_set_mode(struct
 		break;
 
 	case PHY_MODE_USB_DEVICE:
-		if (submode == USB_ROLE_NONE) {
+		if (phy_data->valid_mode == USB2_MODE_OTG)
 			ret = regmap_update_bits(phy_dev->regmap,
 						 phy_data->cr_offset,
-						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
-						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK);
-		} else {
-			ret = regmap_update_bits(phy_dev->regmap,
-						 phy_data->cr_offset,
-						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
-						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK);
+						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK,
+						 0);
+		else {
+			if (submode == USB_ROLE_NONE) {
+				ret = regmap_update_bits(phy_dev->regmap,
+							 phy_data->cr_offset,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK);
+			} else {
+				ret = regmap_update_bits(phy_dev->regmap,
+							 phy_data->cr_offset,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK);
+			}
 		}
 		if (ret) {
 			dev_err(dev, "can't set usb2phycr (%d)\n", ret);
@@ -728,7 +764,7 @@ static int stm32_usb2phy_probe(struct pl
 		phy_dev->vdda18 = NULL;
 	}
 
-	phy_dev->hw_data = stm32_usb2phy_get_hwdata(phycr);
+	phy_dev->hw_data = stm32_usb2phy_get_hwdata(dev, phycr);
 	if (!phy_dev->hw_data) {
 		dev_err(dev, "can't get matching stm32mp2_usb2_of_data\n");
 		return -EINVAL;
@@ -764,7 +800,8 @@ static DEFINE_SIMPLE_DEV_PM_OPS(stm32_us
 				stm32_usb2phy_resume);
 
 static const struct of_device_id stm32_usb2phy_of_match[] = {
-	{ .compatible = "st,stm32mp25-usb2phy" },
+	{ .compatible = "st,stm32mp25-usb2phy", .data = (const void *)&stm32mp25_usb2phy_hwdata },
+	{ .compatible = "st,stm32mp21-usb2phy", .data = (const void *)&stm32mp21_usb2phy_hwdata },
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, stm32_usb2phy_of_match);
