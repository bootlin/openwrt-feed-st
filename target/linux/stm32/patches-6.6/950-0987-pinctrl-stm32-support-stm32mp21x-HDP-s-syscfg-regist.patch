From a39c6bc455b3a8cb5e205769d1c7240a8c3de6fa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Cl=C3=A9ment=20Le=20Goffic?= <clement.legoffic@foss.st.com>
Date: Tue, 16 Apr 2024 12:30:33 +0200
Subject: [PATCH] pinctrl: stm32: support stm32mp21x HDP's syscfg register
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add the support of the HDPUSBDBGCR syscfg register.
This register allows the user to choose between USB HOST and USB OTG
signals on HDP signals multiplexer.

Change-Id: If1752904cb916522eb2c7a4a3e267d7cd5751df9
Signed-off-by: Cl√©ment Le Goffic <clement.legoffic@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/373876
Domain-Review: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Reviewed-by: Amelie DELAUNAY <amelie.delaunay@foss.st.com>
---
 drivers/pinctrl/stm32/pinctrl-stm32-hdp.c | 33 +++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/drivers/pinctrl/stm32/pinctrl-stm32-hdp.c b/drivers/pinctrl/stm32/pinctrl-stm32-hdp.c
index 3b675865ae95..48a673b247cb 100644
--- a/drivers/pinctrl/stm32/pinctrl-stm32-hdp.c
+++ b/drivers/pinctrl/stm32/pinctrl-stm32-hdp.c
@@ -7,6 +7,7 @@
 #include <linux/clk.h>
 #include <linux/gpio/driver.h>
 #include <linux/io.h>
+#include <linux/mfd/syscon.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/pinctrl/consumer.h>
@@ -15,6 +16,7 @@
 #include <linux/pinctrl/pinmux.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
+#include <linux/regmap.h>
 
 #include "../core.h"
 
@@ -37,6 +39,9 @@
 #define HDP_MUX_MASK(n)		(GENMASK(3, 0) << HDP_MUX_SHIFT(n))
 #define HDP_MUX_GPOVAL(n)	(0xF << HDP_MUX_SHIFT(n))
 
+#define SYSCFG_USBDBGCR_REG	1
+#define SYSCFG_USBDBGCR_MASK	2
+#define SYSCFG_USBDBGCR_VAL	3
 struct stm32_hdp {
 	struct device *dev;
 	void __iomem *base;
@@ -45,6 +50,7 @@ struct stm32_hdp {
 	struct gpio_chip gpio_chip;
 	u32 mux_conf;
 	u32 gposet_conf;
+	struct regmap *regmap;
 };
 
 static const struct pinctrl_pin_desc stm32_hdp_pins[] = {
@@ -191,6 +197,29 @@ static const struct of_device_id stm32_hdp_of_match[] = {
 	{}
 };
 
+static int stm32_hdp_syscfg_setup(struct stm32_hdp *hdp)
+{
+	struct device_node *np = hdp->dev->of_node;
+	u32 usbdbgcr_reg, mask, val;
+	int err;
+
+	hdp->regmap = syscon_regmap_lookup_by_phandle_optional(np, "st,syscfg");
+	if (IS_ERR_OR_NULL(hdp->regmap))
+		return PTR_ERR_OR_ZERO(hdp->regmap);
+
+	err = of_property_read_u32_index(np, "st,syscfg", SYSCFG_USBDBGCR_REG, &usbdbgcr_reg);
+	if (err)
+		return dev_err_probe(hdp->dev, err, "can't get SYSCFG_USBDBGCR offset\n");
+	err = of_property_read_u32_index(np, "st,syscfg", SYSCFG_USBDBGCR_MASK, &mask);
+	if (err)
+		return dev_err_probe(hdp->dev, err, "can't get SYSCFG_USBDBGCR mask value\n");
+	err = of_property_read_u32_index(np, "st,syscfg", SYSCFG_USBDBGCR_VAL, &val);
+	if (err)
+		return dev_err_probe(hdp->dev, err, "can't get SYSCFG_USBDBGCR value\n");
+
+	return regmap_update_bits(hdp->regmap, usbdbgcr_reg, mask, val);
+}
+
 static int stm32_hdp_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -209,6 +238,10 @@ static int stm32_hdp_probe(struct platform_device *pdev)
 	if (IS_ERR(hdp->base))
 		return PTR_ERR(hdp->base);
 
+	err = stm32_hdp_syscfg_setup(hdp);
+	if (err)
+		return dev_err_probe(dev, err, "Failed to setup and configure syscfg register");
+
 	hdp->clk = devm_clk_get_enabled(dev, NULL);
 	if (IS_ERR(hdp->clk))
 		return dev_err_probe(dev, PTR_ERR(hdp->clk), "No HDP clock provided\n");
-- 
2.39.5

