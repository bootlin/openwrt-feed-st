From b0f280ab2ad46a563aae26c0b921598aa72fb75a Mon Sep 17 00:00:00 2001
From: Pankaj Dev <pankaj.dev@st.com>
Date: Mon, 26 Jun 2023 11:25:02 +0530
Subject: [PATCH] phy: stm32: add usb-role switch handling in STM32 USB2-FEMTO
 PHY

phy_set_mode provides usb_role data for each cable change event,
need to use this information to correctly handle VBUSVALID bit
(for host mode) and VBUSVLDEXT bit (for device mode).

This is mandatory to enable the correct operation of dwc3 in
superspeed mode, since VBUS changes with cable change event
and SS data line switch is enabled later, hence VBUSVALID or
VBUSVLDEXT needs to be managed according to cable change events

Corresponding change done in dwc3, to usb_role info to phy_set_mode,
each time the role switch event happens. Aim is to support superspeed
operation, along with role-switch for stm32mp25

Signed-off-by: Pankaj Dev <pankaj.dev@st.com>
Change-Id: Ice2afd2633e432b73063faba899377bb73f5627a
---
 drivers/phy/st/phy-stm32-usb2phy.c | 48 +++++++++++++++++++++++-------
 1 file changed, 38 insertions(+), 10 deletions(-)

diff --git a/drivers/phy/st/phy-stm32-usb2phy.c b/drivers/phy/st/phy-stm32-usb2phy.c
index 47db66662e49..660fc794e48e 100644
--- a/drivers/phy/st/phy-stm32-usb2phy.c
+++ b/drivers/phy/st/phy-stm32-usb2phy.c
@@ -16,6 +16,7 @@
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
+#include <linux/usb/role.h>
 #include <linux/mfd/syscon.h>
 
 #define PHY1CR_OFFSET		0x2400
@@ -197,12 +198,23 @@ static int stm32_usb2phy_set_mode(struct phy *phy, enum phy_mode mode, int submo
 						 phy_data->cr_offset,
 						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK,
 						 0);
-		else
-			ret = regmap_update_bits(phy_dev->regmap,
-						 phy_data->cr_offset,
-						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
-						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK,
-						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK);
+		else {
+			if (submode == USB_ROLE_NONE) {
+				ret = regmap_update_bits(phy_dev->regmap,
+							 phy_data->cr_offset,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK, 0);
+			} else {
+				ret = regmap_update_bits(phy_dev->regmap,
+							 phy_data->cr_offset,
+							 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK |
+							 SYSCFG_USB2PHY2CR_VBUSVALID_MASK,
+							 SYSCFG_USB2PHY2CR_VBUSVALID_MASK);
+			}
+		}
 		if (ret) {
 			dev_err(dev, "can't set usb2phycr (%d)\n", ret);
 			return ret;
@@ -210,10 +222,26 @@ static int stm32_usb2phy_set_mode(struct phy *phy, enum phy_mode mode, int submo
 		break;
 
 	case PHY_MODE_USB_DEVICE:
-		ret = regmap_update_bits(phy_dev->regmap,
-					 phy_data->cr_offset,
-					 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK,
-					 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK);
+		if (submode == USB_ROLE_NONE) {
+			ret = regmap_update_bits(phy_dev->regmap,
+						 phy_data->cr_offset,
+						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
+						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK);
+		} else {
+			ret = regmap_update_bits(phy_dev->regmap,
+						 phy_data->cr_offset,
+						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVALID_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK,
+						 SYSCFG_USB2PHY2CR_USB2PHY2CMN_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXTSEL_MASK |
+						 SYSCFG_USB2PHY2CR_VBUSVLDEXT_MASK);
+		}
 		if (ret) {
 			dev_err(dev, "can't set usb2phycr (%d)\n", ret);
 			return ret;
-- 
2.39.5

