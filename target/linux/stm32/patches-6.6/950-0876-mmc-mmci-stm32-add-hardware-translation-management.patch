From 32453aa77718218e64736cec7a1856cba0092ac9 Mon Sep 17 00:00:00 2001
From: Christophe Kerello <christophe.kerello@foss.st.com>
Date: Wed, 3 Apr 2024 15:00:39 +0200
Subject: [PATCH] mmc: mmci: stm32: add hardware translation management

Add hardware translation management to allow to access
the 4 GB of the DDR.

Change-Id: I017b4a7c90ecf076fd5072fad111c26e0cc7b9ab
Signed-off-by: Christophe Kerello <christophe.kerello@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/371718
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
Tested-by: Christophe KERELLO <christophe.kerello@st.com>
Reviewed-by: Yann GAUTIER <yann.gautier@foss.st.com>
Reviewed-by: Christophe KERELLO <christophe.kerello@st.com>
Domain-Review: Christophe KERELLO <christophe.kerello@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/mmc/host/mmci_stm32_sdmmc.c | 44 +++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/drivers/mmc/host/mmci_stm32_sdmmc.c b/drivers/mmc/host/mmci_stm32_sdmmc.c
index f5da7f9baa52..235901c62ad7 100644
--- a/drivers/mmc/host/mmci_stm32_sdmmc.c
+++ b/drivers/mmc/host/mmci_stm32_sdmmc.c
@@ -7,9 +7,11 @@
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
 #include <linux/iopoll.h>
+#include <linux/mfd/syscon.h>
 #include <linux/mmc/host.h>
 #include <linux/mmc/card.h>
 #include <linux/of_address.h>
+#include <linux/regmap.h>
 #include <linux/reset.h>
 #include <linux/scatterlist.h>
 #include "mmci.h"
@@ -59,6 +61,9 @@ struct sdmmc_idma {
 	dma_addr_t bounce_dma_addr;
 	void *bounce_buf;
 	bool use_bounce_buffer;
+	struct regmap *arcr_regmap;
+	u32 arcr_offset;
+	u32 arcr_mask;
 };
 
 struct sdmmc_dlyb;
@@ -189,6 +194,8 @@ static int sdmmc_idma_setup(struct mmci_host *host)
 {
 	struct sdmmc_idma *idma;
 	struct device *dev = mmc_dev(host->mmc);
+	struct device_node *np = host->mmc->parent->of_node;
+	int ret;
 
 	idma = devm_kzalloc(dev, sizeof(*idma), GFP_KERNEL);
 	if (!idma)
@@ -213,6 +220,22 @@ static int sdmmc_idma_setup(struct mmci_host *host)
 		host->mmc->max_seg_size = host->mmc->max_req_size;
 	}
 
+	idma->arcr_regmap = syscon_regmap_lookup_by_phandle_optional(np, "st,syscfg-arcr");
+	if (idma->arcr_regmap) {
+		if (IS_ERR(idma->arcr_regmap))
+			return PTR_ERR(idma->arcr_regmap);
+
+		ret = of_property_read_u32_index(np, "st,syscfg-arcr", 1,
+						 &idma->arcr_offset);
+		if (ret)
+			return ret;
+
+		ret = of_property_read_u32_index(np, "st,syscfg-arcr", 2,
+						 &idma->arcr_mask);
+		if (ret)
+			return ret;
+	}
+
 	return dma_set_max_seg_size(dev, host->mmc->max_seg_size);
 }
 
@@ -223,10 +246,19 @@ static int sdmmc_idma_start(struct mmci_host *host, unsigned int *datactrl)
 	struct sdmmc_lli_desc *desc = (struct sdmmc_lli_desc *)idma->sg_cpu;
 	struct mmc_data *data = host->data;
 	struct scatterlist *sg;
+	struct device *dev = mmc_dev(host->mmc);
 	int i;
 
 	host->dma_in_progress = true;
 
+	if (idma->arcr_regmap && dev->dma_range_map) {
+		u32 arcr;
+
+		regmap_update_bits(idma->arcr_regmap, idma->arcr_offset,
+				   idma->arcr_mask, idma->arcr_mask);
+		regmap_read(idma->arcr_regmap, idma->arcr_offset, &arcr);
+	}
+
 	if (!host->variant->dma_lli || data->sg_len == 1 ||
 	    idma->use_bounce_buffer) {
 		u32 dma_addr;
@@ -269,6 +301,7 @@ static void sdmmc_idma_error(struct mmci_host *host)
 {
 	struct mmc_data *data = host->data;
 	struct sdmmc_idma *idma = host->dma_priv;
+	struct device *dev = mmc_dev(host->mmc);
 
 	if (!dma_inprogress(host))
 		return;
@@ -277,6 +310,10 @@ static void sdmmc_idma_error(struct mmci_host *host)
 	host->dma_in_progress = false;
 	data->host_cookie = 0;
 
+	if (idma->arcr_regmap && dev->dma_range_map)
+		regmap_update_bits(idma->arcr_regmap, idma->arcr_offset,
+				   idma->arcr_mask, 0);
+
 	if (!idma->use_bounce_buffer)
 		dma_unmap_sg(mmc_dev(host->mmc), data->sg, data->sg_len,
 			     mmc_get_dma_dir(data));
@@ -284,12 +321,19 @@ static void sdmmc_idma_error(struct mmci_host *host)
 
 static void sdmmc_idma_finalize(struct mmci_host *host, struct mmc_data *data)
 {
+	struct sdmmc_idma *idma = host->dma_priv;
+	struct device *dev = mmc_dev(host->mmc);
+
 	if (!dma_inprogress(host))
 		return;
 
 	writel_relaxed(0, host->base + MMCI_STM32_IDMACTRLR);
 	host->dma_in_progress = false;
 
+	if (idma->arcr_regmap && dev->dma_range_map)
+		regmap_update_bits(idma->arcr_regmap, idma->arcr_offset,
+				   idma->arcr_mask, 0);
+
 	if (!data->host_cookie)
 		sdmmc_idma_unprep_data(host, data, 0);
 }
-- 
2.39.5

