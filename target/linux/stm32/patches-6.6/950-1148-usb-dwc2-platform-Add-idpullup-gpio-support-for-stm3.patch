From 97ec396a836083233d836c3cb1b47f6a77f1622a Mon Sep 17 00:00:00 2001
From: Rahul Kumar <rahul.kumar05@st.com>
Date: Wed, 22 May 2024 15:16:34 +0530
Subject: [PATCH] usb: dwc2: platform: Add idpullup gpio support for stm32mp21

Disable idpull up for otg controller.
It is used to disable ID pin sample

Change-Id: I4640ea4134a8805107805638d79d43602302d4f0
Signed-off-by: Rahul Kumar <rahul.kumar05@st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/381599
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Tested-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
---
 drivers/usb/dwc2/core.h     |  4 +++
 drivers/usb/dwc2/drd.c      | 61 +++++++++++++++++++++++++++++++++++++
 drivers/usb/dwc2/hw.h       |  2 ++
 drivers/usb/dwc2/params.c   |  1 +
 drivers/usb/dwc2/platform.c | 32 +++++++++++++++++++
 5 files changed, 100 insertions(+)

--- a/drivers/usb/dwc2/core.h
+++ b/drivers/usb/dwc2/core.h
@@ -396,6 +396,9 @@ enum dwc2_ep0_state {
  *			detection using GGPIO register.
  *			0 - Deactivate the external level detection (default)
  *			1 - Activate the external level detection
+ * @activate_stm32_bvaloval_en: External VBUS valid indicator
+ *			0: VBUS is not valid
+ *			1: VBUS is valid
  * @activate_ingenic_overcurrent_detection: Activate Ingenic overcurrent
  *			detection.
  *			0 - Deactivate the overcurrent detection
@@ -468,6 +471,7 @@ struct dwc2_core_params {
 	u8 hird_threshold;
 	bool activate_stm_fs_transceiver;
 	bool activate_stm_id_vb_detection;
+	bool activate_stm32_bvaloval_en;
 	bool activate_ingenic_overcurrent_detection;
 	bool ipg_isoc_en;
 	u16 max_packet_count;
--- a/drivers/usb/dwc2/drd.c
+++ b/drivers/usb/dwc2/drd.c
@@ -17,11 +17,66 @@
 	((gotgctl) |= GOTGCTL_BVALOEN | GOTGCTL_AVALOEN | GOTGCTL_VBVALOEN | \
 	 GOTGCTL_DBNCE_FLTR_BYPASS)
 
+static void dwc2_ovr_init_stm32mp21(struct dwc2_hsotg *hsotg)
+{
+	unsigned long flags;
+	u32 ggpio;
+
+	spin_lock_irqsave(&hsotg->lock, flags);
+
+	ggpio = dwc2_readl(hsotg, GGPIO);
+	if (hsotg->role_sw_default_mode == USB_DR_MODE_HOST) {
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+	} else {
+		ggpio |= GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		ggpio |= GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+	}
+	dwc2_writel(hsotg, ggpio, GGPIO);
+
+	spin_unlock_irqrestore(&hsotg->lock, flags);
+
+	dwc2_force_mode(hsotg, (hsotg->dr_mode == USB_DR_MODE_HOST) ||
+			(hsotg->role_sw_default_mode == USB_DR_MODE_HOST));
+}
+
+static int dwc2_ovr_avalid_stm32mp21(struct dwc2_hsotg *hsotg, bool valid)
+{
+	u32 ggpio;
+
+	ggpio = dwc2_readl(hsotg, GGPIO);
+	if (valid) {
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+	} else {
+		ggpio |= GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		ggpio |= GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+	}
+	dwc2_writel(hsotg, ggpio, GGPIO);
+
+	return 0;
+}
+
+static int dwc2_ovr_bvalid_stm32mp21(struct dwc2_hsotg *hsotg, bool valid)
+{
+	u32 ggpio;
+
+	ggpio = dwc2_readl(hsotg, GGPIO);
+	ggpio |= GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+	ggpio |= GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+	dwc2_writel(hsotg, ggpio, GGPIO);
+
+	return 0;
+}
+
 static void dwc2_ovr_init(struct dwc2_hsotg *hsotg)
 {
 	unsigned long flags;
 	u32 gotgctl;
 
+	if (hsotg->params.activate_stm32_bvaloval_en)
+		return dwc2_ovr_init_stm32mp21(hsotg);
+
 	spin_lock_irqsave(&hsotg->lock, flags);
 
 	gotgctl = dwc2_readl(hsotg, GOTGCTL);
@@ -43,6 +98,9 @@ static int dwc2_ovr_avalid(struct dwc2_h
 {
 	u32 gotgctl = dwc2_readl(hsotg, GOTGCTL);
 
+	if (hsotg->params.activate_stm32_bvaloval_en)
+		return dwc2_ovr_avalid_stm32mp21(hsotg, valid);
+
 	/* Check if A-Session is already in the right state */
 	if ((valid && (gotgctl & GOTGCTL_AVALOVAL) && (gotgctl & GOTGCTL_VBVALOVAL)) ||
 	    (!valid && !(gotgctl & (GOTGCTL_AVALOVAL | GOTGCTL_VBVALOVAL))))
@@ -65,6 +123,9 @@ static int dwc2_ovr_bvalid(struct dwc2_h
 {
 	u32 gotgctl = dwc2_readl(hsotg, GOTGCTL);
 
+	if (hsotg->params.activate_stm32_bvaloval_en)
+		return dwc2_ovr_bvalid_stm32mp21(hsotg, valid);
+
 	/* Check if B-Session is already in the right state */
 	if ((valid && (gotgctl & GOTGCTL_BVALOVAL) && (gotgctl & GOTGCTL_VBVALOVAL)) ||
 	    (!valid && !(gotgctl & (GOTGCTL_BVALOVAL | GOTGCTL_VBVALOVAL))))
--- a/drivers/usb/dwc2/hw.h
+++ b/drivers/usb/dwc2/hw.h
@@ -207,6 +207,8 @@
 #define GGPIO_STM32_OTG_GCCFG_PWRDWN	BIT(16)
 #define GGPIO_STM32_OTG_GCCFG_VBDEN	BIT(21)
 #define GGPIO_STM32_OTG_GCCFG_IDEN	BIT(22)
+#define GGPIO_STM32_OTG_GCCFG_VBVALOVAL	BIT(23)
+#define GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS	BIT(28)
 
 #define GUID				HSOTG_REG(0x003c)
 #define GSNPSID				HSOTG_REG(0x0040)
--- a/drivers/usb/dwc2/params.c
+++ b/drivers/usb/dwc2/params.c
@@ -282,6 +282,7 @@ static void dwc2_set_stm32mp21_hsotg_par
 	p->lpm_clock_gating = false;
 	p->besl = false;
 	p->hird_threshold_en = false;
+	p->activate_stm32_bvaloval_en = true;
 }
 
 const struct of_device_id dwc2_of_match_table[] = {
--- a/drivers/usb/dwc2/platform.c
+++ b/drivers/usb/dwc2/platform.c
@@ -351,6 +351,14 @@ static void dwc2_driver_remove(struct pl
 
 	if (hsotg->ll_hw_enabled)
 		dwc2_lowlevel_hw_disable(hsotg);
+
+	if (hsotg->params.activate_stm32_bvaloval_en) {
+		u32 ggpio = dwc2_readl(hsotg, GGPIO);
+
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		dwc2_writel(hsotg, ggpio, GGPIO);
+	}
 }
 
 /**
@@ -561,6 +569,14 @@ static int dwc2_driver_probe(struct plat
 		usleep_range(5000, 7000);
 	}
 
+	if (hsotg->params.activate_stm32_bvaloval_en) {
+		u32 ggpio = dwc2_readl(hsotg, GGPIO);
+
+		ggpio |= GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+		ggpio |= GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		dwc2_writel(hsotg, ggpio, GGPIO);
+	}
+
 	retval = dwc2_drd_init(hsotg);
 	if (retval) {
 		dev_err_probe(hsotg->dev, retval, "failed to initialize dual-role\n");
@@ -696,6 +712,14 @@ static int __maybe_unused dwc2_suspend(s
 		regulator_disable(dwc2->usb33d);
 	}
 
+	if (dwc2->params.activate_stm32_bvaloval_en) {
+		u32 ggpio = dwc2_readl(dwc2, GGPIO);
+
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+		ggpio &= ~GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		dwc2_writel(dwc2, ggpio, GGPIO);
+	}
+
 	if (dwc2->ll_hw_enabled &&
 	    (is_device_mode || dwc2_host_can_poweroff_phy(dwc2))) {
 		ret = __dwc2_lowlevel_hw_disable(dwc2);
@@ -748,6 +772,14 @@ static int __maybe_unused dwc2_resume(st
 		spin_unlock_irqrestore(&dwc2->lock, flags);
 	}
 
+	if (dwc2->params.activate_stm32_bvaloval_en) {
+		u32 ggpio = dwc2_readl(dwc2, GGPIO);
+
+		ggpio |= GGPIO_STM32_OTG_GCCFG_IDPULLUP_DIS;
+		ggpio |= GGPIO_STM32_OTG_GCCFG_VBVALOVAL;
+		dwc2_writel(dwc2, ggpio, GGPIO);
+	}
+
 	if (!dwc2->role_sw) {
 		/* Need to restore FORCEDEVMODE/FORCEHOSTMODE */
 		dwc2_force_dr_mode(dwc2);
