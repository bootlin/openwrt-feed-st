From cc016885f6dffc8f516676fc5d138d8a337f9e21 Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Fri, 20 Sep 2024 15:28:01 +0200
Subject: [PATCH] drm/panel: otm8009a: Add default-on property

This property keep on the panel at probe.
Due to a common reset between touch screen and panel,
reset does not need to be set when suspend is required.

Change-Id: I832e25badecab37a1c719b072789381cdc343382
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/406516
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 .../gpu/drm/panel/panel-orisetech-otm8009a.c  | 30 +++++++++++--------
 1 file changed, 17 insertions(+), 13 deletions(-)

--- a/drivers/gpu/drm/panel/panel-orisetech-otm8009a.c
+++ b/drivers/gpu/drm/panel/panel-orisetech-otm8009a.c
@@ -299,7 +299,6 @@ static int otm8009a_unprepare(struct drm
 	if (!ctx->prepared)
 		return 0;
 
-	pm_runtime_set_autosuspend_delay(ctx->dev, 1000);
 	pm_runtime_mark_last_busy(panel->dev);
 	ret = pm_runtime_put_autosuspend(panel->dev);
 	if (ret < 0)
@@ -447,7 +446,11 @@ static int otm8009a_probe(struct mipi_ds
 	if (!ctx)
 		return -ENOMEM;
 
-	ctx->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_LOW);
+	if (device_property_read_bool(dev, "default-on"))
+		ctx->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_LOW);
+	else
+		ctx->reset_gpio = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+
 	if (IS_ERR(ctx->reset_gpio))
 		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
 				     "cannot get reset GPIO\n");
@@ -467,17 +470,12 @@ static int otm8009a_probe(struct mipi_ds
 			  MIPI_DSI_MODE_LPM | MIPI_DSI_CLOCK_NON_CONTINUOUS;
 
 	pm_runtime_enable(ctx->dev);
-	/* set delay to 60s to keep alive the panel to wait the splash screen */
-	pm_runtime_set_autosuspend_delay(ctx->dev, 60000);
+	pm_runtime_set_autosuspend_delay(ctx->dev, 1000);
 	pm_runtime_use_autosuspend(ctx->dev);
 
 	drm_panel_init(&ctx->panel, dev, &otm8009a_drm_funcs,
 		       DRM_MODE_CONNECTOR_DSI);
 
-	pm_runtime_get_sync(ctx->dev);
-	pm_runtime_mark_last_busy(ctx->dev);
-	pm_runtime_put_autosuspend(ctx->dev);
-
 	ctx->bl_dev = devm_backlight_device_register(dev, dev_name(dev),
 						     dev, ctx,
 						     &otm8009a_backlight_ops,
@@ -485,7 +483,7 @@ static int otm8009a_probe(struct mipi_ds
 	if (IS_ERR(ctx->bl_dev)) {
 		ret = PTR_ERR(ctx->bl_dev);
 		dev_err(dev, "failed to register backlight: %d\n", ret);
-		return ret;
+		goto disable_pm_runtime;
 	}
 
 	ctx->bl_dev->props.max_brightness = OTM8009A_BACKLIGHT_MAX;
@@ -499,10 +497,16 @@ static int otm8009a_probe(struct mipi_ds
 	if (ret < 0) {
 		dev_err(dev, "mipi_dsi_attach failed. Is host ready?\n");
 		drm_panel_remove(&ctx->panel);
-		return ret;
+		goto disable_pm_runtime;
 	}
 
 	return 0;
+
+disable_pm_runtime:
+	pm_runtime_dont_use_autosuspend(dev);
+	pm_runtime_disable(dev);
+
+	return ret;
 }
 
 static void otm8009a_remove(struct mipi_dsi_device *dsi)
@@ -520,9 +524,6 @@ static __maybe_unused int orisetech_otm8
 {
 	struct otm8009a *ctx = dev_get_drvdata(dev);
 
-	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
-	msleep(20);
-
 	regulator_disable(ctx->supply);
 
 	return 0;
@@ -533,6 +534,9 @@ static __maybe_unused int orisetech_otm8
 	struct otm8009a *ctx = dev_get_drvdata(dev);
 	int ret;
 
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	msleep(20);
+
 	ret = regulator_enable(ctx->supply);
 	if (ret < 0) {
 		dev_err(ctx->dev, "failed to enable supply: %d\n", ret);
