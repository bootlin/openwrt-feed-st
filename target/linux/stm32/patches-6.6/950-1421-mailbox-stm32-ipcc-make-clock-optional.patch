From c864c7f0a3c9a2c48d32500e46423690cd02a560 Mon Sep 17 00:00:00 2001
From: Michel JAOUEN <michel.jaouen@st.com>
Date: Tue, 10 Sep 2024 15:08:21 +0200
Subject: [PATCH] mailbox: stm32-ipcc: make clock optional

Since ipcc is used to for scmi service including clock service,
the device must be capable to work without clock.

Change-Id: I6caacbe972fb975d503514a2b6d2e1ca84fc19c4
Signed-off-by: Michel JAOUEN <michel.jaouen@st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/403514
Domain-Review: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
Reviewed-by: Arnaud POULIQUEN <arnaud.pouliquen@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/mailbox/stm32-ipcc.c | 29 +++++++++++++++++++----------
 1 file changed, 19 insertions(+), 10 deletions(-)

--- a/drivers/mailbox/stm32-ipcc.c
+++ b/drivers/mailbox/stm32-ipcc.c
@@ -216,9 +216,10 @@ static int stm32_ipcc_startup(struct mbo
 	unsigned long chan = chnl->chan;
 	struct stm32_ipcc *ipcc = container_of(link->mbox, struct stm32_ipcc,
 					       controller);
-	int ret;
+	int ret = 0;
 
-	ret = clk_prepare_enable(ipcc->clk);
+	if (ipcc->clk)
+		ret = clk_prepare_enable(ipcc->clk);
 	if (ret) {
 		dev_err(ipcc->controller.dev, "can not enable the clock\n");
 		return ret;
@@ -245,7 +246,8 @@ static void stm32_ipcc_shutdown(struct m
 	if (!chnl->irq_ctx)
 		flush_work(&chnl->rx_work);
 
-	clk_disable_unprepare(ipcc->clk);
+	if (ipcc->clk)
+		clk_disable_unprepare(ipcc->clk);
 }
 
 static int stm32_ipcc_check_rif(struct stm32_ipcc *ipcc, unsigned long chan)
@@ -314,7 +316,7 @@ static int stm32_ipcc_probe(struct platf
 	struct stm32_ipcc *ipcc;
 	u32 ip_ver, hwcfg, cidcfgr, cid, cid_mask, cfen;
 	unsigned long i;
-	int ret;
+	int ret = 0;
 
 	if (!np) {
 		dev_err(dev, "No DT found\n");
@@ -345,12 +347,17 @@ static int stm32_ipcc_probe(struct platf
 
 	ipcc->reg_proc = ipcc->reg_base + ipcc->proc_id * IPCC_PROC_OFFST;
 
-	/* clock */
-	ipcc->clk = devm_clk_get(dev, NULL);
+	/*
+	 * clock : When IPCC is used for the SCMI server, the clock node is not present
+	 * because IPCC needs to be probed before the clock framework, which relies on
+	 * scmi services.In such case the IPCC clock has to be managed by the boot stage
+	 * not by the Linux.
+	 */
+	ipcc->clk = devm_clk_get_optional(dev, NULL);
 	if (IS_ERR(ipcc->clk))
 		return PTR_ERR(ipcc->clk);
-
-	ret = clk_prepare_enable(ipcc->clk);
+	if (ipcc->clk)
+		ret = clk_prepare_enable(ipcc->clk);
 	if (ret) {
 		dev_err(dev, "can not enable the clock\n");
 		return ret;
@@ -453,7 +460,8 @@ static int stm32_ipcc_probe(struct platf
 		 FIELD_GET(VER_MINREV_MASK, ip_ver),
 		 ipcc->controller.num_chans, ipcc->proc_id);
 
-	clk_disable_unprepare(ipcc->clk);
+	if (ipcc->clk)
+		clk_disable_unprepare(ipcc->clk);
 	return 0;
 
 err_irq_wkp:
@@ -462,7 +470,8 @@ err_irq_wkp:
 err_init_wkp:
 	device_set_wakeup_capable(dev, false);
 err_clk:
-	clk_disable_unprepare(ipcc->clk);
+	if (ipcc->clk)
+		clk_disable_unprepare(ipcc->clk);
 	return ret;
 }
 
