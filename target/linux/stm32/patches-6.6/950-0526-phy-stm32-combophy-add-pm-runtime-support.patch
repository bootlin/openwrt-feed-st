From 73bada30e95fb60c97a9f49c7dd9b1295cf6ad84 Mon Sep 17 00:00:00 2001
From: Christian Bruel <christian.bruel@foss.st.com>
Date: Fri, 5 Jan 2024 15:12:53 +0100
Subject: [PATCH] phy: stm32: combophy: add pm runtime support

Add pm runtime support to the stm32-combophy.c driver.
Use in phy_init/phy_exit pm_runtime_resume_get_sync() and
pm_runtime_put_sync() from client (USB3/PCIe) for register access

Signed-off-by: Christian Bruel <christian.bruel@foss.st.com>
Change-Id: I3b8072df834b29e78768fc2198f3427fb10c4924
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/349511
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
Domain-Review: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
Reviewed-by: Fabrice GASNIER <fabrice.gasnier@foss.st.com>
---
 drivers/phy/st/phy-stm32-combophy.c | 25 +++++++++++++++++++++++--
 1 file changed, 23 insertions(+), 2 deletions(-)

--- a/drivers/phy/st/phy-stm32-combophy.c
+++ b/drivers/phy/st/phy-stm32-combophy.c
@@ -15,6 +15,7 @@
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
 #include <linux/phy/phy.h>
+#include <linux/pm_runtime.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
 #include <dt-bindings/phy/phy.h>
@@ -377,6 +378,7 @@ static void stm32_combophy_disable_clock
 static int stm32_combophy_exit(struct phy *phy)
 {
 	struct stm32_combophy *combophy = phy_get_drvdata(phy);
+	struct device *dev = combophy->dev;
 
 	if (combophy->type == PHY_TYPE_PCIE && !combophy->pad_clk)
 		regmap_update_bits(combophy->regmap, SYSCFG_PCIEPRGCR,
@@ -391,30 +393,44 @@ static int stm32_combophy_exit(struct ph
 
 	stm32_combophy_disable_clocks(combophy);
 
+	pm_runtime_put_noidle(dev);
+
 	return 0;
 }
 
 static int stm32_combophy_init(struct phy *phy)
 {
 	struct stm32_combophy *combophy = phy_get_drvdata(phy);
+	struct device *dev = combophy->dev;
 	int ret;
 
+	pm_runtime_get_noresume(dev);
+
 	ret = stm32_combophy_enable_clocks(combophy);
 	if (ret) {
-		dev_err(combophy->dev, "Clock enable failed %d\n", ret);
+		dev_err(dev, "Clock enable failed %d\n", ret);
+		pm_runtime_put_noidle(dev);
 		return ret;
 	}
 
 	ret = stm32_combophy_set_mode(combophy);
 	if (ret) {
-		dev_err(combophy->dev, "combophy mode not set\n");
+		dev_err(dev, "combophy mode not set\n");
 		stm32_combophy_disable_clocks(combophy);
+		pm_runtime_put_noidle(dev);
 		return ret;
 	}
 
 	ret = stm32_combophy_pll_init(combophy);
 	if (ret)
 		stm32_combophy_disable_clocks(combophy);
+		pm_runtime_put_noidle(dev);
+		return ret;
+	}
+
+	pm_runtime_disable(dev);
+	pm_runtime_set_active(dev);
+	pm_runtime_enable(dev);
 
 	return ret;
 }
@@ -431,6 +447,7 @@ static int stm32_combophy_probe(struct p
 	struct device *dev = &pdev->dev;
 	struct device_node *np = dev->of_node;
 	struct phy_provider *phy_provider;
+	int ret;
 
 	combophy = devm_kzalloc(dev, sizeof(*combophy), GFP_KERNEL);
 	if (!combophy)
@@ -474,6 +491,10 @@ static int stm32_combophy_probe(struct p
 		return dev_err_probe(dev, PTR_ERR(combophy->phy),
 				     "failed to create PCIe/USB3 ComboPHY\n");
 
+	ret = devm_pm_runtime_enable(dev);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to enable pm runtime\n");
+
 	phy_set_drvdata(combophy->phy, combophy);
 
 	phy_provider = devm_of_phy_provider_register(dev, stm32_combophy_xlate);
