From 8874c4f58bd46f00236834c5c0b82aac9aff811b Mon Sep 17 00:00:00 2001
From: Yannick Fertre <yannick.fertre@foss.st.com>
Date: Wed, 3 Jan 2024 16:01:54 +0100
Subject: [PATCH] drm/stm: dsi: don't enable/disable dsi-phy clock during probe

To obtain a continuous display after the probe, the txbyte clock
must remain activated.

Change-Id: Icbef610cc132ff69bbc0f024156572b876089263
Signed-off-by: Yannick Fertre <yannick.fertre@foss.st.com>
---
 drivers/gpu/drm/stm/dw_mipi_dsi-stm.c | 87 +++++++++++++++++++++++++--
 1 file changed, 83 insertions(+), 4 deletions(-)

--- a/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
+++ b/drivers/gpu/drm/stm/dw_mipi_dsi-stm.c
@@ -145,6 +145,7 @@ struct dw_mipi_dsi_stm {
 	struct dw_mipi_dsi_plat_data pdata;
 	unsigned int lane_mbps;
 	u32 format;
+	bool probe_done;
 };
 
 static inline void dsi_write(struct dw_mipi_dsi_stm *dsi, u32 reg, u32 val)
@@ -411,6 +412,9 @@ static int dw_mipi_dsi_phy_141_init(void
 	dsi_clear(dsi, DSI_PTCR0, PTCR0_TRSEN);
 	mdelay(1);
 
+	if (clk_hw_is_enabled(&dsi->txbyte_clk))
+		clk_disable_unprepare(dsi->txbyte_clk.clk);
+
 	/* dummy set rate ... */
 	clk_set_rate(dsi->txbyte_clk.clk, dsi->lane_mbps * 1000000);
 
@@ -471,9 +475,19 @@ dw_mipi_dsi_phy_141_get_lane_mbps(void *
 static void dw_mipi_dsi_clk_disable(struct clk_hw *clk)
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(clk);
+	int ret;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	if (!dsi->probe_done)
+		return;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return;
+	}
+
 	if (dsi->hw_version == HWVER_141) {
 		/* Disable the DSI PLL */
 		dsi_clear(dsi, DSI_WRPCR2, WRPCR2_PLLEN);
@@ -484,6 +498,8 @@ static void dw_mipi_dsi_clk_disable(stru
 		/* Disable the regulator */
 		dsi_clear(dsi, DSI_WRPCR, WRPCR_REGEN | WRPCR_BGREN);
 	}
+
+	clk_disable_unprepare(dsi->pclk);
 }
 
 static int dw_mipi_dsi_clk_enable(struct clk_hw *clk)
@@ -494,6 +510,15 @@ static int dw_mipi_dsi_clk_enable(struct
 
 	DRM_DEBUG_DRIVER("\n");
 
+	if (!dsi->probe_done)
+		return 0;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return ret;
+	}
+
 	if (dsi->hw_version == HWVER_141) {
 		ret = readl_poll_timeout_atomic(dsi->base + DSI_PSR, val, val & PSR_PSSC,
 						SLEEP_US, TIMEOUT_US);
@@ -517,17 +542,30 @@ static int dw_mipi_dsi_clk_enable(struct
 			DRM_DEBUG_DRIVER("!TIMEOUT! waiting PLL, let's continue\n");
 	}
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return 0;
 }
 
 static int dw_mipi_dsi_clk_is_enabled(struct clk_hw *hw)
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
+	int ret;
+
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return false;
+	}
 
 	if (dsi->hw_version == HWVER_141)
-		return dsi_read(dsi, DSI_WRPCR2) & WRPCR2_PLLEN;
+		ret = dsi_read(dsi, DSI_WRPCR2) & WRPCR2_PLLEN;
 	else
-		return dsi_read(dsi, DSI_WRPCR) & WRPCR_PLLEN;
+		ret = dsi_read(dsi, DSI_WRPCR) & WRPCR_PLLEN;
+
+	clk_disable_unprepare(dsi->pclk);
+
+	return ret;
 }
 
 static unsigned long dw_mipi_dsi_clk_recalc_rate(struct clk_hw *hw,
@@ -535,10 +573,17 @@ static unsigned long dw_mipi_dsi_clk_rec
 {
 	struct dw_mipi_dsi_stm *dsi = clk_to_dw_mipi_dsi_stm(hw);
 	unsigned int idf, ndiv, odf, pll_in_khz, pll_out_khz;
+	int ret;
 	u32 val;
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	pll_in_khz = (unsigned int)(parent_rate / 1000);
 
 	if (dsi->hw_version == HWVER_141) {
@@ -563,6 +608,8 @@ static unsigned long dw_mipi_dsi_clk_rec
 	/* Get the adjusted pll out value */
 	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return (unsigned long)pll_out_khz * 1000;
 }
 
@@ -575,6 +622,12 @@ static long dw_mipi_dsi_clk_round_rate(s
 
 	DRM_DEBUG_DRIVER("\n");
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	pll_in_khz = (unsigned int)(*parent_rate / 1000);
 
 	/* Compute best pll parameters */
@@ -594,6 +647,8 @@ static long dw_mipi_dsi_clk_round_rate(s
 	/* Get the adjusted pll out value */
 	pll_out_khz = dsi_pll_get_clkout_khz(pll_in_khz, idf, ndiv, odf);
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return pll_out_khz * 1000;
 }
 
@@ -609,6 +664,12 @@ static int dw_mipi_dsi_clk_set_rate(stru
 
 	pll_in_khz = (unsigned int)(parent_rate / 1000);
 
+	ret = clk_prepare_enable(dsi->pclk);
+	if (ret) {
+		DRM_ERROR("%s: Failed to enable peripheral clk\n", __func__);
+		return -EINVAL;
+	}
+
 	/* Compute best pll parameters */
 	idf = 0;
 	ndiv = 0;
@@ -672,6 +733,8 @@ static int dw_mipi_dsi_clk_set_rate(stru
 		dsi_update_bits(dsi, DSI_WPCR0, WPCR0_UIX4, val);
 	}
 
+	clk_disable_unprepare(dsi->pclk);
+
 	return 0;
 }
 
@@ -740,9 +803,11 @@ static int dw_mipi_dsi_clk_register(stru
 static int dw_mipi_dsi_phy_init(void *priv_data)
 {
 	struct dw_mipi_dsi_stm *dsi = priv_data;
-	int ret;
+	int ret = 0;
+
+	if (!clk_hw_is_enabled(&dsi->txbyte_clk))
+		ret = clk_prepare_enable(dsi->txbyte_clk.clk);
 
-	ret = clk_prepare_enable(dsi->txbyte_clk.clk);
 	return ret;
 }
 
@@ -1204,6 +1269,20 @@ static int dw_mipi_dsi_stm_probe(struct
 	if (IS_ERR(dsi->px_clk))
 		dev_err_probe(dev, PTR_ERR(dsi->px_clk), "Unable to get px_clk clock\n");
 
+	dsi->probe_done = true;
+
+	/*
+	 * To obtain a continuous display after the probe, the txbyte clock must
+	 * remain activated
+	 */
+	if (device_property_read_bool(dev, "default-on")) {
+		ret = clk_prepare_enable(dsi->txbyte_clk.clk);
+		if (ret) {
+			DRM_ERROR("Failed to enable DSI pixel clock: %d\n", ret);
+			goto err_dsi_probe;
+		}
+	}
+
 	clk_disable_unprepare(dsi->pclk);
 	regulator_disable(dsi->vdd_supply);
 
