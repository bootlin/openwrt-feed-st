From a1e061e24936796d7dcc74155a4079e840ffcadf Mon Sep 17 00:00:00 2001
From: Olivier Moysan <olivier.moysan@foss.st.com>
Date: Tue, 20 Feb 2024 11:37:02 +0100
Subject: [PATCH] pwm: stm32: add support for stm32mp25

Add support for STM32MP25 SoC. Use newly introduced compatible to handle
new features along with registers and bits diversity.
The MFD part of the driver fills in ipidr, so it is used to check the
hardware configuration register, when available to gather the number
of PWM channels and complementary outputs.

Signed-off-by: Fabrice Gasnier <fabrice.gasnier@foss.st.com>
Change-Id: I7c5e5d39689dfed82a2aec7b62ede3eda41a19ce
---
 drivers/pwm/pwm-stm32.c | 36 +++++++++++++++++++++++++++++-------
 1 file changed, 29 insertions(+), 7 deletions(-)

--- a/drivers/pwm/pwm-stm32.c
+++ b/drivers/pwm/pwm-stm32.c
@@ -19,6 +19,7 @@
 #define CCMR_CHANNEL_SHIFT 8
 #define CCMR_CHANNEL_MASK  0xFF
 #define MAX_BREAKINPUT 2
+#define MAX_PWM_OUTPUT 4
 
 struct stm32_breakinput {
 	u32 index;
@@ -568,9 +569,16 @@ static int stm32_pwm_probe_breakinputs(s
 	return stm32_pwm_apply_breakinputs(priv);
 }
 
-static void stm32_pwm_detect_complementary(struct stm32_pwm *priv)
+static void stm32_pwm_detect_complementary(struct stm32_pwm *priv, struct stm32_timers *ddata)
 {
-	u32 ccer;
+	u32 ccer, val;
+
+	if (ddata->ipidr) {
+		/* Simply read from HWCFGR the number of complementary outputs (MP25). */
+		regmap_read(priv->regmap, TIM_HWCFGR1, &val);
+		priv->have_complementary_output = !!FIELD_GET(TIM_HWCFGR1_NB_OF_DT, val);
+		return;
+	}
 
 	/*
 	 * If complementary bit doesn't exist writing 1 will have no
@@ -583,10 +591,23 @@ static void stm32_pwm_detect_complementa
 	priv->have_complementary_output = (ccer != 0);
 }
 
-static unsigned int stm32_pwm_detect_channels(struct stm32_pwm *priv,
-					      unsigned int *num_enabled)
+static int stm32_pwm_detect_channels(struct stm32_pwm *priv, struct stm32_timers *ddata,
+				     unsigned int *num_enabled)
 {
-	u32 ccer, ccer_backup;
+	u32 ccer, ccer_backup, val;
+	int npwm = 0;
+
+	if (ddata->ipidr) {
+		/* Simply deduce from HWCFGR the number of outputs (MP25). */
+		regmap_read(priv->regmap, TIM_HWCFGR1, &val);
+		/*
+		 * Timers may have more capture/compare channels than the
+		 * actual number of PWM channel outputs (e.g. TIM_CH[1..4]).
+		 */
+		npwm = FIELD_GET(TIM_HWCFGR1_NB_OF_CC, val);
+
+		return npwm < MAX_PWM_OUTPUT ? npwm : MAX_PWM_OUTPUT;
+	}
 
 	/*
 	 * If channels enable bits don't exist writing 1 will have no
@@ -628,11 +649,11 @@ static int stm32_pwm_probe(struct platfo
 	if (ret)
 		return ret;
 
-	stm32_pwm_detect_complementary(priv);
+	stm32_pwm_detect_complementary(priv, ddata);
 
 	priv->chip.dev = dev;
 	priv->chip.ops = &stm32pwm_ops;
-	priv->chip.npwm = stm32_pwm_detect_channels(priv, &num_enabled);
+	priv->chip.npwm = stm32_pwm_detect_channels(priv, ddata, &num_enabled);
 
 	/* Initialize clock refcount to number of enabled PWM channels. */
 	for (i = 0; i < num_enabled; i++)
@@ -685,6 +706,7 @@ static SIMPLE_DEV_PM_OPS(stm32_pwm_pm_op
 
 static const struct of_device_id stm32_pwm_of_match[] = {
 	{ .compatible = "st,stm32-pwm",	},
+	{ .compatible = "st,stm32mp25-pwm", },
 	{ /* end node */ },
 };
 MODULE_DEVICE_TABLE(of, stm32_pwm_of_match);
