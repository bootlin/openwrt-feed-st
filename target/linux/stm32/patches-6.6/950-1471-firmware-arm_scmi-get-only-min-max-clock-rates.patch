From 95ca6d1d81442126c74ba4c214c238c7184e698d Mon Sep 17 00:00:00 2001
From: Etienne Carriere <etienne.carriere@foss.st.com>
Date: Fri, 12 Jul 2024 18:32:34 +0200
Subject: [PATCH] firmware: arm_scmi: get only min/max clock rates

Remove the implementation iterating over supported SCMI clock rates
as consumer driver clk-scmi.c is only interested in the min and max rate.
These can be queried straight from the clock first and last supported
rates since the SMCI clock protocol specification states that rates
enumerated by message ID CLK_DESCRIBE_RATES are to be enumerated
in incremental order: "The clock rates returned by this call should be
in numeric ascending order.".

Change-Id: Ic43e4bc680b9799c841a999c64bb6a3cdc5b9d39
Signed-off-by: Etienne Carriere <etienne.carriere@foss.st.com>
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/393413
Domain-Review: Patrick DELAUNAY <patrick.delaunay@foss.st.com>
Reviewed-by: Patrice GUILEMOND <patrice.guilemond-ext@st.com>
Tested-by: Patrice GUILEMOND <patrice.guilemond-ext@st.com>
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
---
 drivers/clk/clk-scmi.c            |   4 +-
 drivers/firmware/arm_scmi/clock.c | 209 +++++++++++++-----------------
 include/linux/scmi_protocol.h     |   3 +-
 3 files changed, 94 insertions(+), 122 deletions(-)

--- a/drivers/clk/clk-scmi.c
+++ b/drivers/clk/clk-scmi.c
@@ -192,8 +192,8 @@ static int scmi_clk_ops_init(struct devi
 		if (num_rates <= 0)
 			return -EINVAL;
 
-		min_rate = sclk->info->list.rates[0];
-		max_rate = sclk->info->list.rates[num_rates - 1];
+		min_rate = sclk->info->list.min_rate;
+		max_rate = sclk->info->list.max_rate;
 	} else {
 		min_rate = sclk->info->range.min_rate;
 		max_rate = sclk->info->range.max_rate;
--- a/drivers/firmware/arm_scmi/clock.c
+++ b/drivers/firmware/arm_scmi/clock.c
@@ -227,144 +227,115 @@ static int scmi_clock_attributes_get(con
 	return ret;
 }
 
-static int rate_cmp_func(const void *_r1, const void *_r2)
+static int get_rate_by_index(const struct scmi_protocol_handle *ph,
+			     u32 clk_id, size_t index, u64 *rate,
+			     size_t *rem_rates)
 {
-	const u64 *r1 = _r1, *r2 = _r2;
+	const struct scmi_msg_resp_clock_describe_rates *resp;
+	struct scmi_msg_clock_describe_rates *msg;
+	struct scmi_xfer *t;
+	int ret;
 
-	if (*r1 < *r2)
-		return -1;
-	else if (*r1 == *r2)
-		return 0;
-	else
-		return 1;
-}
+	ret = ph->xops->xfer_get_init(ph, CLOCK_DESCRIBE_RATES, sizeof(*msg), 0,
+				      &t);
+	if (ret)
+		return ret;
 
-struct scmi_clk_ipriv {
-	struct device *dev;
-	u32 clk_id;
-	struct scmi_clock_info *clk;
-};
-
-static void iter_clk_describe_prepare_message(void *message,
-					      const unsigned int desc_index,
-					      const void *priv)
-{
-	struct scmi_msg_clock_describe_rates *msg = message;
-	const struct scmi_clk_ipriv *p = priv;
+	msg = t->tx.buf;
+	msg->id = cpu_to_le32(clk_id);
+	msg->rate_index = cpu_to_le32(index);
 
-	msg->id = cpu_to_le32(p->clk_id);
-	/* Set the number of rates to be skipped/already read */
-	msg->rate_index = cpu_to_le32(desc_index);
-}
+	ret = ph->xops->do_xfer(ph, t);
+	if (ret)
+		goto out;
 
-static int
-iter_clk_describe_update_state(struct scmi_iterator_state *st,
-			       const void *response, void *priv)
-{
-	u32 flags;
-	struct scmi_clk_ipriv *p = priv;
-	const struct scmi_msg_resp_clock_describe_rates *r = response;
-
-	flags = le32_to_cpu(r->num_rates_flags);
-	st->num_remaining = NUM_REMAINING(flags);
-	st->num_returned = NUM_RETURNED(flags);
-	p->clk->rate_discrete = RATE_DISCRETE(flags);
-
-	/* Warn about out of spec replies ... */
-	if (!p->clk->rate_discrete &&
-	    (st->num_returned != 3 || st->num_remaining != 0)) {
-		dev_warn(p->dev,
-			 "Out-of-spec CLOCK_DESCRIBE_RATES reply for %s - returned:%d remaining:%d rx_len:%zd\n",
-			 p->clk->name, st->num_returned, st->num_remaining,
-			 st->rx_len);
-
-		/*
-		 * A known quirk: a triplet is returned but num_returned != 3
-		 * Check for a safe payload size and fix.
-		 */
-		if (st->num_returned != 3 && st->num_remaining == 0 &&
-		    st->rx_len == sizeof(*r) + sizeof(__le32) * 2 * 3) {
-			st->num_returned = 3;
-			st->num_remaining = 0;
-		} else {
-			dev_err(p->dev,
-				"Cannot fix out-of-spec reply !\n");
-			return -EPROTO;
-		}
+	resp = t->rx.buf;
+
+	if (!RATE_DISCRETE(resp->num_rates_flags)) {
+		ret = -EPROTO;
+		goto out;
 	}
 
-	return 0;
-}
+	if (rem_rates)
+		*rem_rates = NUM_RETURNED(resp->num_rates_flags) +
+			     NUM_REMAINING(resp->num_rates_flags) - 1;
+	if (rate)
+		*rate = RATE_TO_U64(resp->rate[0]);
 
-static int
-iter_clk_describe_process_response(const struct scmi_protocol_handle *ph,
-				   const void *response,
-				   struct scmi_iterator_state *st, void *priv)
-{
-	int ret = 0;
-	struct scmi_clk_ipriv *p = priv;
-	const struct scmi_msg_resp_clock_describe_rates *r = response;
-
-	if (!p->clk->rate_discrete) {
-		switch (st->desc_index + st->loop_idx) {
-		case 0:
-			p->clk->range.min_rate = RATE_TO_U64(r->rate[0]);
-			break;
-		case 1:
-			p->clk->range.max_rate = RATE_TO_U64(r->rate[1]);
-			break;
-		case 2:
-			p->clk->range.step_size = RATE_TO_U64(r->rate[2]);
-			break;
-		default:
-			ret = -EINVAL;
-			break;
-		}
-	} else {
-		u64 *rate = &p->clk->list.rates[st->desc_index + st->loop_idx];
-
-		*rate = RATE_TO_U64(r->rate[st->loop_idx]);
-		p->clk->list.num_rates++;
-	}
+out:
+	ph->xops->xfer_put(ph, t);
 
 	return ret;
 }
 
 static int
-scmi_clock_describe_rates_get(const struct scmi_protocol_handle *ph, u32 clk_id,
-			      struct scmi_clock_info *clk)
+scmi_clock_describe_rates_get(const struct scmi_protocol_handle *ph,
+			      u32 clk_id, struct scmi_clock_info *clk)
 {
+	struct scmi_msg_clock_describe_rates *msg;
+	const struct scmi_msg_resp_clock_describe_rates *resp;
+	struct scmi_xfer *t;
 	int ret;
-	void *iter;
-	struct scmi_iterator_ops ops = {
-		.prepare_message = iter_clk_describe_prepare_message,
-		.update_state = iter_clk_describe_update_state,
-		.process_response = iter_clk_describe_process_response,
-	};
-	struct scmi_clk_ipriv cpriv = {
-		.clk_id = clk_id,
-		.clk = clk,
-		.dev = ph->dev,
-	};
-
-	iter = ph->hops->iter_response_init(ph, &ops, SCMI_MAX_NUM_RATES,
-					    CLOCK_DESCRIBE_RATES,
-					    sizeof(struct scmi_msg_clock_describe_rates),
-					    &cpriv);
-	if (IS_ERR(iter))
-		return PTR_ERR(iter);
+	unsigned int num_returned, num_remaining;
 
-	ret = ph->hops->iter_response_run(iter);
+	/* First message gets either the range triplet or the min rate */
+	ret = ph->xops->xfer_get_init(ph, CLOCK_DESCRIBE_RATES, sizeof(*msg), 0,
+				      &t);
 	if (ret)
 		return ret;
 
-	if (!clk->rate_discrete) {
-		dev_dbg(ph->dev, "Min %llu Max %llu Step %llu Hz\n",
-			clk->range.min_rate, clk->range.max_rate,
-			clk->range.step_size);
-	} else if (clk->list.num_rates) {
-		sort(clk->list.rates, clk->list.num_rates,
-		     sizeof(clk->list.rates[0]), rate_cmp_func, NULL);
+	msg = t->tx.buf;
+	msg->id = cpu_to_le32(clk_id);
+	msg->rate_index = 0;
+
+	ret = ph->xops->do_xfer(ph, t);
+	if (ret) {
+		ph->xops->xfer_put(ph, t);
+		return ret;
+	}
+
+	resp = t->rx.buf;
+
+	clk->rate_discrete = RATE_DISCRETE(resp->num_rates_flags);
+	num_returned = NUM_RETURNED(resp->num_rates_flags);
+	num_remaining = NUM_REMAINING(resp->num_rates_flags);
+
+	if (clk->rate_discrete) {
+		clk->list.num_rates = num_returned + num_remaining;
+		clk->list.min_rate = RATE_TO_U64(resp->rate[0]);
+		ph->xops->xfer_put(ph, t);
+
+		ret = get_rate_by_index(ph, clk_id, clk->list.num_rates - 1,
+					&clk->list.max_rate, NULL);
+		if (ret)
+			return ret;
+	} else {
+		/* Warn about out of spec replies ... */
+		if (num_returned != 3 || num_remaining != 0) {
+			dev_warn(ph->dev,
+				 "Out-of-spec CLOCK_DESCRIBE_RATES reply for %s - returned:%d remaining:%d rx_len:%zd\n",
+				 clk->name, num_returned, num_remaining,
+				 t->rx.len);
+
+			/*
+			 * A known quirk: a triplet is returned but
+			 * num_returned != 3, check for a safe payload
+			 * size and fix.
+			 */
+			if (num_returned != 3 && num_remaining == 0 &&
+			    t->rx.len != sizeof(*resp) +
+					 sizeof(__le32) * 2 * 3) {
+				dev_err(ph->dev,
+					"Cannot fix out-of-spec reply !\n");
+				ret = -EPROTO;
+			}
+		}
+		if (!ret) {
+			clk->range.min_rate = RATE_TO_U64(resp->rate[0]);
+			clk->range.max_rate = RATE_TO_U64(resp->rate[1]);
+			clk->range.step_size = RATE_TO_U64(resp->rate[2]);
+		}
+		ph->xops->xfer_put(ph, t);
 	}
 
 	return ret;
--- a/include/linux/scmi_protocol.h
+++ b/include/linux/scmi_protocol.h
@@ -50,7 +50,8 @@ struct scmi_clock_info {
 	union {
 		struct {
 			int num_rates;
-			u64 rates[SCMI_MAX_NUM_RATES];
+			u64 min_rate;
+			u64 max_rate;
 		} list;
 		struct {
 			u64 min_rate;
