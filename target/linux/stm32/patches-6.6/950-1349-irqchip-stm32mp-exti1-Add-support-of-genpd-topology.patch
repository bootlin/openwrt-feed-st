From d71b57806b418b21e7ad81b900ee34bba922c02c Mon Sep 17 00:00:00 2001
From: Patrick Delaunay <patrick.delaunay@foss.st.com>
Date: Wed, 4 Sep 2024 11:24:24 +0200
Subject: [PATCH] irqchip: stm32mp-exti1: Add support of genpd topology

Add a PM domain to manage the wake-up path for EXTI user,
this domain with GENPD_FLAG_ACTIVE_WAKEUP is used to manage EXTI1
dependency for the S2Idle / freeze with PSCI topology on STM32MP25 SoC.

A new IRQ power domain is needed as GENPD_FLAG_ACTIVE_WAKEUP is not managed
by the PSCI generic power domain RET_PD and in this family, the LPLV-Stop1
mode is not allowed when the EXTI1 is used for wake-up path.

The EXTI1 device is the only device in this new IRQ power domain, with the
parent domain found in device tree = RET_PD, and the wake patch for S2IDLE
is indicated with call of device_set_wakeup_path() in the suspend callback.

Signed-off-by: Patrick Delaunay <patrick.delaunay@foss.st.com>
Change-Id: Iee92336da019b5c4c557f59f7133063846ceb28b
Reviewed-on: https://gerrit.st.com/c/mpu/oe/st/linux-stm32/+/393892
ACI: CITOOLS <MDG-smet-aci-reviews@list.st.com>
ACI: CIBUILD <MDG-smet-aci-builds@list.st.com>
---
 drivers/irqchip/irq-stm32mp-exti.c | 66 ++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/drivers/irqchip/irq-stm32mp-exti.c b/drivers/irqchip/irq-stm32mp-exti.c
index c060f922491a..18d0814938d5 100644
--- a/drivers/irqchip/irq-stm32mp-exti.c
+++ b/drivers/irqchip/irq-stm32mp-exti.c
@@ -19,6 +19,7 @@
 #include <linux/of_irq.h>
 #include <linux/platform_device.h>
 #include <linux/pm.h>
+#include <linux/pm_domain.h>
 #include <linux/pm_runtime.h>
 
 #include <dt-bindings/interrupt-controller/arm-gic.h>
@@ -289,6 +290,10 @@ static void stm32mp_chip_suspend(struct stm32mp_exti_chip_data *chip_data,
 	chip_data->ftsr_cache = readl_relaxed(base + bank->ftsr_ofst);
 
 	writel_relaxed(wake_active, base + bank->imr_ofst);
+
+	/* wakeup for IRQ power domain for S2IDLE */
+	if (wake_active)
+		device_set_wakeup_path(chip_data->host_data->dev);
 }
 
 static void stm32mp_chip_resume(struct stm32mp_exti_chip_data *chip_data,
@@ -825,6 +830,63 @@ static void stm32mp_exti_check_rif(struct stm32mp_exti_host_data *host_data)
 	}
 }
 
+static void stm32mp_exti_genpd_remove(void *data)
+{
+	struct generic_pm_domain *genpd = data;
+
+	pm_genpd_remove(genpd);
+}
+
+/* manage WakeUp capable device with EXTI domain, registered on PSCI CPUIdle domain */
+static int stm32mp_exti_add_domain(struct device *dev)
+{
+	struct device_node *np = dev->of_node;
+	struct generic_pm_domain *genpd;
+	int ret;
+
+	/* The PM domain core automatically attaches a single power domain to a device */
+	if (!dev->pm_domain)
+		return 0;
+
+	genpd = devm_kzalloc(dev, sizeof(*genpd), GFP_KERNEL);
+	if (!genpd)
+		return -ENOMEM;
+
+	/* Simple PM domain: only manage the wakeup path for EXTI */
+	genpd->name = np->full_name;
+	genpd->flags = GENPD_FLAG_ACTIVE_WAKEUP;
+	ret = pm_genpd_init(genpd, &pm_domain_always_on_gov, false);
+	if (ret) {
+		dev_err(dev, "Failed to add genpd %d\n", ret);
+		return ret;
+	}
+	ret = devm_add_action_or_reset(dev, stm32mp_exti_genpd_remove, genpd);
+	if (ret)
+		return ret;
+
+	/* Use the same parent for IRQ domain */
+	ret = pm_genpd_add_subdomain(pd_to_genpd(dev->pm_domain), genpd);
+	if (ret) {
+		dev_err(dev, "Failed to add PM subdomain to parent %s\n",
+			pd_to_genpd(dev->pm_domain)->name);
+		return ret;
+	}
+
+	/* Move EXTI device in the created IRQ domain to manage wakeup path */
+	ret = pm_genpd_remove_device(dev);
+	if (ret)  {
+		dev_err(dev, "Failed to remove dev to genpd %d\n", ret);
+		return ret;
+	}
+	ret = pm_genpd_add_device(genpd, dev);
+	if (ret)  {
+		dev_err(dev, "Failed to add dev to genpd %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
 static void stm32mp_exti_remove_irq(void *data)
 {
 	struct irq_domain *domain = data;
@@ -960,6 +1022,10 @@ static int stm32mp_exti_probe(struct platform_device *pdev)
 			return ret;
 	}
 
+	ret = stm32mp_exti_add_domain(dev);
+	if (ret)
+		return ret;
+
 	devm_pm_runtime_enable(dev);
 
 	return 0;
-- 
2.39.5

